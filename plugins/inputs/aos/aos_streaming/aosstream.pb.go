// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aosstream-enduro.proto

/*
Package aos_streaming is a generated protocol buffer package.

It is generated from these files:
	aosstream.proto

It has these top-level messages:
	DeviceStateEvent
	TrafficEvent
	StreamingEvent
	CablePeerEvent
	BGPNeighborEvent
	LinkStatusEvent
	MacEvent
	ArpEvent
	LagEvent
	MlagEvent
	ExtensibleServiceEvent
	RouteEvent
	EvpnType3RouteEvent
	ActiveFloodlistEvent
	EvpnType5RouteEvent
	Event
	HostnameAlert
	ConfigDeviationAlert
	LivenessAlert
	ExtensibleAlert
	DeploymentAlert
	BlueprintRenderingAlert
	RouteAlert
	LagAlert
	StreamingAlert
	CablePeerMismatchAlert
	BGPNeighborMismatchAlert
	InterfaceLinkStatusMismatchAlert
	CountersAlert
	KeyValuePair
	ProbeAlert
	ConfigMismatchAlert
	HeadroomAlert
	MacAlert
	ArpAlert
	MlagAlert
	TestAlert
	InterfaceCounters
	SystemInfo
	ProcessInfo
	FileInfo
	SysResourceCounters
	Tag
	Field
	ProbeProperty
	InterfaceCountersUtilization
	SystemInterfaceUtilization
	ProbeMessage
	GenericPerfmonMessage
	ProbeData
	PerfMon
	Alert
	AosMessage
	AosSequencedMessage
*/
package aos_streaming

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceState int32

const (
	DeviceState_DEVICE_STATE_IS_ACTIVE       DeviceState = 1
	DeviceState_DEVICE_STATE_IS_READY        DeviceState = 2
	DeviceState_DEVICE_STATE_IS_NOCOMMS      DeviceState = 3
	DeviceState_DEVICE_STATE_IS_MAINT        DeviceState = 4
	DeviceState_DEVICE_STATE_IS_REBOOTING    DeviceState = 5
	DeviceState_DEVICE_STATE_OOS_STOCKED     DeviceState = 6
	DeviceState_DEVICE_STATE_OOS_QUARANTINED DeviceState = 7
	DeviceState_DEVICE_STATE_OOS_READY       DeviceState = 8
	DeviceState_DEVICE_STATE_OOS_NOCOMMS     DeviceState = 9
	DeviceState_DEVICE_STATE_OOS_DECOMM      DeviceState = 10
	DeviceState_DEVICE_STATE_OOS_MAINT       DeviceState = 11
	DeviceState_DEVICE_STATE_OOS_REBOOTING   DeviceState = 12
	DeviceState_DEVICE_STATE_ERROR           DeviceState = 13
)

var DeviceState_name = map[int32]string{
	1:  "DEVICE_STATE_IS_ACTIVE",
	2:  "DEVICE_STATE_IS_READY",
	3:  "DEVICE_STATE_IS_NOCOMMS",
	4:  "DEVICE_STATE_IS_MAINT",
	5:  "DEVICE_STATE_IS_REBOOTING",
	6:  "DEVICE_STATE_OOS_STOCKED",
	7:  "DEVICE_STATE_OOS_QUARANTINED",
	8:  "DEVICE_STATE_OOS_READY",
	9:  "DEVICE_STATE_OOS_NOCOMMS",
	10: "DEVICE_STATE_OOS_DECOMM",
	11: "DEVICE_STATE_OOS_MAINT",
	12: "DEVICE_STATE_OOS_REBOOTING",
	13: "DEVICE_STATE_ERROR",
}
var DeviceState_value = map[string]int32{
	"DEVICE_STATE_IS_ACTIVE":       1,
	"DEVICE_STATE_IS_READY":        2,
	"DEVICE_STATE_IS_NOCOMMS":      3,
	"DEVICE_STATE_IS_MAINT":        4,
	"DEVICE_STATE_IS_REBOOTING":    5,
	"DEVICE_STATE_OOS_STOCKED":     6,
	"DEVICE_STATE_OOS_QUARANTINED": 7,
	"DEVICE_STATE_OOS_READY":       8,
	"DEVICE_STATE_OOS_NOCOMMS":     9,
	"DEVICE_STATE_OOS_DECOMM":      10,
	"DEVICE_STATE_OOS_MAINT":       11,
	"DEVICE_STATE_OOS_REBOOTING":   12,
	"DEVICE_STATE_ERROR":           13,
}

func (x DeviceState) Enum() *DeviceState {
	p := new(DeviceState)
	*p = x
	return p
}
func (x DeviceState) String() string {
	return proto.EnumName(DeviceState_name, int32(x))
}
func (x *DeviceState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceState_value, data, "DeviceState")
	if err != nil {
		return err
	}
	*x = DeviceState(value)
	return nil
}
func (DeviceState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Feature int32

const (
	Feature_FEATURE_UNKNOWN             Feature = 0
	Feature_FEATURE_LO0                 Feature = 1
	Feature_FEATURE_FABRIC              Feature = 2
	Feature_FEATURE_LEAF_SERVER         Feature = 3
	Feature_FEATURE_L3EDGE              Feature = 4
	Feature_FEATURE_L2EDGE              Feature = 5
	Feature_FEATURE_SPINE_LEAF          Feature = 6
	Feature_FEATURE_FABRIC_SPINE        Feature = 7
	Feature_FEATURE_EXTERNAL_ROUTER     Feature = 8
	Feature_FEATURE_TO_EXTERNAL_ROUTER  Feature = 9
	Feature_FEATURE_LEAF_L3_SERVER      Feature = 10
	Feature_FEATURE_LEAF_L2_SERVER      Feature = 11
	Feature_FEATURE_LEAF                Feature = 12
	Feature_FEATURE_SPINE               Feature = 13
	Feature_FEATURE_L3_SERVER           Feature = 14
	Feature_FEATURE_L2_SERVER           Feature = 15
	Feature_FEATURE_SERVER              Feature = 16
	Feature_FEATURE_PEER                Feature = 17
	Feature_FEATURE_LEAF_PEER_LINK      Feature = 18
	Feature_FEATURE_LEAF_PAIR           Feature = 19
	Feature_FEATURE_LEAF_PAIR_L2_SERVER Feature = 20
	Feature_FEATURE_UNUSED              Feature = 21
)

var Feature_name = map[int32]string{
	0:  "FEATURE_UNKNOWN",
	1:  "FEATURE_LO0",
	2:  "FEATURE_FABRIC",
	3:  "FEATURE_LEAF_SERVER",
	4:  "FEATURE_L3EDGE",
	5:  "FEATURE_L2EDGE",
	6:  "FEATURE_SPINE_LEAF",
	7:  "FEATURE_FABRIC_SPINE",
	8:  "FEATURE_EXTERNAL_ROUTER",
	9:  "FEATURE_TO_EXTERNAL_ROUTER",
	10: "FEATURE_LEAF_L3_SERVER",
	11: "FEATURE_LEAF_L2_SERVER",
	12: "FEATURE_LEAF",
	13: "FEATURE_SPINE",
	14: "FEATURE_L3_SERVER",
	15: "FEATURE_L2_SERVER",
	16: "FEATURE_SERVER",
	17: "FEATURE_PEER",
	18: "FEATURE_LEAF_PEER_LINK",
	19: "FEATURE_LEAF_PAIR",
	20: "FEATURE_LEAF_PAIR_L2_SERVER",
	21: "FEATURE_UNUSED",
}
var Feature_value = map[string]int32{
	"FEATURE_UNKNOWN":             0,
	"FEATURE_LO0":                 1,
	"FEATURE_FABRIC":              2,
	"FEATURE_LEAF_SERVER":         3,
	"FEATURE_L3EDGE":              4,
	"FEATURE_L2EDGE":              5,
	"FEATURE_SPINE_LEAF":          6,
	"FEATURE_FABRIC_SPINE":        7,
	"FEATURE_EXTERNAL_ROUTER":     8,
	"FEATURE_TO_EXTERNAL_ROUTER":  9,
	"FEATURE_LEAF_L3_SERVER":      10,
	"FEATURE_LEAF_L2_SERVER":      11,
	"FEATURE_LEAF":                12,
	"FEATURE_SPINE":               13,
	"FEATURE_L3_SERVER":           14,
	"FEATURE_L2_SERVER":           15,
	"FEATURE_SERVER":              16,
	"FEATURE_PEER":                17,
	"FEATURE_LEAF_PEER_LINK":      18,
	"FEATURE_LEAF_PAIR":           19,
	"FEATURE_LEAF_PAIR_L2_SERVER": 20,
	"FEATURE_UNUSED":              21,
}

func (x Feature) Enum() *Feature {
	p := new(Feature)
	*p = x
	return p
}
func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}
func (x *Feature) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Feature_value, data, "Feature")
	if err != nil {
		return err
	}
	*x = Feature(value)
	return nil
}
func (Feature) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StreamingType int32

const (
	StreamingType_STREAMING_TYPE_PERFMON StreamingType = 0
	StreamingType_STREAMING_TYPE_EVENTS  StreamingType = 1
	StreamingType_STREAMING_TYPE_ALERTS  StreamingType = 2
)

var StreamingType_name = map[int32]string{
	0: "STREAMING_TYPE_PERFMON",
	1: "STREAMING_TYPE_EVENTS",
	2: "STREAMING_TYPE_ALERTS",
}
var StreamingType_value = map[string]int32{
	"STREAMING_TYPE_PERFMON": 0,
	"STREAMING_TYPE_EVENTS":  1,
	"STREAMING_TYPE_ALERTS":  2,
}

func (x StreamingType) Enum() *StreamingType {
	p := new(StreamingType)
	*p = x
	return p
}
func (x StreamingType) String() string {
	return proto.EnumName(StreamingType_name, int32(x))
}
func (x *StreamingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamingType_value, data, "StreamingType")
	if err != nil {
		return err
	}
	*x = StreamingType(value)
	return nil
}
func (StreamingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StreamingProtocol int32

const (
	StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP StreamingProtocol = 0
)

var StreamingProtocol_name = map[int32]string{
	0: "STREAMING_PROTOCOL_PROTOBUF_OVER_TCP",
}
var StreamingProtocol_value = map[string]int32{
	"STREAMING_PROTOCOL_PROTOBUF_OVER_TCP": 0,
}

func (x StreamingProtocol) Enum() *StreamingProtocol {
	p := new(StreamingProtocol)
	*p = x
	return p
}
func (x StreamingProtocol) String() string {
	return proto.EnumName(StreamingProtocol_name, int32(x))
}
func (x *StreamingProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamingProtocol_value, data, "StreamingProtocol")
	if err != nil {
		return err
	}
	*x = StreamingProtocol(value)
	return nil
}
func (StreamingProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StreamingStatus int32

const (
	StreamingStatus_STREAMING_STATUS_UP   StreamingStatus = 0
	StreamingStatus_STREAMING_STATUS_DOWN StreamingStatus = 1
)

var StreamingStatus_name = map[int32]string{
	0: "STREAMING_STATUS_UP",
	1: "STREAMING_STATUS_DOWN",
}
var StreamingStatus_value = map[string]int32{
	"STREAMING_STATUS_UP":   0,
	"STREAMING_STATUS_DOWN": 1,
}

func (x StreamingStatus) Enum() *StreamingStatus {
	p := new(StreamingStatus)
	*p = x
	return p
}
func (x StreamingStatus) String() string {
	return proto.EnumName(StreamingStatus_name, int32(x))
}
func (x *StreamingStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamingStatus_value, data, "StreamingStatus")
	if err != nil {
		return err
	}
	*x = StreamingStatus(value)
	return nil
}
func (StreamingStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StreamingSequencingMode int32

const (
	StreamingSequencingMode_STREAMING_UNSEQUENCED StreamingSequencingMode = 0
	StreamingSequencingMode_STREAMING_SEQUENCED   StreamingSequencingMode = 1
)

var StreamingSequencingMode_name = map[int32]string{
	0: "STREAMING_UNSEQUENCED",
	1: "STREAMING_SEQUENCED",
}
var StreamingSequencingMode_value = map[string]int32{
	"STREAMING_UNSEQUENCED": 0,
	"STREAMING_SEQUENCED":   1,
}

func (x StreamingSequencingMode) Enum() *StreamingSequencingMode {
	p := new(StreamingSequencingMode)
	*p = x
	return p
}
func (x StreamingSequencingMode) String() string {
	return proto.EnumName(StreamingSequencingMode_name, int32(x))
}
func (x *StreamingSequencingMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamingSequencingMode_value, data, "StreamingSequencingMode")
	if err != nil {
		return err
	}
	*x = StreamingSequencingMode(value)
	return nil
}
func (StreamingSequencingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type BgpSessionAddressFamily int32

const (
	BgpSessionAddressFamily_IPV4 BgpSessionAddressFamily = 0
	BgpSessionAddressFamily_IPV6 BgpSessionAddressFamily = 1
	BgpSessionAddressFamily_EVPN BgpSessionAddressFamily = 2
)

var BgpSessionAddressFamily_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
	2: "EVPN",
}
var BgpSessionAddressFamily_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
	"EVPN": 2,
}

func (x BgpSessionAddressFamily) Enum() *BgpSessionAddressFamily {
	p := new(BgpSessionAddressFamily)
	*p = x
	return p
}
func (x BgpSessionAddressFamily) String() string {
	return proto.EnumName(BgpSessionAddressFamily_name, int32(x))
}
func (x *BgpSessionAddressFamily) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BgpSessionAddressFamily_value, data, "BgpSessionAddressFamily")
	if err != nil {
		return err
	}
	*x = BgpSessionAddressFamily(value)
	return nil
}
func (BgpSessionAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LinkStatus int32

const (
	LinkStatus_LINK_UP      LinkStatus = 0
	LinkStatus_LINK_DOWN    LinkStatus = 1
	LinkStatus_LINK_UNKNOWN LinkStatus = 2
	LinkStatus_LINK_MISSING LinkStatus = 3
)

var LinkStatus_name = map[int32]string{
	0: "LINK_UP",
	1: "LINK_DOWN",
	2: "LINK_UNKNOWN",
	3: "LINK_MISSING",
}
var LinkStatus_value = map[string]int32{
	"LINK_UP":      0,
	"LINK_DOWN":    1,
	"LINK_UNKNOWN": 2,
	"LINK_MISSING": 3,
}

func (x LinkStatus) Enum() *LinkStatus {
	p := new(LinkStatus)
	*p = x
	return p
}
func (x LinkStatus) String() string {
	return proto.EnumName(LinkStatus_name, int32(x))
}
func (x *LinkStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LinkStatus_value, data, "LinkStatus")
	if err != nil {
		return err
	}
	*x = LinkStatus(value)
	return nil
}
func (LinkStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type MacState int32

const (
	MacState_MAC_ADD    MacState = 0
	MacState_MAC_DELETE MacState = 1
	MacState_MAC_MOVE   MacState = 2
)

var MacState_name = map[int32]string{
	0: "MAC_ADD",
	1: "MAC_DELETE",
	2: "MAC_MOVE",
}
var MacState_value = map[string]int32{
	"MAC_ADD":    0,
	"MAC_DELETE": 1,
	"MAC_MOVE":   2,
}

func (x MacState) Enum() *MacState {
	p := new(MacState)
	*p = x
	return p
}
func (x MacState) String() string {
	return proto.EnumName(MacState_name, int32(x))
}
func (x *MacState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MacState_value, data, "MacState")
	if err != nil {
		return err
	}
	*x = MacState(value)
	return nil
}
func (MacState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ArpState int32

const (
	ArpState_ARP_ADD    ArpState = 0
	ArpState_ARP_DELETE ArpState = 1
)

var ArpState_name = map[int32]string{
	0: "ARP_ADD",
	1: "ARP_DELETE",
}
var ArpState_value = map[string]int32{
	"ARP_ADD":    0,
	"ARP_DELETE": 1,
}

func (x ArpState) Enum() *ArpState {
	p := new(ArpState)
	*p = x
	return p
}
func (x ArpState) String() string {
	return proto.EnumName(ArpState_name, int32(x))
}
func (x *ArpState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArpState_value, data, "ArpState")
	if err != nil {
		return err
	}
	*x = ArpState(value)
	return nil
}
func (ArpState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type MlagDomainState int32

const (
	MlagDomainState_MLAG_UNKNOWN  MlagDomainState = 0
	MlagDomainState_MLAG_MISSING  MlagDomainState = 1
	MlagDomainState_MLAG_DISABLED MlagDomainState = 2
	MlagDomainState_MLAG_INACTIVE MlagDomainState = 3
	MlagDomainState_MLAG_ACTIVE   MlagDomainState = 4
)

var MlagDomainState_name = map[int32]string{
	0: "MLAG_UNKNOWN",
	1: "MLAG_MISSING",
	2: "MLAG_DISABLED",
	3: "MLAG_INACTIVE",
	4: "MLAG_ACTIVE",
}
var MlagDomainState_value = map[string]int32{
	"MLAG_UNKNOWN":  0,
	"MLAG_MISSING":  1,
	"MLAG_DISABLED": 2,
	"MLAG_INACTIVE": 3,
	"MLAG_ACTIVE":   4,
}

func (x MlagDomainState) Enum() *MlagDomainState {
	p := new(MlagDomainState)
	*p = x
	return p
}
func (x MlagDomainState) String() string {
	return proto.EnumName(MlagDomainState_name, int32(x))
}
func (x *MlagDomainState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MlagDomainState_value, data, "MlagDomainState")
	if err != nil {
		return err
	}
	*x = MlagDomainState(value)
	return nil
}
func (MlagDomainState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type MlagIntfState int32

const (
	MlagIntfState_MLAG_INTF_UNKNOWN        MlagIntfState = 0
	MlagIntfState_MLAG_INTF_MISSING        MlagIntfState = 1
	MlagIntfState_MLAG_INTF_DISABLED       MlagIntfState = 2
	MlagIntfState_MLAG_INTF_CONFIGURED     MlagIntfState = 3
	MlagIntfState_MLAG_INTF_INACTIVE       MlagIntfState = 4
	MlagIntfState_MLAG_INTF_ACTIVE_PARTIAL MlagIntfState = 5
	MlagIntfState_MLAG_INTF_ACTIVE_FULL    MlagIntfState = 6
)

var MlagIntfState_name = map[int32]string{
	0: "MLAG_INTF_UNKNOWN",
	1: "MLAG_INTF_MISSING",
	2: "MLAG_INTF_DISABLED",
	3: "MLAG_INTF_CONFIGURED",
	4: "MLAG_INTF_INACTIVE",
	5: "MLAG_INTF_ACTIVE_PARTIAL",
	6: "MLAG_INTF_ACTIVE_FULL",
}
var MlagIntfState_value = map[string]int32{
	"MLAG_INTF_UNKNOWN":        0,
	"MLAG_INTF_MISSING":        1,
	"MLAG_INTF_DISABLED":       2,
	"MLAG_INTF_CONFIGURED":     3,
	"MLAG_INTF_INACTIVE":       4,
	"MLAG_INTF_ACTIVE_PARTIAL": 5,
	"MLAG_INTF_ACTIVE_FULL":    6,
}

func (x MlagIntfState) Enum() *MlagIntfState {
	p := new(MlagIntfState)
	*p = x
	return p
}
func (x MlagIntfState) String() string {
	return proto.EnumName(MlagIntfState_name, int32(x))
}
func (x *MlagIntfState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MlagIntfState_value, data, "MlagIntfState")
	if err != nil {
		return err
	}
	*x = MlagIntfState(value)
	return nil
}
func (MlagIntfState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type RouteState int32

const (
	RouteState_ROUTE_ADD    RouteState = 0
	RouteState_ROUTE_DELETE RouteState = 1
)

var RouteState_name = map[int32]string{
	0: "ROUTE_ADD",
	1: "ROUTE_DELETE",
}
var RouteState_value = map[string]int32{
	"ROUTE_ADD":    0,
	"ROUTE_DELETE": 1,
}

func (x RouteState) Enum() *RouteState {
	p := new(RouteState)
	*p = x
	return p
}
func (x RouteState) String() string {
	return proto.EnumName(RouteState_name, int32(x))
}
func (x *RouteState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RouteState_value, data, "RouteState")
	if err != nil {
		return err
	}
	*x = RouteState(value)
	return nil
}
func (RouteState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type AlertSeverity int32

const (
	AlertSeverity_ALERT_LOW      AlertSeverity = 0
	AlertSeverity_ALERT_MEDIUM   AlertSeverity = 1
	AlertSeverity_ALERT_HIGH     AlertSeverity = 2
	AlertSeverity_ALERT_CRITICAL AlertSeverity = 3
)

var AlertSeverity_name = map[int32]string{
	0: "ALERT_LOW",
	1: "ALERT_MEDIUM",
	2: "ALERT_HIGH",
	3: "ALERT_CRITICAL",
}
var AlertSeverity_value = map[string]int32{
	"ALERT_LOW":      0,
	"ALERT_MEDIUM":   1,
	"ALERT_HIGH":     2,
	"ALERT_CRITICAL": 3,
}

func (x AlertSeverity) Enum() *AlertSeverity {
	p := new(AlertSeverity)
	*p = x
	return p
}
func (x AlertSeverity) String() string {
	return proto.EnumName(AlertSeverity_name, int32(x))
}
func (x *AlertSeverity) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AlertSeverity_value, data, "AlertSeverity")
	if err != nil {
		return err
	}
	*x = AlertSeverity(value)
	return nil
}
func (AlertSeverity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type RouteEntryStatus int32

const (
	RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN RouteEntryStatus = 0
	RouteEntryStatus_ROUTE_ENTRY_STATUS_UP      RouteEntryStatus = 1
	RouteEntryStatus_ROUTE_ENTRY_STATUS_PARTIAL RouteEntryStatus = 2
	RouteEntryStatus_ROUTE_ENTRY_STATUS_MISSING RouteEntryStatus = 3
)

var RouteEntryStatus_name = map[int32]string{
	0: "ROUTE_ENTRY_STATUS_UNKNOWN",
	1: "ROUTE_ENTRY_STATUS_UP",
	2: "ROUTE_ENTRY_STATUS_PARTIAL",
	3: "ROUTE_ENTRY_STATUS_MISSING",
}
var RouteEntryStatus_value = map[string]int32{
	"ROUTE_ENTRY_STATUS_UNKNOWN": 0,
	"ROUTE_ENTRY_STATUS_UP":      1,
	"ROUTE_ENTRY_STATUS_PARTIAL": 2,
	"ROUTE_ENTRY_STATUS_MISSING": 3,
}

func (x RouteEntryStatus) Enum() *RouteEntryStatus {
	p := new(RouteEntryStatus)
	*p = x
	return p
}
func (x RouteEntryStatus) String() string {
	return proto.EnumName(RouteEntryStatus_name, int32(x))
}
func (x *RouteEntryStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RouteEntryStatus_value, data, "RouteEntryStatus")
	if err != nil {
		return err
	}
	*x = RouteEntryStatus(value)
	return nil
}
func (RouteEntryStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type NextHopStatus int32

const (
	NextHopStatus_NEXT_HOP_STATUS_UNKNOWN NextHopStatus = 0
	NextHopStatus_NEXT_HOP_STATUS_UP      NextHopStatus = 1
	NextHopStatus_NEXT_HOP_STATUS_MISSING NextHopStatus = 2
)

var NextHopStatus_name = map[int32]string{
	0: "NEXT_HOP_STATUS_UNKNOWN",
	1: "NEXT_HOP_STATUS_UP",
	2: "NEXT_HOP_STATUS_MISSING",
}
var NextHopStatus_value = map[string]int32{
	"NEXT_HOP_STATUS_UNKNOWN": 0,
	"NEXT_HOP_STATUS_UP":      1,
	"NEXT_HOP_STATUS_MISSING": 2,
}

func (x NextHopStatus) Enum() *NextHopStatus {
	p := new(NextHopStatus)
	*p = x
	return p
}
func (x NextHopStatus) String() string {
	return proto.EnumName(NextHopStatus_name, int32(x))
}
func (x *NextHopStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NextHopStatus_value, data, "NextHopStatus")
	if err != nil {
		return err
	}
	*x = NextHopStatus(value)
	return nil
}
func (NextHopStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type RouteType int32

const (
	RouteType_ROUTE_TYPE_UNKNOWN RouteType = 0
	RouteType_ROUTE_TYPE_DIRECT  RouteType = 1
	RouteType_ROUTE_TYPE_BGP     RouteType = 2
	RouteType_ROUTE_TYPE_STAT    RouteType = 3
)

var RouteType_name = map[int32]string{
	0: "ROUTE_TYPE_UNKNOWN",
	1: "ROUTE_TYPE_DIRECT",
	2: "ROUTE_TYPE_BGP",
	3: "ROUTE_TYPE_STAT",
}
var RouteType_value = map[string]int32{
	"ROUTE_TYPE_UNKNOWN": 0,
	"ROUTE_TYPE_DIRECT":  1,
	"ROUTE_TYPE_BGP":     2,
	"ROUTE_TYPE_STAT":    3,
}

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}
func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}
func (x *RouteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RouteType_value, data, "RouteType")
	if err != nil {
		return err
	}
	*x = RouteType(value)
	return nil
}
func (RouteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type DeploymentStatus int32

const (
	DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS DeploymentStatus = 0
	DeploymentStatus_DEPLOYMENT_STATUS_SUCCEEDED  DeploymentStatus = 1
	DeploymentStatus_DEPLOYMENT_STATUS_FAILED     DeploymentStatus = 2
)

var DeploymentStatus_name = map[int32]string{
	0: "DEPLOYMENT_STATUS_INPROGRESS",
	1: "DEPLOYMENT_STATUS_SUCCEEDED",
	2: "DEPLOYMENT_STATUS_FAILED",
}
var DeploymentStatus_value = map[string]int32{
	"DEPLOYMENT_STATUS_INPROGRESS": 0,
	"DEPLOYMENT_STATUS_SUCCEEDED":  1,
	"DEPLOYMENT_STATUS_FAILED":     2,
}

func (x DeploymentStatus) Enum() *DeploymentStatus {
	p := new(DeploymentStatus)
	*p = x
	return p
}
func (x DeploymentStatus) String() string {
	return proto.EnumName(DeploymentStatus_name, int32(x))
}
func (x *DeploymentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeploymentStatus_value, data, "DeploymentStatus")
	if err != nil {
		return err
	}
	*x = DeploymentStatus(value)
	return nil
}
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type StreamingAlertReason int32

const (
	StreamingAlertReason_STREAMING_ALERT_REASON_FAILED_CONNECTION StreamingAlertReason = 0
	StreamingAlertReason_STREAMING_ALERT_REASON_TIMEOUT           StreamingAlertReason = 1
	StreamingAlertReason_STREAMING_ALERT_REASON_DNS_FAILURE       StreamingAlertReason = 2
	StreamingAlertReason_STREAMING_ALERT_REASON_WRITE_TIMEOUT     StreamingAlertReason = 3
)

var StreamingAlertReason_name = map[int32]string{
	0: "STREAMING_ALERT_REASON_FAILED_CONNECTION",
	1: "STREAMING_ALERT_REASON_TIMEOUT",
	2: "STREAMING_ALERT_REASON_DNS_FAILURE",
	3: "STREAMING_ALERT_REASON_WRITE_TIMEOUT",
}
var StreamingAlertReason_value = map[string]int32{
	"STREAMING_ALERT_REASON_FAILED_CONNECTION": 0,
	"STREAMING_ALERT_REASON_TIMEOUT":           1,
	"STREAMING_ALERT_REASON_DNS_FAILURE":       2,
	"STREAMING_ALERT_REASON_WRITE_TIMEOUT":     3,
}

func (x StreamingAlertReason) Enum() *StreamingAlertReason {
	p := new(StreamingAlertReason)
	*p = x
	return p
}
func (x StreamingAlertReason) String() string {
	return proto.EnumName(StreamingAlertReason_name, int32(x))
}
func (x *StreamingAlertReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StreamingAlertReason_value, data, "StreamingAlertReason")
	if err != nil {
		return err
	}
	*x = StreamingAlertReason(value)
	return nil
}
func (StreamingAlertReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type BgpSessionState int32

const (
	BgpSessionState_BGP_SESSION_UP      BgpSessionState = 0
	BgpSessionState_BGP_SESSION_DOWN    BgpSessionState = 1
	BgpSessionState_BGP_SESSION_MISSING BgpSessionState = 2
	BgpSessionState_BGP_SESSION_UNKNOWN BgpSessionState = 3
)

var BgpSessionState_name = map[int32]string{
	0: "BGP_SESSION_UP",
	1: "BGP_SESSION_DOWN",
	2: "BGP_SESSION_MISSING",
	3: "BGP_SESSION_UNKNOWN",
}
var BgpSessionState_value = map[string]int32{
	"BGP_SESSION_UP":      0,
	"BGP_SESSION_DOWN":    1,
	"BGP_SESSION_MISSING": 2,
	"BGP_SESSION_UNKNOWN": 3,
}

func (x BgpSessionState) Enum() *BgpSessionState {
	p := new(BgpSessionState)
	*p = x
	return p
}
func (x BgpSessionState) String() string {
	return proto.EnumName(BgpSessionState_name, int32(x))
}
func (x *BgpSessionState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BgpSessionState_value, data, "BgpSessionState")
	if err != nil {
		return err
	}
	*x = BgpSessionState(value)
	return nil
}
func (BgpSessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type AggregationType int32

const (
	AggregationType_AGGREGATION_TYPE_MAX AggregationType = 1
	AggregationType_AGGREGATION_TYPE_MIN AggregationType = 2
	AggregationType_AGGREGATION_TYPE_SUM AggregationType = 3
	AggregationType_AGGREGATION_TYPE_AVG AggregationType = 4
	AggregationType_AGGREGATION_TYPE_STD AggregationType = 5
)

var AggregationType_name = map[int32]string{
	1: "AGGREGATION_TYPE_MAX",
	2: "AGGREGATION_TYPE_MIN",
	3: "AGGREGATION_TYPE_SUM",
	4: "AGGREGATION_TYPE_AVG",
	5: "AGGREGATION_TYPE_STD",
}
var AggregationType_value = map[string]int32{
	"AGGREGATION_TYPE_MAX": 1,
	"AGGREGATION_TYPE_MIN": 2,
	"AGGREGATION_TYPE_SUM": 3,
	"AGGREGATION_TYPE_AVG": 4,
	"AGGREGATION_TYPE_STD": 5,
}

func (x AggregationType) Enum() *AggregationType {
	p := new(AggregationType)
	*p = x
	return p
}
func (x AggregationType) String() string {
	return proto.EnumName(AggregationType_name, int32(x))
}
func (x *AggregationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AggregationType_value, data, "AggregationType")
	if err != nil {
		return err
	}
	*x = AggregationType(value)
	return nil
}
func (AggregationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type HeadroomType int32

const (
	HeadroomType_HEADROOM_TYPE_MAX HeadroomType = 1
	HeadroomType_HEADROOM_TYPE_MIN HeadroomType = 2
)

var HeadroomType_name = map[int32]string{
	1: "HEADROOM_TYPE_MAX",
	2: "HEADROOM_TYPE_MIN",
}
var HeadroomType_value = map[string]int32{
	"HEADROOM_TYPE_MAX": 1,
	"HEADROOM_TYPE_MIN": 2,
}

func (x HeadroomType) Enum() *HeadroomType {
	p := new(HeadroomType)
	*p = x
	return p
}
func (x HeadroomType) String() string {
	return proto.EnumName(HeadroomType_name, int32(x))
}
func (x *HeadroomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HeadroomType_value, data, "HeadroomType")
	if err != nil {
		return err
	}
	*x = HeadroomType(value)
	return nil
}
func (HeadroomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type DeviceStateEvent struct {
	State            *DeviceState `protobuf:"varint,1,req,name=state,enum=aos.streaming.DeviceState" json:"state,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DeviceStateEvent) Reset()                    { *m = DeviceStateEvent{} }
func (m *DeviceStateEvent) String() string            { return proto.CompactTextString(m) }
func (*DeviceStateEvent) ProtoMessage()               {}
func (*DeviceStateEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceStateEvent) GetState() DeviceState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return DeviceState_DEVICE_STATE_IS_ACTIVE
}

type TrafficEvent struct {
	// Types that are valid to be assigned to Source:
	//	*TrafficEvent_NodeRole
	//	*TrafficEvent_PortRole
	//	*TrafficEvent_Port
	//	*TrafficEvent_Node
	//	*TrafficEvent_Pod
	Source          isTrafficEvent_Source `protobuf_oneof:"source"`
	IntervalSeconds *uint32               `protobuf:"varint,6,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	MeasurementName *string               `protobuf:"bytes,7,req,name=measurement_name,json=measurementName" json:"measurement_name,omitempty"`
	AggregationType *AggregationType      `protobuf:"varint,8,req,name=aggregation_type,json=aggregationType,enum=aos.streaming.AggregationType" json:"aggregation_type,omitempty"`
	// Types that are valid to be assigned to Delta:
	//	*TrafficEvent_DeltaPercentage
	//	*TrafficEvent_DeltaNonnormalized
	Delta            isTrafficEvent_Delta `protobuf_oneof:"delta"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *TrafficEvent) Reset()                    { *m = TrafficEvent{} }
func (m *TrafficEvent) String() string            { return proto.CompactTextString(m) }
func (*TrafficEvent) ProtoMessage()               {}
func (*TrafficEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isTrafficEvent_Source interface{ isTrafficEvent_Source() }
type isTrafficEvent_Delta interface{ isTrafficEvent_Delta() }

type TrafficEvent_NodeRole struct {
	NodeRole Feature `protobuf:"varint,1,opt,name=node_role,json=nodeRole,enum=aos.streaming.Feature,oneof"`
}
type TrafficEvent_PortRole struct {
	PortRole Feature `protobuf:"varint,2,opt,name=port_role,json=portRole,enum=aos.streaming.Feature,oneof"`
}
type TrafficEvent_Port struct {
	Port string `protobuf:"bytes,3,opt,name=port,oneof"`
}
type TrafficEvent_Node struct {
	Node string `protobuf:"bytes,4,opt,name=node,oneof"`
}
type TrafficEvent_Pod struct {
	Pod bool `protobuf:"varint,5,opt,name=pod,oneof"`
}
type TrafficEvent_DeltaPercentage struct {
	DeltaPercentage int32 `protobuf:"varint,9,opt,name=delta_percentage,json=deltaPercentage,oneof"`
}
type TrafficEvent_DeltaNonnormalized struct {
	DeltaNonnormalized int64 `protobuf:"varint,10,opt,name=delta_nonnormalized,json=deltaNonnormalized,oneof"`
}

func (*TrafficEvent_NodeRole) isTrafficEvent_Source()          {}
func (*TrafficEvent_PortRole) isTrafficEvent_Source()          {}
func (*TrafficEvent_Port) isTrafficEvent_Source()              {}
func (*TrafficEvent_Node) isTrafficEvent_Source()              {}
func (*TrafficEvent_Pod) isTrafficEvent_Source()               {}
func (*TrafficEvent_DeltaPercentage) isTrafficEvent_Delta()    {}
func (*TrafficEvent_DeltaNonnormalized) isTrafficEvent_Delta() {}

func (m *TrafficEvent) GetSource() isTrafficEvent_Source {
	if m != nil {
		return m.Source
	}
	return nil
}
func (m *TrafficEvent) GetDelta() isTrafficEvent_Delta {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *TrafficEvent) GetNodeRole() Feature {
	if x, ok := m.GetSource().(*TrafficEvent_NodeRole); ok {
		return x.NodeRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (m *TrafficEvent) GetPortRole() Feature {
	if x, ok := m.GetSource().(*TrafficEvent_PortRole); ok {
		return x.PortRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (m *TrafficEvent) GetPort() string {
	if x, ok := m.GetSource().(*TrafficEvent_Port); ok {
		return x.Port
	}
	return ""
}

func (m *TrafficEvent) GetNode() string {
	if x, ok := m.GetSource().(*TrafficEvent_Node); ok {
		return x.Node
	}
	return ""
}

func (m *TrafficEvent) GetPod() bool {
	if x, ok := m.GetSource().(*TrafficEvent_Pod); ok {
		return x.Pod
	}
	return false
}

func (m *TrafficEvent) GetIntervalSeconds() uint32 {
	if m != nil && m.IntervalSeconds != nil {
		return *m.IntervalSeconds
	}
	return 0
}

func (m *TrafficEvent) GetMeasurementName() string {
	if m != nil && m.MeasurementName != nil {
		return *m.MeasurementName
	}
	return ""
}

func (m *TrafficEvent) GetAggregationType() AggregationType {
	if m != nil && m.AggregationType != nil {
		return *m.AggregationType
	}
	return AggregationType_AGGREGATION_TYPE_MAX
}

func (m *TrafficEvent) GetDeltaPercentage() int32 {
	if x, ok := m.GetDelta().(*TrafficEvent_DeltaPercentage); ok {
		return x.DeltaPercentage
	}
	return 0
}

func (m *TrafficEvent) GetDeltaNonnormalized() int64 {
	if x, ok := m.GetDelta().(*TrafficEvent_DeltaNonnormalized); ok {
		return x.DeltaNonnormalized
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TrafficEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TrafficEvent_OneofMarshaler, _TrafficEvent_OneofUnmarshaler, _TrafficEvent_OneofSizer, []interface{}{
		(*TrafficEvent_NodeRole)(nil),
		(*TrafficEvent_PortRole)(nil),
		(*TrafficEvent_Port)(nil),
		(*TrafficEvent_Node)(nil),
		(*TrafficEvent_Pod)(nil),
		(*TrafficEvent_DeltaPercentage)(nil),
		(*TrafficEvent_DeltaNonnormalized)(nil),
	}
}

func _TrafficEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TrafficEvent)
	// source
	switch x := m.Source.(type) {
	case *TrafficEvent_NodeRole:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.NodeRole))
	case *TrafficEvent_PortRole:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.PortRole))
	case *TrafficEvent_Port:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Port)
	case *TrafficEvent_Node:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Node)
	case *TrafficEvent_Pod:
		t := uint64(0)
		if x.Pod {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TrafficEvent.Source has unexpected type %T", x)
	}
	// delta
	switch x := m.Delta.(type) {
	case *TrafficEvent_DeltaPercentage:
		b.EncodeVarint(9<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DeltaPercentage))
	case *TrafficEvent_DeltaNonnormalized:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DeltaNonnormalized))
	case nil:
	default:
		return fmt.Errorf("TrafficEvent.Delta has unexpected type %T", x)
	}
	return nil
}

func _TrafficEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TrafficEvent)
	switch tag {
	case 1: // source.node_role
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Source = &TrafficEvent_NodeRole{Feature(x)}
		return true, err
	case 2: // source.port_role
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Source = &TrafficEvent_PortRole{Feature(x)}
		return true, err
	case 3: // source.port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &TrafficEvent_Port{x}
		return true, err
	case 4: // source.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &TrafficEvent_Node{x}
		return true, err
	case 5: // source.pod
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Source = &TrafficEvent_Pod{x != 0}
		return true, err
	case 9: // delta.delta_percentage
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Delta = &TrafficEvent_DeltaPercentage{int32(x)}
		return true, err
	case 10: // delta.delta_nonnormalized
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Delta = &TrafficEvent_DeltaNonnormalized{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TrafficEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TrafficEvent)
	// source
	switch x := m.Source.(type) {
	case *TrafficEvent_NodeRole:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodeRole))
	case *TrafficEvent_PortRole:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PortRole))
	case *TrafficEvent_Port:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Port)))
		n += len(x.Port)
	case *TrafficEvent_Node:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Node)))
		n += len(x.Node)
	case *TrafficEvent_Pod:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// delta
	switch x := m.Delta.(type) {
	case *TrafficEvent_DeltaPercentage:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DeltaPercentage))
	case *TrafficEvent_DeltaNonnormalized:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DeltaNonnormalized))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StreamingEvent struct {
	AosServer        *string                  `protobuf:"bytes,1,req,name=aos_server,json=aosServer" json:"aos_server,omitempty"`
	StreamingType    *StreamingType           `protobuf:"varint,2,req,name=streaming_type,json=streamingType,enum=aos.streaming.StreamingType" json:"streaming_type,omitempty"`
	Protocol         *StreamingProtocol       `protobuf:"varint,3,req,name=protocol,enum=aos.streaming.StreamingProtocol" json:"protocol,omitempty"`
	Status           *StreamingStatus         `protobuf:"varint,4,req,name=status,enum=aos.streaming.StreamingStatus" json:"status,omitempty"`
	SequencingMode   *StreamingSequencingMode `protobuf:"varint,5,opt,name=sequencing_mode,json=sequencingMode,enum=aos.streaming.StreamingSequencingMode" json:"sequencing_mode,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *StreamingEvent) Reset()                    { *m = StreamingEvent{} }
func (m *StreamingEvent) String() string            { return proto.CompactTextString(m) }
func (*StreamingEvent) ProtoMessage()               {}
func (*StreamingEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamingEvent) GetAosServer() string {
	if m != nil && m.AosServer != nil {
		return *m.AosServer
	}
	return ""
}

func (m *StreamingEvent) GetStreamingType() StreamingType {
	if m != nil && m.StreamingType != nil {
		return *m.StreamingType
	}
	return StreamingType_STREAMING_TYPE_PERFMON
}

func (m *StreamingEvent) GetProtocol() StreamingProtocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP
}

func (m *StreamingEvent) GetStatus() StreamingStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return StreamingStatus_STREAMING_STATUS_UP
}

func (m *StreamingEvent) GetSequencingMode() StreamingSequencingMode {
	if m != nil && m.SequencingMode != nil {
		return *m.SequencingMode
	}
	return StreamingSequencingMode_STREAMING_UNSEQUENCED
}

type CablePeerEvent struct {
	LclDeviceId      *string `protobuf:"bytes,1,req,name=lcl_device_id,json=lclDeviceId" json:"lcl_device_id,omitempty"`
	LclHostname      *string `protobuf:"bytes,2,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIfname        *string `protobuf:"bytes,3,req,name=lcl_ifname,json=lclIfname" json:"lcl_ifname,omitempty"`
	RmtHostname      *string `protobuf:"bytes,4,req,name=rmt_hostname,json=rmtHostname" json:"rmt_hostname,omitempty"`
	RmtIfname        *string `protobuf:"bytes,5,req,name=rmt_ifname,json=rmtIfname" json:"rmt_ifname,omitempty"`
	RmtSysdescr      *string `protobuf:"bytes,6,req,name=rmt_sysdescr,json=rmtSysdescr" json:"rmt_sysdescr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CablePeerEvent) Reset()                    { *m = CablePeerEvent{} }
func (m *CablePeerEvent) String() string            { return proto.CompactTextString(m) }
func (*CablePeerEvent) ProtoMessage()               {}
func (*CablePeerEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CablePeerEvent) GetLclDeviceId() string {
	if m != nil && m.LclDeviceId != nil {
		return *m.LclDeviceId
	}
	return ""
}

func (m *CablePeerEvent) GetLclHostname() string {
	if m != nil && m.LclHostname != nil {
		return *m.LclHostname
	}
	return ""
}

func (m *CablePeerEvent) GetLclIfname() string {
	if m != nil && m.LclIfname != nil {
		return *m.LclIfname
	}
	return ""
}

func (m *CablePeerEvent) GetRmtHostname() string {
	if m != nil && m.RmtHostname != nil {
		return *m.RmtHostname
	}
	return ""
}

func (m *CablePeerEvent) GetRmtIfname() string {
	if m != nil && m.RmtIfname != nil {
		return *m.RmtIfname
	}
	return ""
}

func (m *CablePeerEvent) GetRmtSysdescr() string {
	if m != nil && m.RmtSysdescr != nil {
		return *m.RmtSysdescr
	}
	return ""
}

type BGPNeighborEvent struct {
	LclHostname      *string                  `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIpaddr        *string                  `protobuf:"bytes,2,req,name=lcl_ipaddr,json=lclIpaddr" json:"lcl_ipaddr,omitempty"`
	LclAsn           *uint32                  `protobuf:"varint,3,req,name=lcl_asn,json=lclAsn" json:"lcl_asn,omitempty"`
	State            *BgpSessionState         `protobuf:"varint,4,req,name=state,enum=aos.streaming.BgpSessionState" json:"state,omitempty"`
	RmtIpaddr        *string                  `protobuf:"bytes,5,req,name=rmt_ipaddr,json=rmtIpaddr" json:"rmt_ipaddr,omitempty"`
	RmtAsn           *uint32                  `protobuf:"varint,6,req,name=rmt_asn,json=rmtAsn" json:"rmt_asn,omitempty"`
	VrfName          *string                  `protobuf:"bytes,7,req,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AddrFamily       *BgpSessionAddressFamily `protobuf:"varint,8,req,name=addr_family,json=addrFamily,enum=aos.streaming.BgpSessionAddressFamily" json:"addr_family,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *BGPNeighborEvent) Reset()                    { *m = BGPNeighborEvent{} }
func (m *BGPNeighborEvent) String() string            { return proto.CompactTextString(m) }
func (*BGPNeighborEvent) ProtoMessage()               {}
func (*BGPNeighborEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BGPNeighborEvent) GetLclHostname() string {
	if m != nil && m.LclHostname != nil {
		return *m.LclHostname
	}
	return ""
}

func (m *BGPNeighborEvent) GetLclIpaddr() string {
	if m != nil && m.LclIpaddr != nil {
		return *m.LclIpaddr
	}
	return ""
}

func (m *BGPNeighborEvent) GetLclAsn() uint32 {
	if m != nil && m.LclAsn != nil {
		return *m.LclAsn
	}
	return 0
}

func (m *BGPNeighborEvent) GetState() BgpSessionState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (m *BGPNeighborEvent) GetRmtIpaddr() string {
	if m != nil && m.RmtIpaddr != nil {
		return *m.RmtIpaddr
	}
	return ""
}

func (m *BGPNeighborEvent) GetRmtAsn() uint32 {
	if m != nil && m.RmtAsn != nil {
		return *m.RmtAsn
	}
	return 0
}

func (m *BGPNeighborEvent) GetVrfName() string {
	if m != nil && m.VrfName != nil {
		return *m.VrfName
	}
	return ""
}

func (m *BGPNeighborEvent) GetAddrFamily() BgpSessionAddressFamily {
	if m != nil && m.AddrFamily != nil {
		return *m.AddrFamily
	}
	return BgpSessionAddressFamily_IPV4
}

type LinkStatusEvent struct {
	Hostname         *string     `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Ifname           *string     `protobuf:"bytes,2,req,name=ifname" json:"ifname,omitempty"`
	State            *LinkStatus `protobuf:"varint,3,req,name=state,enum=aos.streaming.LinkStatus" json:"state,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LinkStatusEvent) Reset()                    { *m = LinkStatusEvent{} }
func (m *LinkStatusEvent) String() string            { return proto.CompactTextString(m) }
func (*LinkStatusEvent) ProtoMessage()               {}
func (*LinkStatusEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LinkStatusEvent) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *LinkStatusEvent) GetIfname() string {
	if m != nil && m.Ifname != nil {
		return *m.Ifname
	}
	return ""
}

func (m *LinkStatusEvent) GetState() LinkStatus {
	if m != nil && m.State != nil {
		return *m.State
	}
	return LinkStatus_LINK_UP
}

type MacEvent struct {
	Macaddress       *string   `protobuf:"bytes,1,req,name=macaddress" json:"macaddress,omitempty"`
	Intfname         *string   `protobuf:"bytes,2,req,name=intfname" json:"intfname,omitempty"`
	Vlan             *uint32   `protobuf:"varint,3,req,name=vlan" json:"vlan,omitempty"`
	State            *MacState `protobuf:"varint,4,req,name=state,enum=aos.streaming.MacState" json:"state,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *MacEvent) Reset()                    { *m = MacEvent{} }
func (m *MacEvent) String() string            { return proto.CompactTextString(m) }
func (*MacEvent) ProtoMessage()               {}
func (*MacEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MacEvent) GetMacaddress() string {
	if m != nil && m.Macaddress != nil {
		return *m.Macaddress
	}
	return ""
}

func (m *MacEvent) GetIntfname() string {
	if m != nil && m.Intfname != nil {
		return *m.Intfname
	}
	return ""
}

func (m *MacEvent) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return 0
}

func (m *MacEvent) GetState() MacState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return MacState_MAC_ADD
}

type ArpEvent struct {
	Ipaddress        *string   `protobuf:"bytes,1,req,name=ipaddress" json:"ipaddress,omitempty"`
	Mac              *string   `protobuf:"bytes,2,req,name=mac" json:"mac,omitempty"`
	Intfname         *string   `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
	State            *ArpState `protobuf:"varint,4,req,name=state,enum=aos.streaming.ArpState" json:"state,omitempty"`
	Vrfname          *string   `protobuf:"bytes,5,req,name=vrfname" json:"vrfname,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ArpEvent) Reset()                    { *m = ArpEvent{} }
func (m *ArpEvent) String() string            { return proto.CompactTextString(m) }
func (*ArpEvent) ProtoMessage()               {}
func (*ArpEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ArpEvent) GetIpaddress() string {
	if m != nil && m.Ipaddress != nil {
		return *m.Ipaddress
	}
	return ""
}

func (m *ArpEvent) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *ArpEvent) GetIntfname() string {
	if m != nil && m.Intfname != nil {
		return *m.Intfname
	}
	return ""
}

func (m *ArpEvent) GetState() ArpState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ArpState_ARP_ADD
}

func (m *ArpEvent) GetVrfname() string {
	if m != nil && m.Vrfname != nil {
		return *m.Vrfname
	}
	return ""
}

type LagEvent struct {
	Hostname          *string  `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Lagname           *string  `protobuf:"bytes,2,req,name=lagname" json:"lagname,omitempty"`
	Interfacesupcount *uint32  `protobuf:"varint,3,req,name=interfacesupcount" json:"interfacesupcount,omitempty"`
	Interfacesup      []string `protobuf:"bytes,4,rep,name=interfacesup" json:"interfacesup,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *LagEvent) Reset()                    { *m = LagEvent{} }
func (m *LagEvent) String() string            { return proto.CompactTextString(m) }
func (*LagEvent) ProtoMessage()               {}
func (*LagEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LagEvent) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *LagEvent) GetLagname() string {
	if m != nil && m.Lagname != nil {
		return *m.Lagname
	}
	return ""
}

func (m *LagEvent) GetInterfacesupcount() uint32 {
	if m != nil && m.Interfacesupcount != nil {
		return *m.Interfacesupcount
	}
	return 0
}

func (m *LagEvent) GetInterfacesup() []string {
	if m != nil {
		return m.Interfacesup
	}
	return nil
}

type MlagEvent struct {
	DomainId         *string          `protobuf:"bytes,1,req,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	DomainState      *MlagDomainState `protobuf:"varint,2,req,name=domain_state,json=domainState,enum=aos.streaming.MlagDomainState" json:"domain_state,omitempty"`
	Intfname         *string          `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
	IntfState        *MlagIntfState   `protobuf:"varint,4,req,name=intf_state,json=intfState,enum=aos.streaming.MlagIntfState" json:"intf_state,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MlagEvent) Reset()                    { *m = MlagEvent{} }
func (m *MlagEvent) String() string            { return proto.CompactTextString(m) }
func (*MlagEvent) ProtoMessage()               {}
func (*MlagEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MlagEvent) GetDomainId() string {
	if m != nil && m.DomainId != nil {
		return *m.DomainId
	}
	return ""
}

func (m *MlagEvent) GetDomainState() MlagDomainState {
	if m != nil && m.DomainState != nil {
		return *m.DomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (m *MlagEvent) GetIntfname() string {
	if m != nil && m.Intfname != nil {
		return *m.Intfname
	}
	return ""
}

func (m *MlagEvent) GetIntfState() MlagIntfState {
	if m != nil && m.IntfState != nil {
		return *m.IntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

type ExtensibleServiceEvent struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExtensibleServiceEvent) Reset()                    { *m = ExtensibleServiceEvent{} }
func (m *ExtensibleServiceEvent) String() string            { return proto.CompactTextString(m) }
func (*ExtensibleServiceEvent) ProtoMessage()               {}
func (*ExtensibleServiceEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExtensibleServiceEvent) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ExtensibleServiceEvent) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type RouteEvent struct {
	DestNetwork      *string           `protobuf:"bytes,1,req,name=dest_network,json=destNetwork" json:"dest_network,omitempty"`
	Status           *RouteEntryStatus `protobuf:"varint,2,req,name=status,enum=aos.streaming.RouteEntryStatus" json:"status,omitempty"`
	Hostname         *string           `protobuf:"bytes,3,req,name=hostname" json:"hostname,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RouteEvent) Reset()                    { *m = RouteEvent{} }
func (m *RouteEvent) String() string            { return proto.CompactTextString(m) }
func (*RouteEvent) ProtoMessage()               {}
func (*RouteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RouteEvent) GetDestNetwork() string {
	if m != nil && m.DestNetwork != nil {
		return *m.DestNetwork
	}
	return ""
}

func (m *RouteEvent) GetStatus() RouteEntryStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

func (m *RouteEvent) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

type EvpnType3RouteEvent struct {
	State            *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId         *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Vni              *uint32     `protobuf:"varint,3,req,name=vni" json:"vni,omitempty"`
	NextHop          *string     `protobuf:"bytes,4,req,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	Rd               *string     `protobuf:"bytes,5,req,name=rd" json:"rd,omitempty"`
	Rt               *string     `protobuf:"bytes,6,req,name=rt" json:"rt,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *EvpnType3RouteEvent) Reset()                    { *m = EvpnType3RouteEvent{} }
func (m *EvpnType3RouteEvent) String() string            { return proto.CompactTextString(m) }
func (*EvpnType3RouteEvent) ProtoMessage()               {}
func (*EvpnType3RouteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EvpnType3RouteEvent) GetState() RouteState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RouteState_ROUTE_ADD
}

func (m *EvpnType3RouteEvent) GetSystemId() string {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return ""
}

func (m *EvpnType3RouteEvent) GetVni() uint32 {
	if m != nil && m.Vni != nil {
		return *m.Vni
	}
	return 0
}

func (m *EvpnType3RouteEvent) GetNextHop() string {
	if m != nil && m.NextHop != nil {
		return *m.NextHop
	}
	return ""
}

func (m *EvpnType3RouteEvent) GetRd() string {
	if m != nil && m.Rd != nil {
		return *m.Rd
	}
	return ""
}

func (m *EvpnType3RouteEvent) GetRt() string {
	if m != nil && m.Rt != nil {
		return *m.Rt
	}
	return ""
}

type ActiveFloodlistEvent struct {
	State            *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId         *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Vni              *uint32     `protobuf:"varint,3,req,name=vni" json:"vni,omitempty"`
	Vtep             *string     `protobuf:"bytes,4,req,name=vtep" json:"vtep,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ActiveFloodlistEvent) Reset()                    { *m = ActiveFloodlistEvent{} }
func (m *ActiveFloodlistEvent) String() string            { return proto.CompactTextString(m) }
func (*ActiveFloodlistEvent) ProtoMessage()               {}
func (*ActiveFloodlistEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ActiveFloodlistEvent) GetState() RouteState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RouteState_ROUTE_ADD
}

func (m *ActiveFloodlistEvent) GetSystemId() string {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return ""
}

func (m *ActiveFloodlistEvent) GetVni() uint32 {
	if m != nil && m.Vni != nil {
		return *m.Vni
	}
	return 0
}

func (m *ActiveFloodlistEvent) GetVtep() string {
	if m != nil && m.Vtep != nil {
		return *m.Vtep
	}
	return ""
}

type EvpnType5RouteEvent struct {
	State            *RouteState `protobuf:"varint,1,req,name=state,enum=aos.streaming.RouteState" json:"state,omitempty"`
	SystemId         *string     `protobuf:"bytes,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	Af               *string     `protobuf:"bytes,3,req,name=af" json:"af,omitempty"`
	Subnet           *string     `protobuf:"bytes,4,req,name=subnet" json:"subnet,omitempty"`
	NextHop          *string     `protobuf:"bytes,5,req,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	Rd               *string     `protobuf:"bytes,6,req,name=rd" json:"rd,omitempty"`
	Rt               *string     `protobuf:"bytes,7,req,name=rt" json:"rt,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *EvpnType5RouteEvent) Reset()                    { *m = EvpnType5RouteEvent{} }
func (m *EvpnType5RouteEvent) String() string            { return proto.CompactTextString(m) }
func (*EvpnType5RouteEvent) ProtoMessage()               {}
func (*EvpnType5RouteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EvpnType5RouteEvent) GetState() RouteState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return RouteState_ROUTE_ADD
}

func (m *EvpnType5RouteEvent) GetSystemId() string {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return ""
}

func (m *EvpnType5RouteEvent) GetAf() string {
	if m != nil && m.Af != nil {
		return *m.Af
	}
	return ""
}

func (m *EvpnType5RouteEvent) GetSubnet() string {
	if m != nil && m.Subnet != nil {
		return *m.Subnet
	}
	return ""
}

func (m *EvpnType5RouteEvent) GetNextHop() string {
	if m != nil && m.NextHop != nil {
		return *m.NextHop
	}
	return ""
}

func (m *EvpnType5RouteEvent) GetRd() string {
	if m != nil && m.Rd != nil {
		return *m.Rd
	}
	return ""
}

func (m *EvpnType5RouteEvent) GetRt() string {
	if m != nil && m.Rt != nil {
		return *m.Rt
	}
	return ""
}

type Event struct {
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Event_DeviceState
	//	*Event_Streaming
	//	*Event_CablePeer
	//	*Event_BgpNeighbor
	//	*Event_LinkStatus
	//	*Event_Traffic
	//	*Event_MacState
	//	*Event_ArpState
	//	*Event_LagState
	//	*Event_MlagState
	//	*Event_ExtensibleEvent
	//	*Event_RouteState
	Data             isEvent_Data `protobuf_oneof:"data"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type isEvent_Data interface{ isEvent_Data() }

type Event_DeviceState struct {
	DeviceState *DeviceStateEvent `protobuf:"bytes,2,opt,name=device_state,json=deviceState,oneof"`
}
type Event_Streaming struct {
	Streaming *StreamingEvent `protobuf:"bytes,3,opt,name=streaming,oneof"`
}
type Event_CablePeer struct {
	CablePeer *CablePeerEvent `protobuf:"bytes,4,opt,name=cable_peer,json=cablePeer,oneof"`
}
type Event_BgpNeighbor struct {
	BgpNeighbor *BGPNeighborEvent `protobuf:"bytes,5,opt,name=bgp_neighbor,json=bgpNeighbor,oneof"`
}
type Event_LinkStatus struct {
	LinkStatus *LinkStatusEvent `protobuf:"bytes,6,opt,name=link_status,json=linkStatus,oneof"`
}
type Event_Traffic struct {
	Traffic *TrafficEvent `protobuf:"bytes,7,opt,name=traffic,oneof"`
}
type Event_MacState struct {
	MacState *MacEvent `protobuf:"bytes,8,opt,name=mac_state,json=macState,oneof"`
}
type Event_ArpState struct {
	ArpState *ArpEvent `protobuf:"bytes,9,opt,name=arp_state,json=arpState,oneof"`
}
type Event_LagState struct {
	LagState *LagEvent `protobuf:"bytes,10,opt,name=lag_state,json=lagState,oneof"`
}
type Event_MlagState struct {
	MlagState *MlagEvent `protobuf:"bytes,11,opt,name=mlag_state,json=mlagState,oneof"`
}
type Event_ExtensibleEvent struct {
	ExtensibleEvent *ExtensibleServiceEvent `protobuf:"bytes,12,opt,name=extensible_event,json=extensibleEvent,oneof"`
}
type Event_RouteState struct {
	RouteState *RouteEvent `protobuf:"bytes,13,opt,name=route_state,json=routeState,oneof"`
}

func (*Event_DeviceState) isEvent_Data()     {}
func (*Event_Streaming) isEvent_Data()       {}
func (*Event_CablePeer) isEvent_Data()       {}
func (*Event_BgpNeighbor) isEvent_Data()     {}
func (*Event_LinkStatus) isEvent_Data()      {}
func (*Event_Traffic) isEvent_Data()         {}
func (*Event_MacState) isEvent_Data()        {}
func (*Event_ArpState) isEvent_Data()        {}
func (*Event_LagState) isEvent_Data()        {}
func (*Event_MlagState) isEvent_Data()       {}
func (*Event_ExtensibleEvent) isEvent_Data() {}
func (*Event_RouteState) isEvent_Data()      {}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Event) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Event) GetDeviceState() *DeviceStateEvent {
	if x, ok := m.GetData().(*Event_DeviceState); ok {
		return x.DeviceState
	}
	return nil
}

func (m *Event) GetStreaming() *StreamingEvent {
	if x, ok := m.GetData().(*Event_Streaming); ok {
		return x.Streaming
	}
	return nil
}

func (m *Event) GetCablePeer() *CablePeerEvent {
	if x, ok := m.GetData().(*Event_CablePeer); ok {
		return x.CablePeer
	}
	return nil
}

func (m *Event) GetBgpNeighbor() *BGPNeighborEvent {
	if x, ok := m.GetData().(*Event_BgpNeighbor); ok {
		return x.BgpNeighbor
	}
	return nil
}

func (m *Event) GetLinkStatus() *LinkStatusEvent {
	if x, ok := m.GetData().(*Event_LinkStatus); ok {
		return x.LinkStatus
	}
	return nil
}

func (m *Event) GetTraffic() *TrafficEvent {
	if x, ok := m.GetData().(*Event_Traffic); ok {
		return x.Traffic
	}
	return nil
}

func (m *Event) GetMacState() *MacEvent {
	if x, ok := m.GetData().(*Event_MacState); ok {
		return x.MacState
	}
	return nil
}

func (m *Event) GetArpState() *ArpEvent {
	if x, ok := m.GetData().(*Event_ArpState); ok {
		return x.ArpState
	}
	return nil
}

func (m *Event) GetLagState() *LagEvent {
	if x, ok := m.GetData().(*Event_LagState); ok {
		return x.LagState
	}
	return nil
}

func (m *Event) GetMlagState() *MlagEvent {
	if x, ok := m.GetData().(*Event_MlagState); ok {
		return x.MlagState
	}
	return nil
}

func (m *Event) GetExtensibleEvent() *ExtensibleServiceEvent {
	if x, ok := m.GetData().(*Event_ExtensibleEvent); ok {
		return x.ExtensibleEvent
	}
	return nil
}

func (m *Event) GetRouteState() *RouteEvent {
	if x, ok := m.GetData().(*Event_RouteState); ok {
		return x.RouteState
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_DeviceState)(nil),
		(*Event_Streaming)(nil),
		(*Event_CablePeer)(nil),
		(*Event_BgpNeighbor)(nil),
		(*Event_LinkStatus)(nil),
		(*Event_Traffic)(nil),
		(*Event_MacState)(nil),
		(*Event_ArpState)(nil),
		(*Event_LagState)(nil),
		(*Event_MlagState)(nil),
		(*Event_ExtensibleEvent)(nil),
		(*Event_RouteState)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// data
	switch x := m.Data.(type) {
	case *Event_DeviceState:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceState); err != nil {
			return err
		}
	case *Event_Streaming:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Streaming); err != nil {
			return err
		}
	case *Event_CablePeer:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CablePeer); err != nil {
			return err
		}
	case *Event_BgpNeighbor:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BgpNeighbor); err != nil {
			return err
		}
	case *Event_LinkStatus:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkStatus); err != nil {
			return err
		}
	case *Event_Traffic:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Traffic); err != nil {
			return err
		}
	case *Event_MacState:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MacState); err != nil {
			return err
		}
	case *Event_ArpState:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArpState); err != nil {
			return err
		}
	case *Event_LagState:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LagState); err != nil {
			return err
		}
	case *Event_MlagState:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MlagState); err != nil {
			return err
		}
	case *Event_ExtensibleEvent:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExtensibleEvent); err != nil {
			return err
		}
	case *Event_RouteState:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RouteState); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Data has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 2: // data.device_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceStateEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_DeviceState{msg}
		return true, err
	case 3: // data.streaming
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamingEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_Streaming{msg}
		return true, err
	case 4: // data.cable_peer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CablePeerEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_CablePeer{msg}
		return true, err
	case 5: // data.bgp_neighbor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BGPNeighborEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_BgpNeighbor{msg}
		return true, err
	case 6: // data.link_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LinkStatusEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_LinkStatus{msg}
		return true, err
	case 7: // data.traffic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrafficEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_Traffic{msg}
		return true, err
	case 8: // data.mac_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MacEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_MacState{msg}
		return true, err
	case 9: // data.arp_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArpEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_ArpState{msg}
		return true, err
	case 10: // data.lag_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LagEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_LagState{msg}
		return true, err
	case 11: // data.mlag_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MlagEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_MlagState{msg}
		return true, err
	case 12: // data.extensible_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensibleServiceEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_ExtensibleEvent{msg}
		return true, err
	case 13: // data.route_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteEvent)
		err := b.DecodeMessage(msg)
		m.Data = &Event_RouteState{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// data
	switch x := m.Data.(type) {
	case *Event_DeviceState:
		s := proto.Size(x.DeviceState)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Streaming:
		s := proto.Size(x.Streaming)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CablePeer:
		s := proto.Size(x.CablePeer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_BgpNeighbor:
		s := proto.Size(x.BgpNeighbor)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_LinkStatus:
		s := proto.Size(x.LinkStatus)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Traffic:
		s := proto.Size(x.Traffic)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_MacState:
		s := proto.Size(x.MacState)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ArpState:
		s := proto.Size(x.ArpState)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_LagState:
		s := proto.Size(x.LagState)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_MlagState:
		s := proto.Size(x.MlagState)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ExtensibleEvent:
		s := proto.Size(x.ExtensibleEvent)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_RouteState:
		s := proto.Size(x.RouteState)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HostnameAlert struct {
	ExpectedHostname *string `protobuf:"bytes,1,req,name=expected_hostname,json=expectedHostname" json:"expected_hostname,omitempty"`
	ActualHostname   *string `protobuf:"bytes,2,req,name=actual_hostname,json=actualHostname" json:"actual_hostname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HostnameAlert) Reset()                    { *m = HostnameAlert{} }
func (m *HostnameAlert) String() string            { return proto.CompactTextString(m) }
func (*HostnameAlert) ProtoMessage()               {}
func (*HostnameAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *HostnameAlert) GetExpectedHostname() string {
	if m != nil && m.ExpectedHostname != nil {
		return *m.ExpectedHostname
	}
	return ""
}

func (m *HostnameAlert) GetActualHostname() string {
	if m != nil && m.ActualHostname != nil {
		return *m.ActualHostname
	}
	return ""
}

type ConfigDeviationAlert struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ConfigDeviationAlert) Reset()                    { *m = ConfigDeviationAlert{} }
func (m *ConfigDeviationAlert) String() string            { return proto.CompactTextString(m) }
func (*ConfigDeviationAlert) ProtoMessage()               {}
func (*ConfigDeviationAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type LivenessAlert struct {
	ExpectedAgents   []string `protobuf:"bytes,1,rep,name=expected_agents,json=expectedAgents" json:"expected_agents,omitempty"`
	ActualAgents     []string `protobuf:"bytes,2,rep,name=actual_agents,json=actualAgents" json:"actual_agents,omitempty"`
	Alive            *bool    `protobuf:"varint,3,req,name=alive" json:"alive,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LivenessAlert) Reset()                    { *m = LivenessAlert{} }
func (m *LivenessAlert) String() string            { return proto.CompactTextString(m) }
func (*LivenessAlert) ProtoMessage()               {}
func (*LivenessAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LivenessAlert) GetExpectedAgents() []string {
	if m != nil {
		return m.ExpectedAgents
	}
	return nil
}

func (m *LivenessAlert) GetActualAgents() []string {
	if m != nil {
		return m.ActualAgents
	}
	return nil
}

func (m *LivenessAlert) GetAlive() bool {
	if m != nil && m.Alive != nil {
		return *m.Alive
	}
	return false
}

type ExtensibleAlert struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Expected         *string `protobuf:"bytes,2,req,name=expected" json:"expected,omitempty"`
	Actual           *string `protobuf:"bytes,3,req,name=actual" json:"actual,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExtensibleAlert) Reset()                    { *m = ExtensibleAlert{} }
func (m *ExtensibleAlert) String() string            { return proto.CompactTextString(m) }
func (*ExtensibleAlert) ProtoMessage()               {}
func (*ExtensibleAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ExtensibleAlert) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ExtensibleAlert) GetExpected() string {
	if m != nil && m.Expected != nil {
		return *m.Expected
	}
	return ""
}

func (m *ExtensibleAlert) GetActual() string {
	if m != nil && m.Actual != nil {
		return *m.Actual
	}
	return ""
}

type DeploymentAlert struct {
	ExpectedDeploymentStatus *DeploymentStatus `protobuf:"varint,1,req,name=expected_deployment_status,json=expectedDeploymentStatus,enum=aos.streaming.DeploymentStatus" json:"expected_deployment_status,omitempty"`
	ActualDeploymentStatus   *DeploymentStatus `protobuf:"varint,2,req,name=actual_deployment_status,json=actualDeploymentStatus,enum=aos.streaming.DeploymentStatus" json:"actual_deployment_status,omitempty"`
	XXX_unrecognized         []byte            `json:"-"`
}

func (m *DeploymentAlert) Reset()                    { *m = DeploymentAlert{} }
func (m *DeploymentAlert) String() string            { return proto.CompactTextString(m) }
func (*DeploymentAlert) ProtoMessage()               {}
func (*DeploymentAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeploymentAlert) GetExpectedDeploymentStatus() DeploymentStatus {
	if m != nil && m.ExpectedDeploymentStatus != nil {
		return *m.ExpectedDeploymentStatus
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS
}

func (m *DeploymentAlert) GetActualDeploymentStatus() DeploymentStatus {
	if m != nil && m.ActualDeploymentStatus != nil {
		return *m.ActualDeploymentStatus
	}
	return DeploymentStatus_DEPLOYMENT_STATUS_INPROGRESS
}

type BlueprintRenderingAlert struct {
	FailedSystems    []string `protobuf:"bytes,1,rep,name=failed_systems,json=failedSystems" json:"failed_systems,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BlueprintRenderingAlert) Reset()                    { *m = BlueprintRenderingAlert{} }
func (m *BlueprintRenderingAlert) String() string            { return proto.CompactTextString(m) }
func (*BlueprintRenderingAlert) ProtoMessage()               {}
func (*BlueprintRenderingAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BlueprintRenderingAlert) GetFailedSystems() []string {
	if m != nil {
		return m.FailedSystems
	}
	return nil
}

type RouteAlert struct {
	Ip                 *string           `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	ExpectedDestStatus *RouteEntryStatus `protobuf:"varint,2,req,name=expected_dest_status,json=expectedDestStatus,enum=aos.streaming.RouteEntryStatus" json:"expected_dest_status,omitempty"`
	ActualDestStatus   *RouteEntryStatus `protobuf:"varint,3,req,name=actual_dest_status,json=actualDestStatus,enum=aos.streaming.RouteEntryStatus" json:"actual_dest_status,omitempty"`
	XXX_unrecognized   []byte            `json:"-"`
}

func (m *RouteAlert) Reset()                    { *m = RouteAlert{} }
func (m *RouteAlert) String() string            { return proto.CompactTextString(m) }
func (*RouteAlert) ProtoMessage()               {}
func (*RouteAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RouteAlert) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *RouteAlert) GetExpectedDestStatus() RouteEntryStatus {
	if m != nil && m.ExpectedDestStatus != nil {
		return *m.ExpectedDestStatus
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

func (m *RouteAlert) GetActualDestStatus() RouteEntryStatus {
	if m != nil && m.ActualDestStatus != nil {
		return *m.ActualDestStatus
	}
	return RouteEntryStatus_ROUTE_ENTRY_STATUS_UNKNOWN
}

type LagAlert struct {
	Hostname             *string  `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Lagname              *string  `protobuf:"bytes,2,req,name=lagname" json:"lagname,omitempty"`
	ExpectedIfupCount    *uint32  `protobuf:"varint,5,req,name=expected_ifup_count,json=expectedIfupCount" json:"expected_ifup_count,omitempty"`
	ActualIfupCount      *uint32  `protobuf:"varint,6,req,name=actual_ifup_count,json=actualIfupCount" json:"actual_ifup_count,omitempty"`
	ExpectedInterfacesUp []string `protobuf:"bytes,7,rep,name=expected_interfaces_up,json=expectedInterfacesUp" json:"expected_interfaces_up,omitempty"`
	ActualInterfacesUp   []string `protobuf:"bytes,8,rep,name=actual_interfaces_up,json=actualInterfacesUp" json:"actual_interfaces_up,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *LagAlert) Reset()                    { *m = LagAlert{} }
func (m *LagAlert) String() string            { return proto.CompactTextString(m) }
func (*LagAlert) ProtoMessage()               {}
func (*LagAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *LagAlert) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *LagAlert) GetLagname() string {
	if m != nil && m.Lagname != nil {
		return *m.Lagname
	}
	return ""
}

func (m *LagAlert) GetExpectedIfupCount() uint32 {
	if m != nil && m.ExpectedIfupCount != nil {
		return *m.ExpectedIfupCount
	}
	return 0
}

func (m *LagAlert) GetActualIfupCount() uint32 {
	if m != nil && m.ActualIfupCount != nil {
		return *m.ActualIfupCount
	}
	return 0
}

func (m *LagAlert) GetExpectedInterfacesUp() []string {
	if m != nil {
		return m.ExpectedInterfacesUp
	}
	return nil
}

func (m *LagAlert) GetActualInterfacesUp() []string {
	if m != nil {
		return m.ActualInterfacesUp
	}
	return nil
}

type StreamingAlert struct {
	AosServer        *string                  `protobuf:"bytes,1,req,name=aos_server,json=aosServer" json:"aos_server,omitempty"`
	StreamingType    *StreamingType           `protobuf:"varint,2,req,name=streaming_type,json=streamingType,enum=aos.streaming.StreamingType" json:"streaming_type,omitempty"`
	Protocol         *StreamingProtocol       `protobuf:"varint,3,req,name=protocol,enum=aos.streaming.StreamingProtocol" json:"protocol,omitempty"`
	Reason           *StreamingAlertReason    `protobuf:"varint,4,req,name=reason,enum=aos.streaming.StreamingAlertReason" json:"reason,omitempty"`
	SequencingMode   *StreamingSequencingMode `protobuf:"varint,5,opt,name=sequencing_mode,json=sequencingMode,enum=aos.streaming.StreamingSequencingMode" json:"sequencing_mode,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *StreamingAlert) Reset()                    { *m = StreamingAlert{} }
func (m *StreamingAlert) String() string            { return proto.CompactTextString(m) }
func (*StreamingAlert) ProtoMessage()               {}
func (*StreamingAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *StreamingAlert) GetAosServer() string {
	if m != nil && m.AosServer != nil {
		return *m.AosServer
	}
	return ""
}

func (m *StreamingAlert) GetStreamingType() StreamingType {
	if m != nil && m.StreamingType != nil {
		return *m.StreamingType
	}
	return StreamingType_STREAMING_TYPE_PERFMON
}

func (m *StreamingAlert) GetProtocol() StreamingProtocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return StreamingProtocol_STREAMING_PROTOCOL_PROTOBUF_OVER_TCP
}

func (m *StreamingAlert) GetReason() StreamingAlertReason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return StreamingAlertReason_STREAMING_ALERT_REASON_FAILED_CONNECTION
}

func (m *StreamingAlert) GetSequencingMode() StreamingSequencingMode {
	if m != nil && m.SequencingMode != nil {
		return *m.SequencingMode
	}
	return StreamingSequencingMode_STREAMING_UNSEQUENCED
}

type CablePeerMismatchAlert struct {
	LclHostname      *string `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIfname        *string `protobuf:"bytes,2,req,name=lcl_ifname,json=lclIfname" json:"lcl_ifname,omitempty"`
	ExpHostname      *string `protobuf:"bytes,4,req,name=exp_hostname,json=expHostname" json:"exp_hostname,omitempty"`
	ExpIfname        *string `protobuf:"bytes,5,req,name=exp_ifname,json=expIfname" json:"exp_ifname,omitempty"`
	RmtHostname      *string `protobuf:"bytes,6,req,name=rmt_hostname,json=rmtHostname" json:"rmt_hostname,omitempty"`
	RmtIfname        *string `protobuf:"bytes,7,req,name=rmt_ifname,json=rmtIfname" json:"rmt_ifname,omitempty"`
	RmtSysdescr      *string `protobuf:"bytes,8,req,name=rmt_sysdescr,json=rmtSysdescr" json:"rmt_sysdescr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CablePeerMismatchAlert) Reset()                    { *m = CablePeerMismatchAlert{} }
func (m *CablePeerMismatchAlert) String() string            { return proto.CompactTextString(m) }
func (*CablePeerMismatchAlert) ProtoMessage()               {}
func (*CablePeerMismatchAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CablePeerMismatchAlert) GetLclHostname() string {
	if m != nil && m.LclHostname != nil {
		return *m.LclHostname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetLclIfname() string {
	if m != nil && m.LclIfname != nil {
		return *m.LclIfname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetExpHostname() string {
	if m != nil && m.ExpHostname != nil {
		return *m.ExpHostname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetExpIfname() string {
	if m != nil && m.ExpIfname != nil {
		return *m.ExpIfname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetRmtHostname() string {
	if m != nil && m.RmtHostname != nil {
		return *m.RmtHostname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetRmtIfname() string {
	if m != nil && m.RmtIfname != nil {
		return *m.RmtIfname
	}
	return ""
}

func (m *CablePeerMismatchAlert) GetRmtSysdescr() string {
	if m != nil && m.RmtSysdescr != nil {
		return *m.RmtSysdescr
	}
	return ""
}

type BGPNeighborMismatchAlert struct {
	LclHostname      *string                  `protobuf:"bytes,1,req,name=lcl_hostname,json=lclHostname" json:"lcl_hostname,omitempty"`
	LclIpaddr        *string                  `protobuf:"bytes,2,req,name=lcl_ipaddr,json=lclIpaddr" json:"lcl_ipaddr,omitempty"`
	LclAsn           *uint32                  `protobuf:"varint,3,req,name=lcl_asn,json=lclAsn" json:"lcl_asn,omitempty"`
	RmtIpaddr        *string                  `protobuf:"bytes,4,req,name=rmt_ipaddr,json=rmtIpaddr" json:"rmt_ipaddr,omitempty"`
	RmtAsn           *uint32                  `protobuf:"varint,5,req,name=rmt_asn,json=rmtAsn" json:"rmt_asn,omitempty"`
	ExpectedState    *BgpSessionState         `protobuf:"varint,6,req,name=expected_state,json=expectedState,enum=aos.streaming.BgpSessionState" json:"expected_state,omitempty"`
	ActualState      *BgpSessionState         `protobuf:"varint,7,req,name=actual_state,json=actualState,enum=aos.streaming.BgpSessionState" json:"actual_state,omitempty"`
	RmtName          *string                  `protobuf:"bytes,8,req,name=rmt_name,json=rmtName" json:"rmt_name,omitempty"`
	VrfName          *string                  `protobuf:"bytes,9,req,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AddrFamily       *BgpSessionAddressFamily `protobuf:"varint,10,req,name=addr_family,json=addrFamily,enum=aos.streaming.BgpSessionAddressFamily" json:"addr_family,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *BGPNeighborMismatchAlert) Reset()                    { *m = BGPNeighborMismatchAlert{} }
func (m *BGPNeighborMismatchAlert) String() string            { return proto.CompactTextString(m) }
func (*BGPNeighborMismatchAlert) ProtoMessage()               {}
func (*BGPNeighborMismatchAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BGPNeighborMismatchAlert) GetLclHostname() string {
	if m != nil && m.LclHostname != nil {
		return *m.LclHostname
	}
	return ""
}

func (m *BGPNeighborMismatchAlert) GetLclIpaddr() string {
	if m != nil && m.LclIpaddr != nil {
		return *m.LclIpaddr
	}
	return ""
}

func (m *BGPNeighborMismatchAlert) GetLclAsn() uint32 {
	if m != nil && m.LclAsn != nil {
		return *m.LclAsn
	}
	return 0
}

func (m *BGPNeighborMismatchAlert) GetRmtIpaddr() string {
	if m != nil && m.RmtIpaddr != nil {
		return *m.RmtIpaddr
	}
	return ""
}

func (m *BGPNeighborMismatchAlert) GetRmtAsn() uint32 {
	if m != nil && m.RmtAsn != nil {
		return *m.RmtAsn
	}
	return 0
}

func (m *BGPNeighborMismatchAlert) GetExpectedState() BgpSessionState {
	if m != nil && m.ExpectedState != nil {
		return *m.ExpectedState
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (m *BGPNeighborMismatchAlert) GetActualState() BgpSessionState {
	if m != nil && m.ActualState != nil {
		return *m.ActualState
	}
	return BgpSessionState_BGP_SESSION_UP
}

func (m *BGPNeighborMismatchAlert) GetRmtName() string {
	if m != nil && m.RmtName != nil {
		return *m.RmtName
	}
	return ""
}

func (m *BGPNeighborMismatchAlert) GetVrfName() string {
	if m != nil && m.VrfName != nil {
		return *m.VrfName
	}
	return ""
}

func (m *BGPNeighborMismatchAlert) GetAddrFamily() BgpSessionAddressFamily {
	if m != nil && m.AddrFamily != nil {
		return *m.AddrFamily
	}
	return BgpSessionAddressFamily_IPV4
}

type InterfaceLinkStatusMismatchAlert struct {
	Hostname         *string     `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Ifname           *string     `protobuf:"bytes,2,req,name=ifname" json:"ifname,omitempty"`
	ExpectedIfstatus *LinkStatus `protobuf:"varint,3,req,name=expected_ifstatus,json=expectedIfstatus,enum=aos.streaming.LinkStatus" json:"expected_ifstatus,omitempty"`
	ActualIfstatus   *LinkStatus `protobuf:"varint,4,req,name=actual_ifstatus,json=actualIfstatus,enum=aos.streaming.LinkStatus" json:"actual_ifstatus,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *InterfaceLinkStatusMismatchAlert) Reset()         { *m = InterfaceLinkStatusMismatchAlert{} }
func (m *InterfaceLinkStatusMismatchAlert) String() string { return proto.CompactTextString(m) }
func (*InterfaceLinkStatusMismatchAlert) ProtoMessage()    {}
func (*InterfaceLinkStatusMismatchAlert) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *InterfaceLinkStatusMismatchAlert) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *InterfaceLinkStatusMismatchAlert) GetIfname() string {
	if m != nil && m.Ifname != nil {
		return *m.Ifname
	}
	return ""
}

func (m *InterfaceLinkStatusMismatchAlert) GetExpectedIfstatus() LinkStatus {
	if m != nil && m.ExpectedIfstatus != nil {
		return *m.ExpectedIfstatus
	}
	return LinkStatus_LINK_UP
}

func (m *InterfaceLinkStatusMismatchAlert) GetActualIfstatus() LinkStatus {
	if m != nil && m.ActualIfstatus != nil {
		return *m.ActualIfstatus
	}
	return LinkStatus_LINK_UP
}

type CountersAlert struct {
	// Types that are valid to be assigned to Id:
	//	*CountersAlert_NodeRole
	//	*CountersAlert_PortRole
	//	*CountersAlert_Port
	//	*CountersAlert_Node
	//	*CountersAlert_Pod
	Id               isCountersAlert_Id `protobuf_oneof:"id"`
	MeasurementName  *string            `protobuf:"bytes,6,req,name=measurement_name,json=measurementName" json:"measurement_name,omitempty"`
	IntervalSeconds  *uint32            `protobuf:"varint,7,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	AggregationType  *AggregationType   `protobuf:"varint,8,req,name=aggregation_type,json=aggregationType,enum=aos.streaming.AggregationType" json:"aggregation_type,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CountersAlert) Reset()                    { *m = CountersAlert{} }
func (m *CountersAlert) String() string            { return proto.CompactTextString(m) }
func (*CountersAlert) ProtoMessage()               {}
func (*CountersAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type isCountersAlert_Id interface{ isCountersAlert_Id() }

type CountersAlert_NodeRole struct {
	NodeRole Feature `protobuf:"varint,1,opt,name=node_role,json=nodeRole,enum=aos.streaming.Feature,oneof"`
}
type CountersAlert_PortRole struct {
	PortRole Feature `protobuf:"varint,2,opt,name=port_role,json=portRole,enum=aos.streaming.Feature,oneof"`
}
type CountersAlert_Port struct {
	Port string `protobuf:"bytes,3,opt,name=port,oneof"`
}
type CountersAlert_Node struct {
	Node string `protobuf:"bytes,4,opt,name=node,oneof"`
}
type CountersAlert_Pod struct {
	Pod bool `protobuf:"varint,5,opt,name=pod,oneof"`
}

func (*CountersAlert_NodeRole) isCountersAlert_Id() {}
func (*CountersAlert_PortRole) isCountersAlert_Id() {}
func (*CountersAlert_Port) isCountersAlert_Id()     {}
func (*CountersAlert_Node) isCountersAlert_Id()     {}
func (*CountersAlert_Pod) isCountersAlert_Id()      {}

func (m *CountersAlert) GetId() isCountersAlert_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CountersAlert) GetNodeRole() Feature {
	if x, ok := m.GetId().(*CountersAlert_NodeRole); ok {
		return x.NodeRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (m *CountersAlert) GetPortRole() Feature {
	if x, ok := m.GetId().(*CountersAlert_PortRole); ok {
		return x.PortRole
	}
	return Feature_FEATURE_UNKNOWN
}

func (m *CountersAlert) GetPort() string {
	if x, ok := m.GetId().(*CountersAlert_Port); ok {
		return x.Port
	}
	return ""
}

func (m *CountersAlert) GetNode() string {
	if x, ok := m.GetId().(*CountersAlert_Node); ok {
		return x.Node
	}
	return ""
}

func (m *CountersAlert) GetPod() bool {
	if x, ok := m.GetId().(*CountersAlert_Pod); ok {
		return x.Pod
	}
	return false
}

func (m *CountersAlert) GetMeasurementName() string {
	if m != nil && m.MeasurementName != nil {
		return *m.MeasurementName
	}
	return ""
}

func (m *CountersAlert) GetIntervalSeconds() uint32 {
	if m != nil && m.IntervalSeconds != nil {
		return *m.IntervalSeconds
	}
	return 0
}

func (m *CountersAlert) GetAggregationType() AggregationType {
	if m != nil && m.AggregationType != nil {
		return *m.AggregationType
	}
	return AggregationType_AGGREGATION_TYPE_MAX
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CountersAlert) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CountersAlert_OneofMarshaler, _CountersAlert_OneofUnmarshaler, _CountersAlert_OneofSizer, []interface{}{
		(*CountersAlert_NodeRole)(nil),
		(*CountersAlert_PortRole)(nil),
		(*CountersAlert_Port)(nil),
		(*CountersAlert_Node)(nil),
		(*CountersAlert_Pod)(nil),
	}
}

func _CountersAlert_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CountersAlert)
	// id
	switch x := m.Id.(type) {
	case *CountersAlert_NodeRole:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.NodeRole))
	case *CountersAlert_PortRole:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.PortRole))
	case *CountersAlert_Port:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Port)
	case *CountersAlert_Node:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Node)
	case *CountersAlert_Pod:
		t := uint64(0)
		if x.Pod {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("CountersAlert.Id has unexpected type %T", x)
	}
	return nil
}

func _CountersAlert_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CountersAlert)
	switch tag {
	case 1: // id.node_role
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Id = &CountersAlert_NodeRole{Feature(x)}
		return true, err
	case 2: // id.port_role
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Id = &CountersAlert_PortRole{Feature(x)}
		return true, err
	case 3: // id.port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Id = &CountersAlert_Port{x}
		return true, err
	case 4: // id.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Id = &CountersAlert_Node{x}
		return true, err
	case 5: // id.pod
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Id = &CountersAlert_Pod{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _CountersAlert_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CountersAlert)
	// id
	switch x := m.Id.(type) {
	case *CountersAlert_NodeRole:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NodeRole))
	case *CountersAlert_PortRole:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PortRole))
	case *CountersAlert_Port:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Port)))
		n += len(x.Port)
	case *CountersAlert_Node:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Node)))
		n += len(x.Node)
	case *CountersAlert_Pod:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KeyValuePair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *KeyValuePair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ProbeAlert struct {
	ExpectedInt           *int64          `protobuf:"varint,2,opt,name=expected_int,json=expectedInt" json:"expected_int,omitempty"`
	ActualInt             *int64          `protobuf:"varint,3,opt,name=actual_int,json=actualInt" json:"actual_int,omitempty"`
	ExpectedFloat         *float64        `protobuf:"fixed64,4,opt,name=expected_float,json=expectedFloat" json:"expected_float,omitempty"`
	ActualFloat           *float64        `protobuf:"fixed64,5,opt,name=actual_float,json=actualFloat" json:"actual_float,omitempty"`
	ExpectedDiscreteState *string         `protobuf:"bytes,6,opt,name=expected_discrete_state,json=expectedDiscreteState" json:"expected_discrete_state,omitempty"`
	ActualDiscreteState   *string         `protobuf:"bytes,7,opt,name=actual_discrete_state,json=actualDiscreteState" json:"actual_discrete_state,omitempty"`
	ProbeId               *string         `protobuf:"bytes,8,req,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	StageName             *string         `protobuf:"bytes,9,req,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	KeyValuePairs         []*KeyValuePair `protobuf:"bytes,10,rep,name=key_value_pairs,json=keyValuePairs" json:"key_value_pairs,omitempty"`
	ItemId                *string         `protobuf:"bytes,11,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	ExpectedText          *string         `protobuf:"bytes,12,opt,name=expected_text,json=expectedText" json:"expected_text,omitempty"`
	ActualText            *string         `protobuf:"bytes,13,opt,name=actual_text,json=actualText" json:"actual_text,omitempty"`
	ProbeLabel            *string         `protobuf:"bytes,14,opt,name=probe_label,json=probeLabel" json:"probe_label,omitempty"`
	ExpectedIntMax        *int64          `protobuf:"varint,15,opt,name=expected_int_max,json=expectedIntMax" json:"expected_int_max,omitempty"`
	ExpectedFloatMax      *float64        `protobuf:"fixed64,16,opt,name=expected_float_max,json=expectedFloatMax" json:"expected_float_max,omitempty"`
	XXX_unrecognized      []byte          `json:"-"`
}

func (m *ProbeAlert) Reset()                    { *m = ProbeAlert{} }
func (m *ProbeAlert) String() string            { return proto.CompactTextString(m) }
func (*ProbeAlert) ProtoMessage()               {}
func (*ProbeAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ProbeAlert) GetExpectedInt() int64 {
	if m != nil && m.ExpectedInt != nil {
		return *m.ExpectedInt
	}
	return 0
}

func (m *ProbeAlert) GetActualInt() int64 {
	if m != nil && m.ActualInt != nil {
		return *m.ActualInt
	}
	return 0
}

func (m *ProbeAlert) GetExpectedFloat() float64 {
	if m != nil && m.ExpectedFloat != nil {
		return *m.ExpectedFloat
	}
	return 0
}

func (m *ProbeAlert) GetActualFloat() float64 {
	if m != nil && m.ActualFloat != nil {
		return *m.ActualFloat
	}
	return 0
}

func (m *ProbeAlert) GetExpectedDiscreteState() string {
	if m != nil && m.ExpectedDiscreteState != nil {
		return *m.ExpectedDiscreteState
	}
	return ""
}

func (m *ProbeAlert) GetActualDiscreteState() string {
	if m != nil && m.ActualDiscreteState != nil {
		return *m.ActualDiscreteState
	}
	return ""
}

func (m *ProbeAlert) GetProbeId() string {
	if m != nil && m.ProbeId != nil {
		return *m.ProbeId
	}
	return ""
}

func (m *ProbeAlert) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *ProbeAlert) GetKeyValuePairs() []*KeyValuePair {
	if m != nil {
		return m.KeyValuePairs
	}
	return nil
}

func (m *ProbeAlert) GetItemId() string {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return ""
}

func (m *ProbeAlert) GetExpectedText() string {
	if m != nil && m.ExpectedText != nil {
		return *m.ExpectedText
	}
	return ""
}

func (m *ProbeAlert) GetActualText() string {
	if m != nil && m.ActualText != nil {
		return *m.ActualText
	}
	return ""
}

func (m *ProbeAlert) GetProbeLabel() string {
	if m != nil && m.ProbeLabel != nil {
		return *m.ProbeLabel
	}
	return ""
}

func (m *ProbeAlert) GetExpectedIntMax() int64 {
	if m != nil && m.ExpectedIntMax != nil {
		return *m.ExpectedIntMax
	}
	return 0
}

func (m *ProbeAlert) GetExpectedFloatMax() float64 {
	if m != nil && m.ExpectedFloatMax != nil {
		return *m.ExpectedFloatMax
	}
	return 0
}

type ConfigMismatchAlert struct {
	BlueprintId      *string `protobuf:"bytes,1,req,name=blueprint_id,json=blueprintId" json:"blueprint_id,omitempty"`
	CollectorId      *string `protobuf:"bytes,2,req,name=collector_id,json=collectorId" json:"collector_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfigMismatchAlert) Reset()                    { *m = ConfigMismatchAlert{} }
func (m *ConfigMismatchAlert) String() string            { return proto.CompactTextString(m) }
func (*ConfigMismatchAlert) ProtoMessage()               {}
func (*ConfigMismatchAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ConfigMismatchAlert) GetBlueprintId() string {
	if m != nil && m.BlueprintId != nil {
		return *m.BlueprintId
	}
	return ""
}

func (m *ConfigMismatchAlert) GetCollectorId() string {
	if m != nil && m.CollectorId != nil {
		return *m.CollectorId
	}
	return ""
}

type HeadroomAlert struct {
	NodeA            *string       `protobuf:"bytes,1,req,name=node_a,json=nodeA" json:"node_a,omitempty"`
	NodeB            *string       `protobuf:"bytes,2,req,name=node_b,json=nodeB" json:"node_b,omitempty"`
	IntervalSeconds  *uint32       `protobuf:"varint,3,req,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
	HeadroomType     *HeadroomType `protobuf:"varint,4,req,name=headroom_type,json=headroomType,enum=aos.streaming.HeadroomType" json:"headroom_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *HeadroomAlert) Reset()                    { *m = HeadroomAlert{} }
func (m *HeadroomAlert) String() string            { return proto.CompactTextString(m) }
func (*HeadroomAlert) ProtoMessage()               {}
func (*HeadroomAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *HeadroomAlert) GetNodeA() string {
	if m != nil && m.NodeA != nil {
		return *m.NodeA
	}
	return ""
}

func (m *HeadroomAlert) GetNodeB() string {
	if m != nil && m.NodeB != nil {
		return *m.NodeB
	}
	return ""
}

func (m *HeadroomAlert) GetIntervalSeconds() uint32 {
	if m != nil && m.IntervalSeconds != nil {
		return *m.IntervalSeconds
	}
	return 0
}

func (m *HeadroomAlert) GetHeadroomType() HeadroomType {
	if m != nil && m.HeadroomType != nil {
		return *m.HeadroomType
	}
	return HeadroomType_HEADROOM_TYPE_MAX
}

type MacAlert struct {
	Macaddress          *string  `protobuf:"bytes,1,req,name=macaddress" json:"macaddress,omitempty"`
	Intfname            *string  `protobuf:"bytes,2,req,name=intfname" json:"intfname,omitempty"`
	Vlan                *uint32  `protobuf:"varint,3,req,name=vlan" json:"vlan,omitempty"`
	Movecount           *uint32  `protobuf:"varint,4,req,name=movecount" json:"movecount,omitempty"`
	ActualMoveInterval  *float64 `protobuf:"fixed64,5,req,name=actual_move_interval,json=actualMoveInterval" json:"actual_move_interval,omitempty"`
	ExpectedMaxInterval *float64 `protobuf:"fixed64,6,req,name=expected_max_interval,json=expectedMaxInterval" json:"expected_max_interval,omitempty"`
	XXX_unrecognized    []byte   `json:"-"`
}

func (m *MacAlert) Reset()                    { *m = MacAlert{} }
func (m *MacAlert) String() string            { return proto.CompactTextString(m) }
func (*MacAlert) ProtoMessage()               {}
func (*MacAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *MacAlert) GetMacaddress() string {
	if m != nil && m.Macaddress != nil {
		return *m.Macaddress
	}
	return ""
}

func (m *MacAlert) GetIntfname() string {
	if m != nil && m.Intfname != nil {
		return *m.Intfname
	}
	return ""
}

func (m *MacAlert) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return 0
}

func (m *MacAlert) GetMovecount() uint32 {
	if m != nil && m.Movecount != nil {
		return *m.Movecount
	}
	return 0
}

func (m *MacAlert) GetActualMoveInterval() float64 {
	if m != nil && m.ActualMoveInterval != nil {
		return *m.ActualMoveInterval
	}
	return 0
}

func (m *MacAlert) GetExpectedMaxInterval() float64 {
	if m != nil && m.ExpectedMaxInterval != nil {
		return *m.ExpectedMaxInterval
	}
	return 0
}

type ArpAlert struct {
	Ipaddress        *string `protobuf:"bytes,1,req,name=ipaddress" json:"ipaddress,omitempty"`
	Mac              *string `protobuf:"bytes,2,req,name=mac" json:"mac,omitempty"`
	Intfname         *string `protobuf:"bytes,3,req,name=intfname" json:"intfname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ArpAlert) Reset()                    { *m = ArpAlert{} }
func (m *ArpAlert) String() string            { return proto.CompactTextString(m) }
func (*ArpAlert) ProtoMessage()               {}
func (*ArpAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ArpAlert) GetIpaddress() string {
	if m != nil && m.Ipaddress != nil {
		return *m.Ipaddress
	}
	return ""
}

func (m *ArpAlert) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *ArpAlert) GetIntfname() string {
	if m != nil && m.Intfname != nil {
		return *m.Intfname
	}
	return ""
}

type MlagAlert struct {
	Hostname               *string          `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	DomainId               *string          `protobuf:"bytes,2,req,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	MlagId                 *uint32          `protobuf:"varint,3,req,name=mlag_id,json=mlagId" json:"mlag_id,omitempty"`
	ExpectedDomainState    *MlagDomainState `protobuf:"varint,4,req,name=expected_domain_state,json=expectedDomainState,enum=aos.streaming.MlagDomainState" json:"expected_domain_state,omitempty"`
	ActualDomainState      *MlagDomainState `protobuf:"varint,5,req,name=actual_domain_state,json=actualDomainState,enum=aos.streaming.MlagDomainState" json:"actual_domain_state,omitempty"`
	Ifname                 *string          `protobuf:"bytes,6,req,name=ifname" json:"ifname,omitempty"`
	ExpectedIntfState      *MlagIntfState   `protobuf:"varint,7,req,name=expected_intf_state,json=expectedIntfState,enum=aos.streaming.MlagIntfState" json:"expected_intf_state,omitempty"`
	ActualIntfState        *MlagIntfState   `protobuf:"varint,8,req,name=actual_intf_state,json=actualIntfState,enum=aos.streaming.MlagIntfState" json:"actual_intf_state,omitempty"`
	PeerLink               *string          `protobuf:"bytes,9,req,name=peer_link,json=peerLink" json:"peer_link,omitempty"`
	PeerLinkStatus         *string          `protobuf:"bytes,10,req,name=peer_link_status,json=peerLinkStatus" json:"peer_link_status,omitempty"`
	ExpectedPeerLinkStatus *string          `protobuf:"bytes,11,req,name=expected_peer_link_status,json=expectedPeerLinkStatus" json:"expected_peer_link_status,omitempty"`
	XXX_unrecognized       []byte           `json:"-"`
}

func (m *MlagAlert) Reset()                    { *m = MlagAlert{} }
func (m *MlagAlert) String() string            { return proto.CompactTextString(m) }
func (*MlagAlert) ProtoMessage()               {}
func (*MlagAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *MlagAlert) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *MlagAlert) GetDomainId() string {
	if m != nil && m.DomainId != nil {
		return *m.DomainId
	}
	return ""
}

func (m *MlagAlert) GetMlagId() uint32 {
	if m != nil && m.MlagId != nil {
		return *m.MlagId
	}
	return 0
}

func (m *MlagAlert) GetExpectedDomainState() MlagDomainState {
	if m != nil && m.ExpectedDomainState != nil {
		return *m.ExpectedDomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (m *MlagAlert) GetActualDomainState() MlagDomainState {
	if m != nil && m.ActualDomainState != nil {
		return *m.ActualDomainState
	}
	return MlagDomainState_MLAG_UNKNOWN
}

func (m *MlagAlert) GetIfname() string {
	if m != nil && m.Ifname != nil {
		return *m.Ifname
	}
	return ""
}

func (m *MlagAlert) GetExpectedIntfState() MlagIntfState {
	if m != nil && m.ExpectedIntfState != nil {
		return *m.ExpectedIntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

func (m *MlagAlert) GetActualIntfState() MlagIntfState {
	if m != nil && m.ActualIntfState != nil {
		return *m.ActualIntfState
	}
	return MlagIntfState_MLAG_INTF_UNKNOWN
}

func (m *MlagAlert) GetPeerLink() string {
	if m != nil && m.PeerLink != nil {
		return *m.PeerLink
	}
	return ""
}

func (m *MlagAlert) GetPeerLinkStatus() string {
	if m != nil && m.PeerLinkStatus != nil {
		return *m.PeerLinkStatus
	}
	return ""
}

func (m *MlagAlert) GetExpectedPeerLinkStatus() string {
	if m != nil && m.ExpectedPeerLinkStatus != nil {
		return *m.ExpectedPeerLinkStatus
	}
	return ""
}

type TestAlert struct {
	TestInt          *uint64 `protobuf:"varint,1,req,name=test_int,json=testInt" json:"test_int,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestAlert) Reset()                    { *m = TestAlert{} }
func (m *TestAlert) String() string            { return proto.CompactTextString(m) }
func (*TestAlert) ProtoMessage()               {}
func (*TestAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TestAlert) GetTestInt() uint64 {
	if m != nil && m.TestInt != nil {
		return *m.TestInt
	}
	return 0
}

type InterfaceCounters struct {
	TxUnicastPackets   *uint64 `protobuf:"varint,1,req,name=tx_unicast_packets,json=txUnicastPackets" json:"tx_unicast_packets,omitempty"`
	TxBroadcastPackets *uint64 `protobuf:"varint,2,req,name=tx_broadcast_packets,json=txBroadcastPackets" json:"tx_broadcast_packets,omitempty"`
	TxMulticastPackets *uint64 `protobuf:"varint,3,req,name=tx_multicast_packets,json=txMulticastPackets" json:"tx_multicast_packets,omitempty"`
	TxBytes            *uint64 `protobuf:"varint,4,req,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
	RxUnicastPackets   *uint64 `protobuf:"varint,5,req,name=rx_unicast_packets,json=rxUnicastPackets" json:"rx_unicast_packets,omitempty"`
	RxBroadcastPackets *uint64 `protobuf:"varint,6,req,name=rx_broadcast_packets,json=rxBroadcastPackets" json:"rx_broadcast_packets,omitempty"`
	RxMulticastPackets *uint64 `protobuf:"varint,7,req,name=rx_multicast_packets,json=rxMulticastPackets" json:"rx_multicast_packets,omitempty"`
	RxBytes            *uint64 `protobuf:"varint,8,req,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	TxErrorPackets     *uint64 `protobuf:"varint,9,req,name=tx_error_packets,json=txErrorPackets" json:"tx_error_packets,omitempty"`
	TxDiscardPackets   *uint64 `protobuf:"varint,10,req,name=tx_discard_packets,json=txDiscardPackets" json:"tx_discard_packets,omitempty"`
	RxErrorPackets     *uint64 `protobuf:"varint,11,req,name=rx_error_packets,json=rxErrorPackets" json:"rx_error_packets,omitempty"`
	RxDiscardPackets   *uint64 `protobuf:"varint,12,req,name=rx_discard_packets,json=rxDiscardPackets" json:"rx_discard_packets,omitempty"`
	AlignmentErrors    *uint64 `protobuf:"varint,13,req,name=alignment_errors,json=alignmentErrors" json:"alignment_errors,omitempty"`
	FcsErrors          *uint64 `protobuf:"varint,14,req,name=fcs_errors,json=fcsErrors" json:"fcs_errors,omitempty"`
	SymbolErrors       *uint64 `protobuf:"varint,15,req,name=symbol_errors,json=symbolErrors" json:"symbol_errors,omitempty"`
	Runts              *uint64 `protobuf:"varint,16,req,name=runts" json:"runts,omitempty"`
	Giants             *uint64 `protobuf:"varint,17,req,name=giants" json:"giants,omitempty"`
	DeltaSeconds       *uint64 `protobuf:"varint,18,opt,name=delta_seconds,json=deltaSeconds,def=5" json:"delta_seconds,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *InterfaceCounters) Reset()                    { *m = InterfaceCounters{} }
func (m *InterfaceCounters) String() string            { return proto.CompactTextString(m) }
func (*InterfaceCounters) ProtoMessage()               {}
func (*InterfaceCounters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

const Default_InterfaceCounters_DeltaSeconds uint64 = 5

func (m *InterfaceCounters) GetTxUnicastPackets() uint64 {
	if m != nil && m.TxUnicastPackets != nil {
		return *m.TxUnicastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetTxBroadcastPackets() uint64 {
	if m != nil && m.TxBroadcastPackets != nil {
		return *m.TxBroadcastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetTxMulticastPackets() uint64 {
	if m != nil && m.TxMulticastPackets != nil {
		return *m.TxMulticastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetTxBytes() uint64 {
	if m != nil && m.TxBytes != nil {
		return *m.TxBytes
	}
	return 0
}

func (m *InterfaceCounters) GetRxUnicastPackets() uint64 {
	if m != nil && m.RxUnicastPackets != nil {
		return *m.RxUnicastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetRxBroadcastPackets() uint64 {
	if m != nil && m.RxBroadcastPackets != nil {
		return *m.RxBroadcastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetRxMulticastPackets() uint64 {
	if m != nil && m.RxMulticastPackets != nil {
		return *m.RxMulticastPackets
	}
	return 0
}

func (m *InterfaceCounters) GetRxBytes() uint64 {
	if m != nil && m.RxBytes != nil {
		return *m.RxBytes
	}
	return 0
}

func (m *InterfaceCounters) GetTxErrorPackets() uint64 {
	if m != nil && m.TxErrorPackets != nil {
		return *m.TxErrorPackets
	}
	return 0
}

func (m *InterfaceCounters) GetTxDiscardPackets() uint64 {
	if m != nil && m.TxDiscardPackets != nil {
		return *m.TxDiscardPackets
	}
	return 0
}

func (m *InterfaceCounters) GetRxErrorPackets() uint64 {
	if m != nil && m.RxErrorPackets != nil {
		return *m.RxErrorPackets
	}
	return 0
}

func (m *InterfaceCounters) GetRxDiscardPackets() uint64 {
	if m != nil && m.RxDiscardPackets != nil {
		return *m.RxDiscardPackets
	}
	return 0
}

func (m *InterfaceCounters) GetAlignmentErrors() uint64 {
	if m != nil && m.AlignmentErrors != nil {
		return *m.AlignmentErrors
	}
	return 0
}

func (m *InterfaceCounters) GetFcsErrors() uint64 {
	if m != nil && m.FcsErrors != nil {
		return *m.FcsErrors
	}
	return 0
}

func (m *InterfaceCounters) GetSymbolErrors() uint64 {
	if m != nil && m.SymbolErrors != nil {
		return *m.SymbolErrors
	}
	return 0
}

func (m *InterfaceCounters) GetRunts() uint64 {
	if m != nil && m.Runts != nil {
		return *m.Runts
	}
	return 0
}

func (m *InterfaceCounters) GetGiants() uint64 {
	if m != nil && m.Giants != nil {
		return *m.Giants
	}
	return 0
}

func (m *InterfaceCounters) GetDeltaSeconds() uint64 {
	if m != nil && m.DeltaSeconds != nil {
		return *m.DeltaSeconds
	}
	return Default_InterfaceCounters_DeltaSeconds
}

type SystemInfo struct {
	CpuUser          *float32 `protobuf:"fixed32,1,req,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	CpuSystem        *float32 `protobuf:"fixed32,2,req,name=cpu_system,json=cpuSystem" json:"cpu_system,omitempty"`
	CpuIdle          *float32 `protobuf:"fixed32,3,req,name=cpu_idle,json=cpuIdle" json:"cpu_idle,omitempty"`
	MemoryUsed       *uint64  `protobuf:"varint,4,req,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	MemoryTotal      *uint64  `protobuf:"varint,5,req,name=memory_total,json=memoryTotal" json:"memory_total,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SystemInfo) Reset()                    { *m = SystemInfo{} }
func (m *SystemInfo) String() string            { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()               {}
func (*SystemInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *SystemInfo) GetCpuUser() float32 {
	if m != nil && m.CpuUser != nil {
		return *m.CpuUser
	}
	return 0
}

func (m *SystemInfo) GetCpuSystem() float32 {
	if m != nil && m.CpuSystem != nil {
		return *m.CpuSystem
	}
	return 0
}

func (m *SystemInfo) GetCpuIdle() float32 {
	if m != nil && m.CpuIdle != nil {
		return *m.CpuIdle
	}
	return 0
}

func (m *SystemInfo) GetMemoryUsed() uint64 {
	if m != nil && m.MemoryUsed != nil {
		return *m.MemoryUsed
	}
	return 0
}

func (m *SystemInfo) GetMemoryTotal() uint64 {
	if m != nil && m.MemoryTotal != nil {
		return *m.MemoryTotal
	}
	return 0
}

type ProcessInfo struct {
	ProcessName      *string  `protobuf:"bytes,1,req,name=process_name,json=processName" json:"process_name,omitempty"`
	CpuUser          *float32 `protobuf:"fixed32,2,req,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	CpuSystem        *float32 `protobuf:"fixed32,3,req,name=cpu_system,json=cpuSystem" json:"cpu_system,omitempty"`
	MemoryUsed       *uint64  `protobuf:"varint,4,req,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProcessInfo) Reset()                    { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string            { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()               {}
func (*ProcessInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ProcessInfo) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *ProcessInfo) GetCpuUser() float32 {
	if m != nil && m.CpuUser != nil {
		return *m.CpuUser
	}
	return 0
}

func (m *ProcessInfo) GetCpuSystem() float32 {
	if m != nil && m.CpuSystem != nil {
		return *m.CpuSystem
	}
	return 0
}

func (m *ProcessInfo) GetMemoryUsed() uint64 {
	if m != nil && m.MemoryUsed != nil {
		return *m.MemoryUsed
	}
	return 0
}

type FileInfo struct {
	FileName         *string `protobuf:"bytes,1,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize         *uint64 `protobuf:"varint,2,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *FileInfo) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *FileInfo) GetFileSize() uint64 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type SysResourceCounters struct {
	SystemInfo       *SystemInfo    `protobuf:"bytes,1,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	ProcessInfo      []*ProcessInfo `protobuf:"bytes,2,rep,name=process_info,json=processInfo" json:"process_info,omitempty"`
	FileInfo         []*FileInfo    `protobuf:"bytes,3,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SysResourceCounters) Reset()                    { *m = SysResourceCounters{} }
func (m *SysResourceCounters) String() string            { return proto.CompactTextString(m) }
func (*SysResourceCounters) ProtoMessage()               {}
func (*SysResourceCounters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SysResourceCounters) GetSystemInfo() *SystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *SysResourceCounters) GetProcessInfo() []*ProcessInfo {
	if m != nil {
		return m.ProcessInfo
	}
	return nil
}

func (m *SysResourceCounters) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type Tag struct {
	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Tag_Int64Value
	//	*Tag_FloatValue
	//	*Tag_StringValue
	Value            isTag_Value `protobuf_oneof:"value"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type isTag_Value interface{ isTag_Value() }

type Tag_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,oneof"`
}
type Tag_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,oneof"`
}
type Tag_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}

func (*Tag_Int64Value) isTag_Value()  {}
func (*Tag_FloatValue) isTag_Value()  {}
func (*Tag_StringValue) isTag_Value() {}

func (m *Tag) GetValue() isTag_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Tag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Tag) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Tag_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Tag) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Tag_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Tag) GetStringValue() string {
	if x, ok := m.GetValue().(*Tag_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tag) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tag_OneofMarshaler, _Tag_OneofUnmarshaler, _Tag_OneofSizer, []interface{}{
		(*Tag_Int64Value)(nil),
		(*Tag_FloatValue)(nil),
		(*Tag_StringValue)(nil),
	}
}

func _Tag_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tag)
	// value
	switch x := m.Value.(type) {
	case *Tag_Int64Value:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Tag_FloatValue:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *Tag_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("Tag.Value has unexpected type %T", x)
	}
	return nil
}

func _Tag_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tag)
	switch tag {
	case 1: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Tag_Int64Value{int64(x)}
		return true, err
	case 2: // value.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Tag_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Tag_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Tag_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tag)
	// value
	switch x := m.Value.(type) {
	case *Tag_Int64Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Tag_FloatValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *Tag_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Field struct {
	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Field_Int64Value
	//	*Field_FloatValue
	//	*Field_StringValue
	Value            isField_Value `protobuf_oneof:"value"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type isField_Value interface{ isField_Value() }

type Field_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,oneof"`
}
type Field_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,oneof"`
}
type Field_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}

func (*Field_Int64Value) isField_Value()  {}
func (*Field_FloatValue) isField_Value()  {}
func (*Field_StringValue) isField_Value() {}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Field) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Field_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Field) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Field_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Field) GetStringValue() string {
	if x, ok := m.GetValue().(*Field_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Field) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Field_OneofMarshaler, _Field_OneofUnmarshaler, _Field_OneofSizer, []interface{}{
		(*Field_Int64Value)(nil),
		(*Field_FloatValue)(nil),
		(*Field_StringValue)(nil),
	}
}

func _Field_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_Int64Value:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Field_FloatValue:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *Field_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case nil:
	default:
		return fmt.Errorf("Field.Value has unexpected type %T", x)
	}
	return nil
}

func _Field_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Field)
	switch tag {
	case 1: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Field_Int64Value{int64(x)}
		return true, err
	case 2: // value.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Field_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Field_StringValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Field_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_Int64Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Field_FloatValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *Field_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProbeProperty struct {
	Name *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	// Value contains json encoded data
	Value            *string `protobuf:"bytes,6,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProbeProperty) Reset()                    { *m = ProbeProperty{} }
func (m *ProbeProperty) String() string            { return proto.CompactTextString(m) }
func (*ProbeProperty) ProtoMessage()               {}
func (*ProbeProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ProbeProperty) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ProbeProperty) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type InterfaceCountersUtilization struct {
	TxUtilization            *uint64 `protobuf:"varint,1,req,name=tx_utilization,json=txUtilization" json:"tx_utilization,omitempty"`
	RxUtilization            *uint64 `protobuf:"varint,2,req,name=rx_utilization,json=rxUtilization" json:"rx_utilization,omitempty"`
	TxUnicastPps             *uint64 `protobuf:"varint,3,req,name=tx_unicast_pps,json=txUnicastPps" json:"tx_unicast_pps,omitempty"`
	TxBroadcastPps           *uint64 `protobuf:"varint,4,req,name=tx_broadcast_pps,json=txBroadcastPps" json:"tx_broadcast_pps,omitempty"`
	TxMulticastPps           *uint64 `protobuf:"varint,5,req,name=tx_multicast_pps,json=txMulticastPps" json:"tx_multicast_pps,omitempty"`
	TxBps                    *uint64 `protobuf:"varint,6,req,name=tx_bps,json=txBps" json:"tx_bps,omitempty"`
	TxErrorPps               *uint64 `protobuf:"varint,7,req,name=tx_error_pps,json=txErrorPps" json:"tx_error_pps,omitempty"`
	TxDiscardPps             *uint64 `protobuf:"varint,8,req,name=tx_discard_pps,json=txDiscardPps" json:"tx_discard_pps,omitempty"`
	RxUnicastPps             *uint64 `protobuf:"varint,9,req,name=rx_unicast_pps,json=rxUnicastPps" json:"rx_unicast_pps,omitempty"`
	RxBroadcastPps           *uint64 `protobuf:"varint,10,req,name=rx_broadcast_pps,json=rxBroadcastPps" json:"rx_broadcast_pps,omitempty"`
	RxMulticastPps           *uint64 `protobuf:"varint,11,req,name=rx_multicast_pps,json=rxMulticastPps" json:"rx_multicast_pps,omitempty"`
	RxBps                    *uint64 `protobuf:"varint,12,req,name=rx_bps,json=rxBps" json:"rx_bps,omitempty"`
	RxErrorPps               *uint64 `protobuf:"varint,13,req,name=rx_error_pps,json=rxErrorPps" json:"rx_error_pps,omitempty"`
	RxDiscardPps             *uint64 `protobuf:"varint,14,req,name=rx_discard_pps,json=rxDiscardPps" json:"rx_discard_pps,omitempty"`
	AlignmentErrorsPerSecond *uint64 `protobuf:"varint,15,req,name=alignment_errors_per_second,json=alignmentErrorsPerSecond" json:"alignment_errors_per_second,omitempty"`
	FcsErrorsPerSecond       *uint64 `protobuf:"varint,16,req,name=fcs_errors_per_second,json=fcsErrorsPerSecond" json:"fcs_errors_per_second,omitempty"`
	SymbolErrorsPerSecond    *uint64 `protobuf:"varint,17,req,name=symbol_errors_per_second,json=symbolErrorsPerSecond" json:"symbol_errors_per_second,omitempty"`
	RuntsPerSecond           *uint64 `protobuf:"varint,18,req,name=runts_per_second,json=runtsPerSecond" json:"runts_per_second,omitempty"`
	GiantsPerSecond          *uint64 `protobuf:"varint,19,req,name=giants_per_second,json=giantsPerSecond" json:"giants_per_second,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *InterfaceCountersUtilization) Reset()                    { *m = InterfaceCountersUtilization{} }
func (m *InterfaceCountersUtilization) String() string            { return proto.CompactTextString(m) }
func (*InterfaceCountersUtilization) ProtoMessage()               {}
func (*InterfaceCountersUtilization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *InterfaceCountersUtilization) GetTxUtilization() uint64 {
	if m != nil && m.TxUtilization != nil {
		return *m.TxUtilization
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxUtilization() uint64 {
	if m != nil && m.RxUtilization != nil {
		return *m.RxUtilization
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxUnicastPps() uint64 {
	if m != nil && m.TxUnicastPps != nil {
		return *m.TxUnicastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxBroadcastPps() uint64 {
	if m != nil && m.TxBroadcastPps != nil {
		return *m.TxBroadcastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxMulticastPps() uint64 {
	if m != nil && m.TxMulticastPps != nil {
		return *m.TxMulticastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxBps() uint64 {
	if m != nil && m.TxBps != nil {
		return *m.TxBps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxErrorPps() uint64 {
	if m != nil && m.TxErrorPps != nil {
		return *m.TxErrorPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetTxDiscardPps() uint64 {
	if m != nil && m.TxDiscardPps != nil {
		return *m.TxDiscardPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxUnicastPps() uint64 {
	if m != nil && m.RxUnicastPps != nil {
		return *m.RxUnicastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxBroadcastPps() uint64 {
	if m != nil && m.RxBroadcastPps != nil {
		return *m.RxBroadcastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxMulticastPps() uint64 {
	if m != nil && m.RxMulticastPps != nil {
		return *m.RxMulticastPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxBps() uint64 {
	if m != nil && m.RxBps != nil {
		return *m.RxBps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxErrorPps() uint64 {
	if m != nil && m.RxErrorPps != nil {
		return *m.RxErrorPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRxDiscardPps() uint64 {
	if m != nil && m.RxDiscardPps != nil {
		return *m.RxDiscardPps
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetAlignmentErrorsPerSecond() uint64 {
	if m != nil && m.AlignmentErrorsPerSecond != nil {
		return *m.AlignmentErrorsPerSecond
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetFcsErrorsPerSecond() uint64 {
	if m != nil && m.FcsErrorsPerSecond != nil {
		return *m.FcsErrorsPerSecond
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetSymbolErrorsPerSecond() uint64 {
	if m != nil && m.SymbolErrorsPerSecond != nil {
		return *m.SymbolErrorsPerSecond
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetRuntsPerSecond() uint64 {
	if m != nil && m.RuntsPerSecond != nil {
		return *m.RuntsPerSecond
	}
	return 0
}

func (m *InterfaceCountersUtilization) GetGiantsPerSecond() uint64 {
	if m != nil && m.GiantsPerSecond != nil {
		return *m.GiantsPerSecond
	}
	return 0
}

type SystemInterfaceUtilization struct {
	AggregateTxBps         *uint32 `protobuf:"varint,1,req,name=aggregate_tx_bps,json=aggregateTxBps" json:"aggregate_tx_bps,omitempty"`
	AggregateRxBps         *uint32 `protobuf:"varint,2,req,name=aggregate_rx_bps,json=aggregateRxBps" json:"aggregate_rx_bps,omitempty"`
	MaxIfcTxUtilization    *uint32 `protobuf:"varint,3,req,name=max_ifc_tx_utilization,json=maxIfcTxUtilization" json:"max_ifc_tx_utilization,omitempty"`
	MaxIfcRxUtilization    *uint32 `protobuf:"varint,4,req,name=max_ifc_rx_utilization,json=maxIfcRxUtilization" json:"max_ifc_rx_utilization,omitempty"`
	AggregateTxUtilization *uint32 `protobuf:"varint,5,req,name=aggregate_tx_utilization,json=aggregateTxUtilization" json:"aggregate_tx_utilization,omitempty"`
	AggregateRxUtilization *uint32 `protobuf:"varint,6,req,name=aggregate_rx_utilization,json=aggregateRxUtilization" json:"aggregate_rx_utilization,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *SystemInterfaceUtilization) Reset()                    { *m = SystemInterfaceUtilization{} }
func (m *SystemInterfaceUtilization) String() string            { return proto.CompactTextString(m) }
func (*SystemInterfaceUtilization) ProtoMessage()               {}
func (*SystemInterfaceUtilization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *SystemInterfaceUtilization) GetAggregateTxBps() uint32 {
	if m != nil && m.AggregateTxBps != nil {
		return *m.AggregateTxBps
	}
	return 0
}

func (m *SystemInterfaceUtilization) GetAggregateRxBps() uint32 {
	if m != nil && m.AggregateRxBps != nil {
		return *m.AggregateRxBps
	}
	return 0
}

func (m *SystemInterfaceUtilization) GetMaxIfcTxUtilization() uint32 {
	if m != nil && m.MaxIfcTxUtilization != nil {
		return *m.MaxIfcTxUtilization
	}
	return 0
}

func (m *SystemInterfaceUtilization) GetMaxIfcRxUtilization() uint32 {
	if m != nil && m.MaxIfcRxUtilization != nil {
		return *m.MaxIfcRxUtilization
	}
	return 0
}

func (m *SystemInterfaceUtilization) GetAggregateTxUtilization() uint32 {
	if m != nil && m.AggregateTxUtilization != nil {
		return *m.AggregateTxUtilization
	}
	return 0
}

func (m *SystemInterfaceUtilization) GetAggregateRxUtilization() uint32 {
	if m != nil && m.AggregateRxUtilization != nil {
		return *m.AggregateRxUtilization
	}
	return 0
}

type ProbeMessage struct {
	Property []*ProbeProperty `protobuf:"bytes,1,rep,name=property" json:"property,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ProbeMessage_Int64Value
	//	*ProbeMessage_FloatValue
	//	*ProbeMessage_StringValue
	//	*ProbeMessage_EvpnType3RouteState
	//	*ProbeMessage_EvpnType5RouteState
	//	*ProbeMessage_InterfaceCountersUtilization
	//	*ProbeMessage_SystemInterfaceUtilization
	//	*ProbeMessage_ActiveFloodlist
	Value            isProbeMessage_Value `protobuf_oneof:"value"`
	ProbeId          *string              `protobuf:"bytes,5,req,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	StageName        *string              `protobuf:"bytes,6,req,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	BlueprintId      *string              `protobuf:"bytes,7,req,name=blueprint_id,json=blueprintId" json:"blueprint_id,omitempty"`
	ItemId           *string              `protobuf:"bytes,8,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	ProbeLabel       *string              `protobuf:"bytes,14,opt,name=probe_label,json=probeLabel" json:"probe_label,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ProbeMessage) Reset()                    { *m = ProbeMessage{} }
func (m *ProbeMessage) String() string            { return proto.CompactTextString(m) }
func (*ProbeMessage) ProtoMessage()               {}
func (*ProbeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type isProbeMessage_Value interface{ isProbeMessage_Value() }

type ProbeMessage_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,oneof"`
}
type ProbeMessage_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,oneof"`
}
type ProbeMessage_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}
type ProbeMessage_EvpnType3RouteState struct {
	EvpnType3RouteState *EvpnType3RouteEvent `protobuf:"bytes,9,opt,name=evpn_type3_route_state,json=evpnType3RouteState,oneof"`
}
type ProbeMessage_EvpnType5RouteState struct {
	EvpnType5RouteState *EvpnType5RouteEvent `protobuf:"bytes,10,opt,name=evpn_type5_route_state,json=evpnType5RouteState,oneof"`
}
type ProbeMessage_InterfaceCountersUtilization struct {
	InterfaceCountersUtilization *InterfaceCountersUtilization `protobuf:"bytes,11,opt,name=interface_counters_utilization,json=interfaceCountersUtilization,oneof"`
}
type ProbeMessage_SystemInterfaceUtilization struct {
	SystemInterfaceUtilization *SystemInterfaceUtilization `protobuf:"bytes,12,opt,name=system_interface_utilization,json=systemInterfaceUtilization,oneof"`
}
type ProbeMessage_ActiveFloodlist struct {
	ActiveFloodlist *ActiveFloodlistEvent `protobuf:"bytes,13,opt,name=active_floodlist,json=activeFloodlist,oneof"`
}

func (*ProbeMessage_Int64Value) isProbeMessage_Value()                   {}
func (*ProbeMessage_FloatValue) isProbeMessage_Value()                   {}
func (*ProbeMessage_StringValue) isProbeMessage_Value()                  {}
func (*ProbeMessage_EvpnType3RouteState) isProbeMessage_Value()          {}
func (*ProbeMessage_EvpnType5RouteState) isProbeMessage_Value()          {}
func (*ProbeMessage_InterfaceCountersUtilization) isProbeMessage_Value() {}
func (*ProbeMessage_SystemInterfaceUtilization) isProbeMessage_Value()   {}
func (*ProbeMessage_ActiveFloodlist) isProbeMessage_Value()              {}

func (m *ProbeMessage) GetValue() isProbeMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ProbeMessage) GetProperty() []*ProbeProperty {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *ProbeMessage) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*ProbeMessage_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *ProbeMessage) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*ProbeMessage_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *ProbeMessage) GetStringValue() string {
	if x, ok := m.GetValue().(*ProbeMessage_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ProbeMessage) GetEvpnType3RouteState() *EvpnType3RouteEvent {
	if x, ok := m.GetValue().(*ProbeMessage_EvpnType3RouteState); ok {
		return x.EvpnType3RouteState
	}
	return nil
}

func (m *ProbeMessage) GetEvpnType5RouteState() *EvpnType5RouteEvent {
	if x, ok := m.GetValue().(*ProbeMessage_EvpnType5RouteState); ok {
		return x.EvpnType5RouteState
	}
	return nil
}

func (m *ProbeMessage) GetInterfaceCountersUtilization() *InterfaceCountersUtilization {
	if x, ok := m.GetValue().(*ProbeMessage_InterfaceCountersUtilization); ok {
		return x.InterfaceCountersUtilization
	}
	return nil
}

func (m *ProbeMessage) GetSystemInterfaceUtilization() *SystemInterfaceUtilization {
	if x, ok := m.GetValue().(*ProbeMessage_SystemInterfaceUtilization); ok {
		return x.SystemInterfaceUtilization
	}
	return nil
}

func (m *ProbeMessage) GetActiveFloodlist() *ActiveFloodlistEvent {
	if x, ok := m.GetValue().(*ProbeMessage_ActiveFloodlist); ok {
		return x.ActiveFloodlist
	}
	return nil
}

func (m *ProbeMessage) GetProbeId() string {
	if m != nil && m.ProbeId != nil {
		return *m.ProbeId
	}
	return ""
}

func (m *ProbeMessage) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *ProbeMessage) GetBlueprintId() string {
	if m != nil && m.BlueprintId != nil {
		return *m.BlueprintId
	}
	return ""
}

func (m *ProbeMessage) GetItemId() string {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return ""
}

func (m *ProbeMessage) GetProbeLabel() string {
	if m != nil && m.ProbeLabel != nil {
		return *m.ProbeLabel
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProbeMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProbeMessage_OneofMarshaler, _ProbeMessage_OneofUnmarshaler, _ProbeMessage_OneofSizer, []interface{}{
		(*ProbeMessage_Int64Value)(nil),
		(*ProbeMessage_FloatValue)(nil),
		(*ProbeMessage_StringValue)(nil),
		(*ProbeMessage_EvpnType3RouteState)(nil),
		(*ProbeMessage_EvpnType5RouteState)(nil),
		(*ProbeMessage_InterfaceCountersUtilization)(nil),
		(*ProbeMessage_SystemInterfaceUtilization)(nil),
		(*ProbeMessage_ActiveFloodlist)(nil),
	}
}

func _ProbeMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProbeMessage)
	// value
	switch x := m.Value.(type) {
	case *ProbeMessage_Int64Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *ProbeMessage_FloatValue:
		b.EncodeVarint(3<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *ProbeMessage_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *ProbeMessage_EvpnType3RouteState:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EvpnType3RouteState); err != nil {
			return err
		}
	case *ProbeMessage_EvpnType5RouteState:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EvpnType5RouteState); err != nil {
			return err
		}
	case *ProbeMessage_InterfaceCountersUtilization:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceCountersUtilization); err != nil {
			return err
		}
	case *ProbeMessage_SystemInterfaceUtilization:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemInterfaceUtilization); err != nil {
			return err
		}
	case *ProbeMessage_ActiveFloodlist:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActiveFloodlist); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProbeMessage.Value has unexpected type %T", x)
	}
	return nil
}

func _ProbeMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProbeMessage)
	switch tag {
	case 2: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ProbeMessage_Int64Value{int64(x)}
		return true, err
	case 3: // value.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &ProbeMessage_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ProbeMessage_StringValue{x}
		return true, err
	case 9: // value.evpn_type3_route_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EvpnType3RouteEvent)
		err := b.DecodeMessage(msg)
		m.Value = &ProbeMessage_EvpnType3RouteState{msg}
		return true, err
	case 10: // value.evpn_type5_route_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EvpnType5RouteEvent)
		err := b.DecodeMessage(msg)
		m.Value = &ProbeMessage_EvpnType5RouteState{msg}
		return true, err
	case 11: // value.interface_counters_utilization
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceCountersUtilization)
		err := b.DecodeMessage(msg)
		m.Value = &ProbeMessage_InterfaceCountersUtilization{msg}
		return true, err
	case 12: // value.system_interface_utilization
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInterfaceUtilization)
		err := b.DecodeMessage(msg)
		m.Value = &ProbeMessage_SystemInterfaceUtilization{msg}
		return true, err
	case 13: // value.active_floodlist
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActiveFloodlistEvent)
		err := b.DecodeMessage(msg)
		m.Value = &ProbeMessage_ActiveFloodlist{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProbeMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProbeMessage)
	// value
	switch x := m.Value.(type) {
	case *ProbeMessage_Int64Value:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *ProbeMessage_FloatValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *ProbeMessage_StringValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *ProbeMessage_EvpnType3RouteState:
		s := proto.Size(x.EvpnType3RouteState)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProbeMessage_EvpnType5RouteState:
		s := proto.Size(x.EvpnType5RouteState)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProbeMessage_InterfaceCountersUtilization:
		s := proto.Size(x.InterfaceCountersUtilization)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProbeMessage_SystemInterfaceUtilization:
		s := proto.Size(x.SystemInterfaceUtilization)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProbeMessage_ActiveFloodlist:
		s := proto.Size(x.ActiveFloodlist)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GenericPerfmonMessage struct {
	Tags             []*Tag   `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	Fields           []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GenericPerfmonMessage) Reset()                    { *m = GenericPerfmonMessage{} }
func (m *GenericPerfmonMessage) String() string            { return proto.CompactTextString(m) }
func (*GenericPerfmonMessage) ProtoMessage()               {}
func (*GenericPerfmonMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GenericPerfmonMessage) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GenericPerfmonMessage) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ProbeData struct {
	Tags             []*Tag   `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	Fields           []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProbeData) Reset()                    { *m = ProbeData{} }
func (m *ProbeData) String() string            { return proto.CompactTextString(m) }
func (*ProbeData) ProtoMessage()               {}
func (*ProbeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ProbeData) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ProbeData) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type PerfMon struct {
	// Types that are valid to be assigned to Data:
	//	*PerfMon_InterfaceCounters
	//	*PerfMon_SystemResourceCounters
	//	*PerfMon_Generic
	//	*PerfMon_ProbeMessage
	Data             isPerfMon_Data `protobuf_oneof:"data"`
	TimeDelta        *float32       `protobuf:"fixed32,3,opt,name=time_delta,json=timeDelta" json:"time_delta,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PerfMon) Reset()                    { *m = PerfMon{} }
func (m *PerfMon) String() string            { return proto.CompactTextString(m) }
func (*PerfMon) ProtoMessage()               {}
func (*PerfMon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

type isPerfMon_Data interface{ isPerfMon_Data() }

type PerfMon_InterfaceCounters struct {
	InterfaceCounters *InterfaceCounters `protobuf:"bytes,1,opt,name=interface_counters,json=interfaceCounters,oneof"`
}
type PerfMon_SystemResourceCounters struct {
	SystemResourceCounters *SysResourceCounters `protobuf:"bytes,2,opt,name=system_resource_counters,json=systemResourceCounters,oneof"`
}
type PerfMon_Generic struct {
	Generic *GenericPerfmonMessage `protobuf:"bytes,4,opt,name=generic,oneof"`
}
type PerfMon_ProbeMessage struct {
	ProbeMessage *ProbeMessage `protobuf:"bytes,5,opt,name=probe_message,json=probeMessage,oneof"`
}

func (*PerfMon_InterfaceCounters) isPerfMon_Data()      {}
func (*PerfMon_SystemResourceCounters) isPerfMon_Data() {}
func (*PerfMon_Generic) isPerfMon_Data()                {}
func (*PerfMon_ProbeMessage) isPerfMon_Data()           {}

func (m *PerfMon) GetData() isPerfMon_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PerfMon) GetInterfaceCounters() *InterfaceCounters {
	if x, ok := m.GetData().(*PerfMon_InterfaceCounters); ok {
		return x.InterfaceCounters
	}
	return nil
}

func (m *PerfMon) GetSystemResourceCounters() *SysResourceCounters {
	if x, ok := m.GetData().(*PerfMon_SystemResourceCounters); ok {
		return x.SystemResourceCounters
	}
	return nil
}

func (m *PerfMon) GetGeneric() *GenericPerfmonMessage {
	if x, ok := m.GetData().(*PerfMon_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *PerfMon) GetProbeMessage() *ProbeMessage {
	if x, ok := m.GetData().(*PerfMon_ProbeMessage); ok {
		return x.ProbeMessage
	}
	return nil
}

func (m *PerfMon) GetTimeDelta() float32 {
	if m != nil && m.TimeDelta != nil {
		return *m.TimeDelta
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PerfMon) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PerfMon_OneofMarshaler, _PerfMon_OneofUnmarshaler, _PerfMon_OneofSizer, []interface{}{
		(*PerfMon_InterfaceCounters)(nil),
		(*PerfMon_SystemResourceCounters)(nil),
		(*PerfMon_Generic)(nil),
		(*PerfMon_ProbeMessage)(nil),
	}
}

func _PerfMon_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PerfMon)
	// data
	switch x := m.Data.(type) {
	case *PerfMon_InterfaceCounters:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceCounters); err != nil {
			return err
		}
	case *PerfMon_SystemResourceCounters:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemResourceCounters); err != nil {
			return err
		}
	case *PerfMon_Generic:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Generic); err != nil {
			return err
		}
	case *PerfMon_ProbeMessage:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProbeMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PerfMon.Data has unexpected type %T", x)
	}
	return nil
}

func _PerfMon_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PerfMon)
	switch tag {
	case 1: // data.interface_counters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceCounters)
		err := b.DecodeMessage(msg)
		m.Data = &PerfMon_InterfaceCounters{msg}
		return true, err
	case 2: // data.system_resource_counters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SysResourceCounters)
		err := b.DecodeMessage(msg)
		m.Data = &PerfMon_SystemResourceCounters{msg}
		return true, err
	case 4: // data.generic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericPerfmonMessage)
		err := b.DecodeMessage(msg)
		m.Data = &PerfMon_Generic{msg}
		return true, err
	case 5: // data.probe_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProbeMessage)
		err := b.DecodeMessage(msg)
		m.Data = &PerfMon_ProbeMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PerfMon_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PerfMon)
	// data
	switch x := m.Data.(type) {
	case *PerfMon_InterfaceCounters:
		s := proto.Size(x.InterfaceCounters)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerfMon_SystemResourceCounters:
		s := proto.Size(x.SystemResourceCounters)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerfMon_Generic:
		s := proto.Size(x.Generic)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PerfMon_ProbeMessage:
		s := proto.Size(x.ProbeMessage)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Alert struct {
	Severity  *AlertSeverity `protobuf:"varint,1,req,name=severity,enum=aos.streaming.AlertSeverity" json:"severity,omitempty"`
	FirstSeen *uint64        `protobuf:"varint,2,req,name=first_seen,json=firstSeen" json:"first_seen,omitempty"`
	Id        *string        `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`
	Raised    *bool          `protobuf:"varint,4,req,name=raised" json:"raised,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Alert_ConfigDeviationAlert
	//	*Alert_StreamingAlert
	//	*Alert_CablePeerMismatchAlert
	//	*Alert_BgpNeighborMismatchAlert
	//	*Alert_InterfaceLinkStatusMismatchAlert
	//	*Alert_HostnameAlert
	//	*Alert_RouteAlert
	//	*Alert_LivenessAlert
	//	*Alert_DeploymentAlert
	//	*Alert_BlueprintRenderingAlert
	//	*Alert_CountersAlert
	//	*Alert_MacAlert
	//	*Alert_ArpAlert
	//	*Alert_HeadroomAlert
	//	*Alert_LagAlert
	//	*Alert_MlagAlert
	//	*Alert_ProbeAlert
	//	*Alert_ConfigMismatchAlert
	//	*Alert_ExtensibleAlert
	//	*Alert_TestAlert
	Data             isAlert_Data `protobuf_oneof:"data"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Alert) Reset()                    { *m = Alert{} }
func (m *Alert) String() string            { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()               {}
func (*Alert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type isAlert_Data interface{ isAlert_Data() }

type Alert_ConfigDeviationAlert struct {
	ConfigDeviationAlert *ConfigDeviationAlert `protobuf:"bytes,5,opt,name=config_deviation_alert,json=configDeviationAlert,oneof"`
}
type Alert_StreamingAlert struct {
	StreamingAlert *StreamingAlert `protobuf:"bytes,6,opt,name=streaming_alert,json=streamingAlert,oneof"`
}
type Alert_CablePeerMismatchAlert struct {
	CablePeerMismatchAlert *CablePeerMismatchAlert `protobuf:"bytes,7,opt,name=cable_peer_mismatch_alert,json=cablePeerMismatchAlert,oneof"`
}
type Alert_BgpNeighborMismatchAlert struct {
	BgpNeighborMismatchAlert *BGPNeighborMismatchAlert `protobuf:"bytes,8,opt,name=bgp_neighbor_mismatch_alert,json=bgpNeighborMismatchAlert,oneof"`
}
type Alert_InterfaceLinkStatusMismatchAlert struct {
	InterfaceLinkStatusMismatchAlert *InterfaceLinkStatusMismatchAlert `protobuf:"bytes,9,opt,name=interface_link_status_mismatch_alert,json=interfaceLinkStatusMismatchAlert,oneof"`
}
type Alert_HostnameAlert struct {
	HostnameAlert *HostnameAlert `protobuf:"bytes,10,opt,name=hostname_alert,json=hostnameAlert,oneof"`
}
type Alert_RouteAlert struct {
	RouteAlert *RouteAlert `protobuf:"bytes,11,opt,name=route_alert,json=routeAlert,oneof"`
}
type Alert_LivenessAlert struct {
	LivenessAlert *LivenessAlert `protobuf:"bytes,12,opt,name=liveness_alert,json=livenessAlert,oneof"`
}
type Alert_DeploymentAlert struct {
	DeploymentAlert *DeploymentAlert `protobuf:"bytes,13,opt,name=deployment_alert,json=deploymentAlert,oneof"`
}
type Alert_BlueprintRenderingAlert struct {
	BlueprintRenderingAlert *BlueprintRenderingAlert `protobuf:"bytes,14,opt,name=blueprint_rendering_alert,json=blueprintRenderingAlert,oneof"`
}
type Alert_CountersAlert struct {
	CountersAlert *CountersAlert `protobuf:"bytes,15,opt,name=counters_alert,json=countersAlert,oneof"`
}
type Alert_MacAlert struct {
	MacAlert *MacAlert `protobuf:"bytes,16,opt,name=mac_alert,json=macAlert,oneof"`
}
type Alert_ArpAlert struct {
	ArpAlert *ArpAlert `protobuf:"bytes,17,opt,name=arp_alert,json=arpAlert,oneof"`
}
type Alert_HeadroomAlert struct {
	HeadroomAlert *HeadroomAlert `protobuf:"bytes,18,opt,name=headroom_alert,json=headroomAlert,oneof"`
}
type Alert_LagAlert struct {
	LagAlert *LagAlert `protobuf:"bytes,19,opt,name=lag_alert,json=lagAlert,oneof"`
}
type Alert_MlagAlert struct {
	MlagAlert *MlagAlert `protobuf:"bytes,20,opt,name=mlag_alert,json=mlagAlert,oneof"`
}
type Alert_ProbeAlert struct {
	ProbeAlert *ProbeAlert `protobuf:"bytes,21,opt,name=probe_alert,json=probeAlert,oneof"`
}
type Alert_ConfigMismatchAlert struct {
	ConfigMismatchAlert *ConfigMismatchAlert `protobuf:"bytes,22,opt,name=config_mismatch_alert,json=configMismatchAlert,oneof"`
}
type Alert_ExtensibleAlert struct {
	ExtensibleAlert *ExtensibleAlert `protobuf:"bytes,23,opt,name=extensible_alert,json=extensibleAlert,oneof"`
}
type Alert_TestAlert struct {
	TestAlert *TestAlert `protobuf:"bytes,1000,opt,name=test_alert,json=testAlert,oneof"`
}

func (*Alert_ConfigDeviationAlert) isAlert_Data()             {}
func (*Alert_StreamingAlert) isAlert_Data()                   {}
func (*Alert_CablePeerMismatchAlert) isAlert_Data()           {}
func (*Alert_BgpNeighborMismatchAlert) isAlert_Data()         {}
func (*Alert_InterfaceLinkStatusMismatchAlert) isAlert_Data() {}
func (*Alert_HostnameAlert) isAlert_Data()                    {}
func (*Alert_RouteAlert) isAlert_Data()                       {}
func (*Alert_LivenessAlert) isAlert_Data()                    {}
func (*Alert_DeploymentAlert) isAlert_Data()                  {}
func (*Alert_BlueprintRenderingAlert) isAlert_Data()          {}
func (*Alert_CountersAlert) isAlert_Data()                    {}
func (*Alert_MacAlert) isAlert_Data()                         {}
func (*Alert_ArpAlert) isAlert_Data()                         {}
func (*Alert_HeadroomAlert) isAlert_Data()                    {}
func (*Alert_LagAlert) isAlert_Data()                         {}
func (*Alert_MlagAlert) isAlert_Data()                        {}
func (*Alert_ProbeAlert) isAlert_Data()                       {}
func (*Alert_ConfigMismatchAlert) isAlert_Data()              {}
func (*Alert_ExtensibleAlert) isAlert_Data()                  {}
func (*Alert_TestAlert) isAlert_Data()                        {}

func (m *Alert) GetData() isAlert_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Alert) GetSeverity() AlertSeverity {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return AlertSeverity_ALERT_LOW
}

func (m *Alert) GetFirstSeen() uint64 {
	if m != nil && m.FirstSeen != nil {
		return *m.FirstSeen
	}
	return 0
}

func (m *Alert) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Alert) GetRaised() bool {
	if m != nil && m.Raised != nil {
		return *m.Raised
	}
	return false
}

func (m *Alert) GetConfigDeviationAlert() *ConfigDeviationAlert {
	if x, ok := m.GetData().(*Alert_ConfigDeviationAlert); ok {
		return x.ConfigDeviationAlert
	}
	return nil
}

func (m *Alert) GetStreamingAlert() *StreamingAlert {
	if x, ok := m.GetData().(*Alert_StreamingAlert); ok {
		return x.StreamingAlert
	}
	return nil
}

func (m *Alert) GetCablePeerMismatchAlert() *CablePeerMismatchAlert {
	if x, ok := m.GetData().(*Alert_CablePeerMismatchAlert); ok {
		return x.CablePeerMismatchAlert
	}
	return nil
}

func (m *Alert) GetBgpNeighborMismatchAlert() *BGPNeighborMismatchAlert {
	if x, ok := m.GetData().(*Alert_BgpNeighborMismatchAlert); ok {
		return x.BgpNeighborMismatchAlert
	}
	return nil
}

func (m *Alert) GetInterfaceLinkStatusMismatchAlert() *InterfaceLinkStatusMismatchAlert {
	if x, ok := m.GetData().(*Alert_InterfaceLinkStatusMismatchAlert); ok {
		return x.InterfaceLinkStatusMismatchAlert
	}
	return nil
}

func (m *Alert) GetHostnameAlert() *HostnameAlert {
	if x, ok := m.GetData().(*Alert_HostnameAlert); ok {
		return x.HostnameAlert
	}
	return nil
}

func (m *Alert) GetRouteAlert() *RouteAlert {
	if x, ok := m.GetData().(*Alert_RouteAlert); ok {
		return x.RouteAlert
	}
	return nil
}

func (m *Alert) GetLivenessAlert() *LivenessAlert {
	if x, ok := m.GetData().(*Alert_LivenessAlert); ok {
		return x.LivenessAlert
	}
	return nil
}

func (m *Alert) GetDeploymentAlert() *DeploymentAlert {
	if x, ok := m.GetData().(*Alert_DeploymentAlert); ok {
		return x.DeploymentAlert
	}
	return nil
}

func (m *Alert) GetBlueprintRenderingAlert() *BlueprintRenderingAlert {
	if x, ok := m.GetData().(*Alert_BlueprintRenderingAlert); ok {
		return x.BlueprintRenderingAlert
	}
	return nil
}

func (m *Alert) GetCountersAlert() *CountersAlert {
	if x, ok := m.GetData().(*Alert_CountersAlert); ok {
		return x.CountersAlert
	}
	return nil
}

func (m *Alert) GetMacAlert() *MacAlert {
	if x, ok := m.GetData().(*Alert_MacAlert); ok {
		return x.MacAlert
	}
	return nil
}

func (m *Alert) GetArpAlert() *ArpAlert {
	if x, ok := m.GetData().(*Alert_ArpAlert); ok {
		return x.ArpAlert
	}
	return nil
}

func (m *Alert) GetHeadroomAlert() *HeadroomAlert {
	if x, ok := m.GetData().(*Alert_HeadroomAlert); ok {
		return x.HeadroomAlert
	}
	return nil
}

func (m *Alert) GetLagAlert() *LagAlert {
	if x, ok := m.GetData().(*Alert_LagAlert); ok {
		return x.LagAlert
	}
	return nil
}

func (m *Alert) GetMlagAlert() *MlagAlert {
	if x, ok := m.GetData().(*Alert_MlagAlert); ok {
		return x.MlagAlert
	}
	return nil
}

func (m *Alert) GetProbeAlert() *ProbeAlert {
	if x, ok := m.GetData().(*Alert_ProbeAlert); ok {
		return x.ProbeAlert
	}
	return nil
}

func (m *Alert) GetConfigMismatchAlert() *ConfigMismatchAlert {
	if x, ok := m.GetData().(*Alert_ConfigMismatchAlert); ok {
		return x.ConfigMismatchAlert
	}
	return nil
}

func (m *Alert) GetExtensibleAlert() *ExtensibleAlert {
	if x, ok := m.GetData().(*Alert_ExtensibleAlert); ok {
		return x.ExtensibleAlert
	}
	return nil
}

func (m *Alert) GetTestAlert() *TestAlert {
	if x, ok := m.GetData().(*Alert_TestAlert); ok {
		return x.TestAlert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Alert) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Alert_OneofMarshaler, _Alert_OneofUnmarshaler, _Alert_OneofSizer, []interface{}{
		(*Alert_ConfigDeviationAlert)(nil),
		(*Alert_StreamingAlert)(nil),
		(*Alert_CablePeerMismatchAlert)(nil),
		(*Alert_BgpNeighborMismatchAlert)(nil),
		(*Alert_InterfaceLinkStatusMismatchAlert)(nil),
		(*Alert_HostnameAlert)(nil),
		(*Alert_RouteAlert)(nil),
		(*Alert_LivenessAlert)(nil),
		(*Alert_DeploymentAlert)(nil),
		(*Alert_BlueprintRenderingAlert)(nil),
		(*Alert_CountersAlert)(nil),
		(*Alert_MacAlert)(nil),
		(*Alert_ArpAlert)(nil),
		(*Alert_HeadroomAlert)(nil),
		(*Alert_LagAlert)(nil),
		(*Alert_MlagAlert)(nil),
		(*Alert_ProbeAlert)(nil),
		(*Alert_ConfigMismatchAlert)(nil),
		(*Alert_ExtensibleAlert)(nil),
		(*Alert_TestAlert)(nil),
	}
}

func _Alert_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Alert)
	// data
	switch x := m.Data.(type) {
	case *Alert_ConfigDeviationAlert:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigDeviationAlert); err != nil {
			return err
		}
	case *Alert_StreamingAlert:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamingAlert); err != nil {
			return err
		}
	case *Alert_CablePeerMismatchAlert:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CablePeerMismatchAlert); err != nil {
			return err
		}
	case *Alert_BgpNeighborMismatchAlert:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BgpNeighborMismatchAlert); err != nil {
			return err
		}
	case *Alert_InterfaceLinkStatusMismatchAlert:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceLinkStatusMismatchAlert); err != nil {
			return err
		}
	case *Alert_HostnameAlert:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HostnameAlert); err != nil {
			return err
		}
	case *Alert_RouteAlert:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RouteAlert); err != nil {
			return err
		}
	case *Alert_LivenessAlert:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LivenessAlert); err != nil {
			return err
		}
	case *Alert_DeploymentAlert:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeploymentAlert); err != nil {
			return err
		}
	case *Alert_BlueprintRenderingAlert:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlueprintRenderingAlert); err != nil {
			return err
		}
	case *Alert_CountersAlert:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CountersAlert); err != nil {
			return err
		}
	case *Alert_MacAlert:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MacAlert); err != nil {
			return err
		}
	case *Alert_ArpAlert:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArpAlert); err != nil {
			return err
		}
	case *Alert_HeadroomAlert:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadroomAlert); err != nil {
			return err
		}
	case *Alert_LagAlert:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LagAlert); err != nil {
			return err
		}
	case *Alert_MlagAlert:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MlagAlert); err != nil {
			return err
		}
	case *Alert_ProbeAlert:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProbeAlert); err != nil {
			return err
		}
	case *Alert_ConfigMismatchAlert:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigMismatchAlert); err != nil {
			return err
		}
	case *Alert_ExtensibleAlert:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExtensibleAlert); err != nil {
			return err
		}
	case *Alert_TestAlert:
		b.EncodeVarint(1000<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TestAlert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Alert.Data has unexpected type %T", x)
	}
	return nil
}

func _Alert_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Alert)
	switch tag {
	case 5: // data.config_deviation_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigDeviationAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_ConfigDeviationAlert{msg}
		return true, err
	case 6: // data.streaming_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamingAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_StreamingAlert{msg}
		return true, err
	case 7: // data.cable_peer_mismatch_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CablePeerMismatchAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_CablePeerMismatchAlert{msg}
		return true, err
	case 8: // data.bgp_neighbor_mismatch_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BGPNeighborMismatchAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_BgpNeighborMismatchAlert{msg}
		return true, err
	case 9: // data.interface_link_status_mismatch_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceLinkStatusMismatchAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_InterfaceLinkStatusMismatchAlert{msg}
		return true, err
	case 10: // data.hostname_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HostnameAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_HostnameAlert{msg}
		return true, err
	case 11: // data.route_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_RouteAlert{msg}
		return true, err
	case 12: // data.liveness_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LivenessAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_LivenessAlert{msg}
		return true, err
	case 13: // data.deployment_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeploymentAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_DeploymentAlert{msg}
		return true, err
	case 14: // data.blueprint_rendering_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlueprintRenderingAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_BlueprintRenderingAlert{msg}
		return true, err
	case 15: // data.counters_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CountersAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_CountersAlert{msg}
		return true, err
	case 16: // data.mac_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MacAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_MacAlert{msg}
		return true, err
	case 17: // data.arp_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArpAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_ArpAlert{msg}
		return true, err
	case 18: // data.headroom_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeadroomAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_HeadroomAlert{msg}
		return true, err
	case 19: // data.lag_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LagAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_LagAlert{msg}
		return true, err
	case 20: // data.mlag_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MlagAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_MlagAlert{msg}
		return true, err
	case 21: // data.probe_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProbeAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_ProbeAlert{msg}
		return true, err
	case 22: // data.config_mismatch_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigMismatchAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_ConfigMismatchAlert{msg}
		return true, err
	case 23: // data.extensible_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensibleAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_ExtensibleAlert{msg}
		return true, err
	case 1000: // data.test_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TestAlert)
		err := b.DecodeMessage(msg)
		m.Data = &Alert_TestAlert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Alert_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Alert)
	// data
	switch x := m.Data.(type) {
	case *Alert_ConfigDeviationAlert:
		s := proto.Size(x.ConfigDeviationAlert)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_StreamingAlert:
		s := proto.Size(x.StreamingAlert)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_CablePeerMismatchAlert:
		s := proto.Size(x.CablePeerMismatchAlert)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_BgpNeighborMismatchAlert:
		s := proto.Size(x.BgpNeighborMismatchAlert)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_InterfaceLinkStatusMismatchAlert:
		s := proto.Size(x.InterfaceLinkStatusMismatchAlert)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_HostnameAlert:
		s := proto.Size(x.HostnameAlert)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_RouteAlert:
		s := proto.Size(x.RouteAlert)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_LivenessAlert:
		s := proto.Size(x.LivenessAlert)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_DeploymentAlert:
		s := proto.Size(x.DeploymentAlert)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_BlueprintRenderingAlert:
		s := proto.Size(x.BlueprintRenderingAlert)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_CountersAlert:
		s := proto.Size(x.CountersAlert)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_MacAlert:
		s := proto.Size(x.MacAlert)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_ArpAlert:
		s := proto.Size(x.ArpAlert)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_HeadroomAlert:
		s := proto.Size(x.HeadroomAlert)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_LagAlert:
		s := proto.Size(x.LagAlert)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_MlagAlert:
		s := proto.Size(x.MlagAlert)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_ProbeAlert:
		s := proto.Size(x.ProbeAlert)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_ConfigMismatchAlert:
		s := proto.Size(x.ConfigMismatchAlert)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_ExtensibleAlert:
		s := proto.Size(x.ExtensibleAlert)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Alert_TestAlert:
		s := proto.Size(x.TestAlert)
		n += proto.SizeVarint(1000<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AosMessage struct {
	Timestamp      *uint64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	OriginName     *string `protobuf:"bytes,2,req,name=origin_name,json=originName" json:"origin_name,omitempty"`
	OriginHostname *string `protobuf:"bytes,6,opt,name=origin_hostname,json=originHostname" json:"origin_hostname,omitempty"`
	OriginRole     *string `protobuf:"bytes,7,opt,name=origin_role,json=originRole" json:"origin_role,omitempty"`
	BlueprintLabel *string `protobuf:"bytes,8,opt,name=blueprint_label,json=blueprintLabel" json:"blueprint_label,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*AosMessage_Alert
	//	*AosMessage_Event
	//	*AosMessage_PerfMon
	Data             isAosMessage_Data `protobuf_oneof:"data"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *AosMessage) Reset()                    { *m = AosMessage{} }
func (m *AosMessage) String() string            { return proto.CompactTextString(m) }
func (*AosMessage) ProtoMessage()               {}
func (*AosMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

type isAosMessage_Data interface{ isAosMessage_Data() }

type AosMessage_Alert struct {
	Alert *Alert `protobuf:"bytes,3,opt,name=alert,oneof"`
}
type AosMessage_Event struct {
	Event *Event `protobuf:"bytes,4,opt,name=event,oneof"`
}
type AosMessage_PerfMon struct {
	PerfMon *PerfMon `protobuf:"bytes,5,opt,name=perf_mon,json=perfMon,oneof"`
}

func (*AosMessage_Alert) isAosMessage_Data()   {}
func (*AosMessage_Event) isAosMessage_Data()   {}
func (*AosMessage_PerfMon) isAosMessage_Data() {}

func (m *AosMessage) GetData() isAosMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AosMessage) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AosMessage) GetOriginName() string {
	if m != nil && m.OriginName != nil {
		return *m.OriginName
	}
	return ""
}

func (m *AosMessage) GetOriginHostname() string {
	if m != nil && m.OriginHostname != nil {
		return *m.OriginHostname
	}
	return ""
}

func (m *AosMessage) GetOriginRole() string {
	if m != nil && m.OriginRole != nil {
		return *m.OriginRole
	}
	return ""
}

func (m *AosMessage) GetBlueprintLabel() string {
	if m != nil && m.BlueprintLabel != nil {
		return *m.BlueprintLabel
	}
	return ""
}

func (m *AosMessage) GetAlert() *Alert {
	if x, ok := m.GetData().(*AosMessage_Alert); ok {
		return x.Alert
	}
	return nil
}

func (m *AosMessage) GetEvent() *Event {
	if x, ok := m.GetData().(*AosMessage_Event); ok {
		return x.Event
	}
	return nil
}

func (m *AosMessage) GetPerfMon() *PerfMon {
	if x, ok := m.GetData().(*AosMessage_PerfMon); ok {
		return x.PerfMon
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AosMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AosMessage_OneofMarshaler, _AosMessage_OneofUnmarshaler, _AosMessage_OneofSizer, []interface{}{
		(*AosMessage_Alert)(nil),
		(*AosMessage_Event)(nil),
		(*AosMessage_PerfMon)(nil),
	}
}

func _AosMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AosMessage)
	// data
	switch x := m.Data.(type) {
	case *AosMessage_Alert:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Alert); err != nil {
			return err
		}
	case *AosMessage_Event:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case *AosMessage_PerfMon:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerfMon); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AosMessage.Data has unexpected type %T", x)
	}
	return nil
}

func _AosMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AosMessage)
	switch tag {
	case 3: // data.alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Alert)
		err := b.DecodeMessage(msg)
		m.Data = &AosMessage_Alert{msg}
		return true, err
	case 4: // data.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event)
		err := b.DecodeMessage(msg)
		m.Data = &AosMessage_Event{msg}
		return true, err
	case 5: // data.perf_mon
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerfMon)
		err := b.DecodeMessage(msg)
		m.Data = &AosMessage_PerfMon{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AosMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AosMessage)
	// data
	switch x := m.Data.(type) {
	case *AosMessage_Alert:
		s := proto.Size(x.Alert)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AosMessage_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AosMessage_PerfMon:
		s := proto.Size(x.PerfMon)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AosSequencedMessage struct {
	SeqNum *uint64 `protobuf:"varint,1,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	// space for preceding fields
	AosProto         []byte `protobuf:"bytes,15,opt,name=aos_proto,json=aosProto" json:"aos_proto,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AosSequencedMessage) Reset()                    { *m = AosSequencedMessage{} }
func (m *AosSequencedMessage) String() string            { return proto.CompactTextString(m) }
func (*AosSequencedMessage) ProtoMessage()               {}
func (*AosSequencedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *AosSequencedMessage) GetSeqNum() uint64 {
	if m != nil && m.SeqNum != nil {
		return *m.SeqNum
	}
	return 0
}

func (m *AosSequencedMessage) GetAosProto() []byte {
	if m != nil {
		return m.AosProto
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceStateEvent)(nil), "aos.streaming.DeviceStateEvent")
	proto.RegisterType((*TrafficEvent)(nil), "aos.streaming.TrafficEvent")
	proto.RegisterType((*StreamingEvent)(nil), "aos.streaming.StreamingEvent")
	proto.RegisterType((*CablePeerEvent)(nil), "aos.streaming.CablePeerEvent")
	proto.RegisterType((*BGPNeighborEvent)(nil), "aos.streaming.BGPNeighborEvent")
	proto.RegisterType((*LinkStatusEvent)(nil), "aos.streaming.LinkStatusEvent")
	proto.RegisterType((*MacEvent)(nil), "aos.streaming.MacEvent")
	proto.RegisterType((*ArpEvent)(nil), "aos.streaming.ArpEvent")
	proto.RegisterType((*LagEvent)(nil), "aos.streaming.LagEvent")
	proto.RegisterType((*MlagEvent)(nil), "aos.streaming.MlagEvent")
	proto.RegisterType((*ExtensibleServiceEvent)(nil), "aos.streaming.ExtensibleServiceEvent")
	proto.RegisterType((*RouteEvent)(nil), "aos.streaming.RouteEvent")
	proto.RegisterType((*EvpnType3RouteEvent)(nil), "aos.streaming.EvpnType3RouteEvent")
	proto.RegisterType((*ActiveFloodlistEvent)(nil), "aos.streaming.ActiveFloodlistEvent")
	proto.RegisterType((*EvpnType5RouteEvent)(nil), "aos.streaming.EvpnType5RouteEvent")
	proto.RegisterType((*Event)(nil), "aos.streaming.Event")
	proto.RegisterType((*HostnameAlert)(nil), "aos.streaming.HostnameAlert")
	proto.RegisterType((*ConfigDeviationAlert)(nil), "aos.streaming.ConfigDeviationAlert")
	proto.RegisterType((*LivenessAlert)(nil), "aos.streaming.LivenessAlert")
	proto.RegisterType((*ExtensibleAlert)(nil), "aos.streaming.ExtensibleAlert")
	proto.RegisterType((*DeploymentAlert)(nil), "aos.streaming.DeploymentAlert")
	proto.RegisterType((*BlueprintRenderingAlert)(nil), "aos.streaming.BlueprintRenderingAlert")
	proto.RegisterType((*RouteAlert)(nil), "aos.streaming.RouteAlert")
	proto.RegisterType((*LagAlert)(nil), "aos.streaming.LagAlert")
	proto.RegisterType((*StreamingAlert)(nil), "aos.streaming.StreamingAlert")
	proto.RegisterType((*CablePeerMismatchAlert)(nil), "aos.streaming.CablePeerMismatchAlert")
	proto.RegisterType((*BGPNeighborMismatchAlert)(nil), "aos.streaming.BGPNeighborMismatchAlert")
	proto.RegisterType((*InterfaceLinkStatusMismatchAlert)(nil), "aos.streaming.InterfaceLinkStatusMismatchAlert")
	proto.RegisterType((*CountersAlert)(nil), "aos.streaming.CountersAlert")
	proto.RegisterType((*KeyValuePair)(nil), "aos.streaming.KeyValuePair")
	proto.RegisterType((*ProbeAlert)(nil), "aos.streaming.ProbeAlert")
	proto.RegisterType((*ConfigMismatchAlert)(nil), "aos.streaming.ConfigMismatchAlert")
	proto.RegisterType((*HeadroomAlert)(nil), "aos.streaming.HeadroomAlert")
	proto.RegisterType((*MacAlert)(nil), "aos.streaming.MacAlert")
	proto.RegisterType((*ArpAlert)(nil), "aos.streaming.ArpAlert")
	proto.RegisterType((*MlagAlert)(nil), "aos.streaming.MlagAlert")
	proto.RegisterType((*TestAlert)(nil), "aos.streaming.TestAlert")
	proto.RegisterType((*InterfaceCounters)(nil), "aos.streaming.InterfaceCounters")
	proto.RegisterType((*SystemInfo)(nil), "aos.streaming.SystemInfo")
	proto.RegisterType((*ProcessInfo)(nil), "aos.streaming.ProcessInfo")
	proto.RegisterType((*FileInfo)(nil), "aos.streaming.FileInfo")
	proto.RegisterType((*SysResourceCounters)(nil), "aos.streaming.SysResourceCounters")
	proto.RegisterType((*Tag)(nil), "aos.streaming.Tag")
	proto.RegisterType((*Field)(nil), "aos.streaming.Field")
	proto.RegisterType((*ProbeProperty)(nil), "aos.streaming.ProbeProperty")
	proto.RegisterType((*InterfaceCountersUtilization)(nil), "aos.streaming.InterfaceCountersUtilization")
	proto.RegisterType((*SystemInterfaceUtilization)(nil), "aos.streaming.SystemInterfaceUtilization")
	proto.RegisterType((*ProbeMessage)(nil), "aos.streaming.ProbeMessage")
	proto.RegisterType((*GenericPerfmonMessage)(nil), "aos.streaming.GenericPerfmonMessage")
	proto.RegisterType((*ProbeData)(nil), "aos.streaming.ProbeData")
	proto.RegisterType((*PerfMon)(nil), "aos.streaming.PerfMon")
	proto.RegisterType((*Alert)(nil), "aos.streaming.Alert")
	proto.RegisterType((*AosMessage)(nil), "aos.streaming.AosMessage")
	proto.RegisterType((*AosSequencedMessage)(nil), "aos.streaming.AosSequencedMessage")
	proto.RegisterEnum("aos.streaming.DeviceState", DeviceState_name, DeviceState_value)
	proto.RegisterEnum("aos.streaming.Feature", Feature_name, Feature_value)
	proto.RegisterEnum("aos.streaming.StreamingType", StreamingType_name, StreamingType_value)
	proto.RegisterEnum("aos.streaming.StreamingProtocol", StreamingProtocol_name, StreamingProtocol_value)
	proto.RegisterEnum("aos.streaming.StreamingStatus", StreamingStatus_name, StreamingStatus_value)
	proto.RegisterEnum("aos.streaming.StreamingSequencingMode", StreamingSequencingMode_name, StreamingSequencingMode_value)
	proto.RegisterEnum("aos.streaming.BgpSessionAddressFamily", BgpSessionAddressFamily_name, BgpSessionAddressFamily_value)
	proto.RegisterEnum("aos.streaming.LinkStatus", LinkStatus_name, LinkStatus_value)
	proto.RegisterEnum("aos.streaming.MacState", MacState_name, MacState_value)
	proto.RegisterEnum("aos.streaming.ArpState", ArpState_name, ArpState_value)
	proto.RegisterEnum("aos.streaming.MlagDomainState", MlagDomainState_name, MlagDomainState_value)
	proto.RegisterEnum("aos.streaming.MlagIntfState", MlagIntfState_name, MlagIntfState_value)
	proto.RegisterEnum("aos.streaming.RouteState", RouteState_name, RouteState_value)
	proto.RegisterEnum("aos.streaming.AlertSeverity", AlertSeverity_name, AlertSeverity_value)
	proto.RegisterEnum("aos.streaming.RouteEntryStatus", RouteEntryStatus_name, RouteEntryStatus_value)
	proto.RegisterEnum("aos.streaming.NextHopStatus", NextHopStatus_name, NextHopStatus_value)
	proto.RegisterEnum("aos.streaming.RouteType", RouteType_name, RouteType_value)
	proto.RegisterEnum("aos.streaming.DeploymentStatus", DeploymentStatus_name, DeploymentStatus_value)
	proto.RegisterEnum("aos.streaming.StreamingAlertReason", StreamingAlertReason_name, StreamingAlertReason_value)
	proto.RegisterEnum("aos.streaming.BgpSessionState", BgpSessionState_name, BgpSessionState_value)
	proto.RegisterEnum("aos.streaming.AggregationType", AggregationType_name, AggregationType_value)
	proto.RegisterEnum("aos.streaming.HeadroomType", HeadroomType_name, HeadroomType_value)
}

func init() { proto.RegisterFile("aosstream-enduro.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7b, 0x49, 0x8f, 0x2b, 0xd7,
	0x75, 0x30, 0xe7, 0xe1, 0x70, 0xaa, 0x57, 0x3d, 0xb1, 0x5f, 0x3f, 0xc9, 0x6d, 0x4a, 0x96, 0xda,
	0x6d, 0x59, 0xb6, 0x25, 0x3d, 0xc9, 0x93, 0x3e, 0x88, 0xdd, 0xac, 0x6e, 0x12, 0xaf, 0x39, 0xa8,
	0xc8, 0x7e, 0x92, 0x60, 0x7c, 0x29, 0x54, 0x93, 0x97, 0x7c, 0x85, 0x57, 0xac, 0x2a, 0x57, 0x15,
	0x3b, 0x6c, 0xed, 0x0c, 0x18, 0x01, 0x32, 0x18, 0x01, 0x92, 0x5d, 0xb2, 0xf0, 0x2a, 0x9b, 0xac,
	0x02, 0x04, 0xc8, 0x22, 0x01, 0x62, 0x2f, 0x82, 0x6c, 0x02, 0x04, 0xd9, 0x65, 0x61, 0x20, 0x0b,
	0x23, 0x8b, 0xe4, 0x5f, 0x04, 0x77, 0xac, 0x81, 0xc5, 0xd7, 0xcf, 0x82, 0x1c, 0x38, 0x3b, 0xd6,
	0x99, 0xee, 0xb9, 0xe7, 0xde, 0x7b, 0xce, 0xb9, 0xe7, 0x1e, 0xc2, 0xbe, 0x6e, 0x7b, 0x9e, 0xef,
	0x22, 0x7d, 0xf9, 0x4d, 0x64, 0xcd, 0x56, 0xae, 0xfd, 0xb6, 0xe3, 0xda, 0xbe, 0x2d, 0xd7, 0x74,
	0xdb, 0x7b, 0x9b, 0x22, 0x0c, 0x6b, 0xd1, 0xea, 0x80, 0xd4, 0x41, 0xb7, 0xc6, 0x14, 0x8d, 0x7d,
	0xdd, 0x47, 0xca, 0x2d, 0xb2, 0x7c, 0xf9, 0xdb, 0x90, 0xf7, 0xf0, 0x57, 0x33, 0x7d, 0x9c, 0x39,
	0xa9, 0xbf, 0xf3, 0xf0, 0xed, 0x08, 0xcb, 0xdb, 0x21, 0x7a, 0x95, 0x12, 0xb6, 0xfe, 0x2d, 0x0b,
	0xd5, 0x89, 0xab, 0xcf, 0xe7, 0xc6, 0x94, 0x8a, 0x78, 0x0c, 0x65, 0xcb, 0x9e, 0x21, 0xcd, 0xb5,
	0x4d, 0x2c, 0x26, 0x7d, 0x52, 0x7f, 0x67, 0x3f, 0x26, 0xe6, 0x02, 0xe9, 0xfe, 0xca, 0x45, 0xdd,
	0x94, 0x5a, 0xc2, 0xa4, 0xaa, 0x6d, 0x22, 0xcc, 0xe6, 0xd8, 0xae, 0x4f, 0xd9, 0x32, 0xf7, 0xb1,
	0x61, 0x52, 0xc2, 0xb6, 0x0b, 0x39, 0xfc, 0xbb, 0x99, 0x3d, 0x4e, 0x9f, 0x94, 0xbb, 0x29, 0x95,
	0x7c, 0x61, 0x28, 0x16, 0xdc, 0xcc, 0x71, 0x28, 0xfe, 0x92, 0x65, 0xc8, 0x3a, 0xf6, 0xac, 0x99,
	0x3f, 0x4e, 0x9f, 0x94, 0xba, 0x29, 0x15, 0x7f, 0xc8, 0x5f, 0x07, 0xc9, 0xb0, 0x7c, 0xe4, 0xde,
	0xea, 0xa6, 0xe6, 0xa1, 0xa9, 0x6d, 0xcd, 0xbc, 0x66, 0xe1, 0x38, 0x73, 0x52, 0x53, 0x1b, 0x1c,
	0x3e, 0xa6, 0x60, 0x4c, 0xba, 0x44, 0xba, 0xb7, 0x72, 0xd1, 0x12, 0x59, 0xbe, 0x66, 0xe9, 0x4b,
	0xd4, 0x2c, 0x1e, 0x67, 0x4e, 0xca, 0x6a, 0x23, 0x04, 0x1f, 0xe8, 0x4b, 0x24, 0xf7, 0x40, 0xd2,
	0x17, 0x0b, 0x17, 0x2d, 0x74, 0xdf, 0xb0, 0x2d, 0xcd, 0xbf, 0x73, 0x50, 0xb3, 0x44, 0x2c, 0xfa,
	0x6a, 0x6c, 0x4e, 0xed, 0x80, 0x6c, 0x72, 0xe7, 0x20, 0xb5, 0xa1, 0x47, 0x01, 0xf2, 0x37, 0x40,
	0x9a, 0x21, 0xd3, 0xd7, 0x35, 0x07, 0xb9, 0x53, 0x64, 0xf9, 0xfa, 0x02, 0x35, 0xcb, 0xc7, 0xe9,
	0x93, 0x7c, 0x37, 0xad, 0x36, 0x08, 0x66, 0x24, 0x10, 0xf2, 0x77, 0x60, 0x87, 0x12, 0x5b, 0xb6,
	0x65, 0xd9, 0xee, 0x52, 0x37, 0x8d, 0xcf, 0xd1, 0xac, 0x09, 0xc7, 0xe9, 0x93, 0x6c, 0x37, 0xad,
	0xca, 0x04, 0x39, 0x08, 0xe3, 0xce, 0x4a, 0x50, 0xf0, 0xec, 0x95, 0x3b, 0x45, 0x67, 0x45, 0xc8,
	0x13, 0x7c, 0xeb, 0x1f, 0x32, 0x50, 0x1f, 0x73, 0x0d, 0xe9, 0xa2, 0xbe, 0x02, 0xa0, 0xdb, 0x9e,
	0xe6, 0x21, 0xf7, 0x16, 0xb9, 0x64, 0x73, 0x94, 0xd5, 0xb2, 0x6e, 0x7b, 0x63, 0x02, 0x90, 0xcf,
	0xa1, 0x2e, 0xa6, 0x44, 0x67, 0x9b, 0x21, 0xb3, 0x7d, 0x14, 0x9b, 0xad, 0x90, 0x4a, 0xe6, 0x5a,
	0xf3, 0xc2, 0x9f, 0xf2, 0x0f, 0xa1, 0x44, 0xf6, 0xe9, 0xd4, 0x36, 0x9b, 0x59, 0xc2, 0x7e, 0xbc,
	0x8d, 0x7d, 0xc4, 0xe8, 0x54, 0xc1, 0x21, 0xbf, 0x0f, 0x05, 0xbc, 0x21, 0x57, 0x5e, 0x33, 0x97,
	0x68, 0x68, 0xc1, 0x3b, 0x26, 0x54, 0x2a, 0xa3, 0x96, 0x87, 0xd0, 0xf0, 0xd0, 0x8f, 0x57, 0xc8,
	0x9a, 0x62, 0xdd, 0x97, 0x78, 0xd7, 0xe4, 0xc9, 0xee, 0x7b, 0x63, 0xab, 0x00, 0x41, 0xde, 0xc7,
	0x9b, 0xb7, 0xee, 0x45, 0xbe, 0x5b, 0xbf, 0x4a, 0x43, 0xfd, 0x5c, 0xbf, 0x31, 0xd1, 0x08, 0x21,
	0x97, 0x5a, 0xaf, 0x05, 0x35, 0x73, 0x6a, 0x6a, 0x33, 0x72, 0x7a, 0x34, 0x63, 0xc6, 0x0c, 0x58,
	0x31, 0xa7, 0x26, 0x3d, 0x51, 0xbd, 0x99, 0xfc, 0x55, 0xa8, 0x62, 0x9a, 0x67, 0xb6, 0xe7, 0x93,
	0x9d, 0x95, 0x11, 0x24, 0x5d, 0x06, 0xc2, 0x8b, 0x80, 0x49, 0x8c, 0x39, 0x21, 0xc8, 0xd2, 0x45,
	0x30, 0xa7, 0x66, 0x8f, 0x00, 0xb0, 0x04, 0x77, 0xe9, 0x07, 0x12, 0x72, 0x54, 0x82, 0xbb, 0xf4,
	0xc3, 0x12, 0x30, 0x09, 0x93, 0x90, 0xa7, 0x12, 0xdc, 0xa5, 0x1f, 0x95, 0xe0, 0xdd, 0x79, 0x33,
	0xe4, 0x4d, 0x5d, 0x72, 0x10, 0xa8, 0x84, 0x31, 0x03, 0xb5, 0x7e, 0x91, 0x01, 0xe9, 0xec, 0x72,
	0x34, 0x40, 0xc6, 0xe2, 0xd9, 0x8d, 0xcd, 0xe6, 0x17, 0xd7, 0x3d, 0xbd, 0x5d, 0x77, 0x47, 0x9f,
	0xcd, 0x5c, 0x36, 0x39, 0xa2, 0x3b, 0x01, 0xc8, 0x07, 0x50, 0xc4, 0x68, 0xdd, 0xb3, 0xc8, 0xbc,
	0x6a, 0x6a, 0xc1, 0x9c, 0x9a, 0x6d, 0xcf, 0x92, 0xdf, 0xe3, 0x0e, 0x29, 0x79, 0x55, 0xcf, 0x16,
	0xce, 0x18, 0x79, 0x9e, 0x61, 0x5b, 0x61, 0xa7, 0x24, 0xe6, 0x49, 0x47, 0x0b, 0xcd, 0x53, 0x8c,
	0x86, 0xd1, 0x78, 0x34, 0x7a, 0xd6, 0x0b, 0xee, 0xd2, 0xc7, 0xa3, 0x1d, 0x42, 0xe9, 0xd6, 0x9d,
	0x87, 0x8f, 0x76, 0xf1, 0xd6, 0x9d, 0x93, 0x23, 0x7d, 0x09, 0x15, 0xcc, 0xab, 0xcd, 0xf5, 0xa5,
	0x61, 0xde, 0xb1, 0xd3, 0xfc, 0xc6, 0x56, 0x75, 0xda, 0xb3, 0x99, 0x8b, 0x3c, 0xef, 0x82, 0x50,
	0xab, 0x80, 0x59, 0xe9, 0xef, 0xd6, 0x2d, 0x34, 0xae, 0x0c, 0xeb, 0x39, 0xdd, 0x86, 0xd4, 0x7e,
	0x0f, 0xa1, 0x14, 0xb3, 0x9d, 0xf8, 0x96, 0xf7, 0xa1, 0xc0, 0x96, 0x8b, 0x1a, 0x8d, 0x7d, 0xc9,
	0xdf, 0xe2, 0x86, 0xa1, 0x47, 0xe5, 0x30, 0xa6, 0x49, 0x30, 0x04, 0x77, 0xd4, 0x7f, 0x98, 0x86,
	0x52, 0x5f, 0x67, 0x4e, 0xfa, 0x55, 0x80, 0xa5, 0x3e, 0xd5, 0xa9, 0x92, 0x6c, 0xcc, 0x10, 0x04,
	0x6b, 0x64, 0x58, 0x7e, 0x78, 0x5c, 0xf1, 0x2d, 0xcb, 0x90, 0xbb, 0x35, 0x75, 0xbe, 0x50, 0xe4,
	0xb7, 0xfc, 0xcd, 0xe8, 0x32, 0x1d, 0xc4, 0xb4, 0xe9, 0xeb, 0xd3, 0x48, 0xd0, 0xf8, 0x79, 0x1a,
	0x4a, 0x6d, 0xd7, 0xa1, 0xba, 0x3c, 0x82, 0x32, 0x5d, 0xa8, 0x40, 0x95, 0x00, 0x20, 0x4b, 0x90,
	0x5d, 0xea, 0x53, 0xa6, 0x04, 0xfe, 0x19, 0xd1, 0x2d, 0x1b, 0xd3, 0xed, 0x1e, 0x3d, 0xda, 0xae,
	0x13, 0xd9, 0x27, 0x4d, 0xc0, 0xeb, 0x1b, 0x3a, 0x0c, 0xfc, 0xb3, 0xf5, 0x67, 0x69, 0x28, 0x5d,
	0xe9, 0x8b, 0xfb, 0xd7, 0xa7, 0x09, 0x45, 0x53, 0x5f, 0x84, 0x0c, 0xc5, 0x3f, 0xe5, 0xb7, 0xe0,
	0x01, 0x09, 0x21, 0x73, 0x7d, 0x8a, 0xbc, 0x95, 0x33, 0xb5, 0x57, 0x96, 0xcf, 0x8c, 0xb6, 0x89,
	0x90, 0x5b, 0x50, 0x0d, 0x03, 0x9b, 0xb9, 0xe3, 0xec, 0x49, 0x59, 0x8d, 0xc0, 0x5a, 0xff, 0x94,
	0x86, 0x72, 0xdf, 0xe4, 0x5a, 0x1d, 0x41, 0x79, 0x66, 0x2f, 0x75, 0xc3, 0x0a, 0x3c, 0x4a, 0x89,
	0x02, 0x7a, 0x33, 0xb9, 0x0d, 0x55, 0x86, 0xa4, 0xf6, 0xc8, 0x24, 0x1e, 0x1f, 0x2c, 0xac, 0x43,
	0xc8, 0xa8, 0x59, 0x2a, 0xb3, 0xe0, 0xe3, 0x85, 0x76, 0xfe, 0x01, 0x00, 0xfe, 0xad, 0x85, 0x8d,
	0xfd, 0x28, 0x41, 0x78, 0xcf, 0xf2, 0xe7, 0x54, 0x74, 0xd9, 0xe0, 0x3f, 0x5b, 0x1f, 0xc1, 0xbe,
	0xb2, 0xf6, 0x91, 0xe5, 0x19, 0x37, 0x26, 0xc2, 0x11, 0xc4, 0x98, 0xb2, 0xf4, 0x43, 0x82, 0xec,
	0x73, 0x74, 0xc7, 0x26, 0x83, 0x7f, 0xca, 0xbb, 0x90, 0xbf, 0xd5, 0xcd, 0x15, 0x37, 0x2e, 0xfd,
	0x68, 0xfd, 0x34, 0x0d, 0xa0, 0xda, 0x2b, 0x9e, 0xb5, 0x7c, 0x15, 0xaa, 0x33, 0xe4, 0xf9, 0x9a,
	0x85, 0xfc, 0xdf, 0xb7, 0xdd, 0xe7, 0xdc, 0xff, 0x60, 0xd8, 0x80, 0x82, 0xe4, 0x0f, 0x44, 0x78,
	0xa0, 0x96, 0xf8, 0x4a, 0x4c, 0x59, 0x2a, 0xcd, 0xf2, 0xdd, 0xbb, 0x58, 0x7c, 0x08, 0xaf, 0x7d,
	0x36, 0xba, 0xf6, 0xad, 0xbf, 0x49, 0xc3, 0x8e, 0x72, 0xeb, 0x90, 0x40, 0xfd, 0x6e, 0x48, 0x9f,
	0x6f, 0x45, 0xb3, 0xa8, 0xc3, 0xa4, 0xb1, 0x22, 0xfb, 0xf0, 0x08, 0xca, 0xde, 0x9d, 0xe7, 0xa3,
	0x25, 0x5e, 0x4a, 0x76, 0xde, 0x28, 0xa0, 0x37, 0xc3, 0x46, 0xb9, 0xb5, 0x0c, 0xb6, 0x73, 0xf0,
	0x4f, 0xec, 0xa6, 0x2c, 0xb4, 0xc6, 0xae, 0xde, 0x61, 0x5e, 0xbe, 0x88, 0xbf, 0xbb, 0xb6, 0x23,
	0xd7, 0x21, 0xe3, 0xce, 0xd8, 0x66, 0xce, 0xb8, 0x33, 0xf2, 0xed, 0x33, 0x47, 0x9e, 0x71, 0xfd,
	0xd6, 0x1f, 0xa5, 0x61, 0xb7, 0x3d, 0xf5, 0x8d, 0x5b, 0x74, 0x61, 0xda, 0xf6, 0xcc, 0x34, 0x3c,
	0xff, 0x7f, 0x47, 0x67, 0xec, 0x35, 0x7c, 0xc4, 0xf5, 0x25, 0xbf, 0x5b, 0xff, 0x1c, 0xb2, 0xdf,
	0xe3, 0xdf, 0x9a, 0xfd, 0xea, 0x90, 0xd1, 0xe7, 0x6c, 0xed, 0x32, 0xfa, 0x1c, 0x7b, 0x54, 0x6f,
	0x75, 0x63, 0x21, 0x9f, 0xe9, 0xc2, 0xbe, 0x22, 0x56, 0xcd, 0x27, 0x59, 0xb5, 0x10, 0xb3, 0x6a,
	0x51, 0x58, 0xf5, 0x2f, 0x0b, 0x90, 0xa7, 0xaa, 0xd7, 0x21, 0x23, 0x4e, 0x63, 0xc6, 0x98, 0xc9,
	0x1d, 0xbc, 0x35, 0x49, 0xd8, 0xe7, 0xe7, 0x30, 0x7d, 0x52, 0xd9, 0xd8, 0x7d, 0xf1, 0x3c, 0xbc,
	0x9b, 0xc2, 0xbb, 0x57, 0xc0, 0xe4, 0x0f, 0xa1, 0x2c, 0x88, 0x49, 0xaa, 0x5b, 0x79, 0xe7, 0x95,
	0x6d, 0xe9, 0x09, 0x17, 0x10, 0x70, 0xc8, 0xff, 0x0f, 0x60, 0x8a, 0x33, 0x12, 0xcd, 0x41, 0xc8,
	0x25, 0x49, 0xf1, 0x26, 0x7f, 0x34, 0x65, 0xc1, 0xfc, 0x53, 0x0e, 0xc1, 0x93, 0xb8, 0x59, 0x38,
	0x9a, 0xc5, 0x82, 0x3e, 0x49, 0x90, 0x36, 0x27, 0x11, 0x4f, 0x0b, 0xf0, 0x24, 0x6e, 0x16, 0x0e,
	0x87, 0xc9, 0x6d, 0xa8, 0x98, 0x86, 0xf5, 0x5c, 0x63, 0xe7, 0xb0, 0x40, 0x84, 0xbc, 0xba, 0x35,
	0x6e, 0x71, 0x19, 0x60, 0x0a, 0x90, 0xfc, 0x01, 0x14, 0x7d, 0x7a, 0xd7, 0x68, 0x16, 0x09, 0xfb,
	0x51, 0x8c, 0x3d, 0x7c, 0x13, 0xe9, 0xa6, 0x54, 0x4e, 0x2d, 0xbf, 0x0f, 0xe5, 0xa5, 0x3e, 0x65,
	0x6b, 0x50, 0x22, 0xac, 0x09, 0x31, 0x8a, 0xb3, 0x95, 0x96, 0x2c, 0x5e, 0x61, 0x3e, 0xdd, 0x75,
	0x18, 0x5f, 0x39, 0x91, 0x8f, 0xc7, 0x31, 0xcc, 0xa7, 0xb3, 0xf8, 0x82, 0xf9, 0x4c, 0x7d, 0xc1,
	0xf8, 0x20, 0x91, 0x8f, 0x47, 0x17, 0xcc, 0x67, 0xea, 0x0b, 0xca, 0xf7, 0x3d, 0x80, 0x65, 0xc0,
	0x58, 0x21, 0x8c, 0xcd, 0x04, 0xbf, 0x2a, 0x16, 0x69, 0x29, 0x58, 0x55, 0x90, 0x90, 0xf0, 0xaa,
	0x1a, 0xc2, 0x04, 0xcd, 0x2a, 0x11, 0xf0, 0xb5, 0x98, 0x80, 0x64, 0xe7, 0xdb, 0x4d, 0xa9, 0x8d,
	0x40, 0x00, 0xdd, 0xcd, 0x3f, 0x84, 0x8a, 0x8b, 0x0f, 0x1b, 0xd3, 0xa7, 0x46, 0xc4, 0x25, 0x1e,
	0x47, 0xb1, 0x5a, 0xae, 0x38, 0x9c, 0x67, 0x05, 0xc8, 0xcd, 0x74, 0x5f, 0x6f, 0x21, 0xa8, 0xf1,
	0x3c, 0xb0, 0x6d, 0x22, 0xd7, 0x97, 0xbf, 0x01, 0x0f, 0xd0, 0xda, 0x41, 0x53, 0x1f, 0xcd, 0xe2,
	0x49, 0xa3, 0xc4, 0x11, 0x22, 0x73, 0x7c, 0x13, 0x1a, 0xfa, 0xd4, 0x5f, 0xe9, 0x1b, 0xb9, 0x71,
	0x9d, 0x82, 0x39, 0x61, 0x6b, 0x1f, 0x76, 0xcf, 0x6d, 0x6b, 0x6e, 0x2c, 0xf0, 0x69, 0x22, 0x17,
	0x28, 0x32, 0x5a, 0xcb, 0x83, 0xda, 0x95, 0x71, 0x8b, 0x2c, 0xe4, 0x79, 0x74, 0xf8, 0x37, 0xa1,
	0x21, 0x86, 0xd7, 0x17, 0xc8, 0xf2, 0x71, 0xda, 0x81, 0xa3, 0x6d, 0x9d, 0x83, 0xdb, 0x04, 0x2a,
	0xbf, 0x06, 0x35, 0x36, 0x34, 0x23, 0xcb, 0xd0, 0xa0, 0x4c, 0x81, 0x8c, 0x68, 0x17, 0xf2, 0xba,
	0x69, 0xdc, 0xd2, 0xe8, 0x50, 0x52, 0xe9, 0x47, 0xeb, 0x13, 0x68, 0x04, 0x66, 0xa6, 0xc3, 0x6e,
	0x06, 0xb7, 0x87, 0x50, 0xe2, 0x23, 0x72, 0xaf, 0xc5, 0xbf, 0xb1, 0x97, 0xa2, 0xc3, 0x30, 0xcf,
	0xc5, 0xbe, 0x5a, 0xff, 0x92, 0x86, 0x46, 0x07, 0x39, 0xa6, 0x7d, 0x87, 0x6f, 0x9b, 0x54, 0xf2,
	0xff, 0x87, 0x87, 0x62, 0x42, 0x33, 0x81, 0xe3, 0x07, 0x2d, 0x9d, 0x18, 0xf0, 0x02, 0x19, 0x2c,
	0xe0, 0x35, 0xb9, 0x88, 0x38, 0x46, 0xfe, 0x0c, 0x9a, 0xcc, 0x0c, 0x9b, 0xc2, 0x33, 0x2f, 0x27,
	0x7c, 0x9f, 0x0a, 0x88, 0xc3, 0x5b, 0x1f, 0xc1, 0xc1, 0x99, 0xb9, 0x42, 0x8e, 0x6b, 0x58, 0xbe,
	0x8a, 0xac, 0x19, 0x72, 0x0d, 0x6b, 0x41, 0x27, 0xf5, 0x35, 0xa8, 0xcf, 0x75, 0xc3, 0x44, 0x33,
	0x8d, 0x7a, 0x72, 0xbe, 0x48, 0x35, 0x0a, 0x1d, 0x53, 0x60, 0xeb, 0x1f, 0x79, 0x2a, 0x40, 0xb9,
	0xb0, 0xff, 0x75, 0x84, 0xff, 0x75, 0xe4, 0x8f, 0x61, 0x37, 0x64, 0x1a, 0xef, 0x1e, 0xbd, 0x37,
	0xb2, 0x00, 0x39, 0x30, 0x8a, 0xc7, 0xcd, 0xd1, 0x07, 0x59, 0x98, 0x23, 0x10, 0x98, 0x7d, 0x39,
	0x81, 0x12, 0x37, 0x04, 0x17, 0xd7, 0xfa, 0x69, 0x86, 0x64, 0x9a, 0x54, 0xfd, 0x2f, 0x96, 0x69,
	0xbe, 0x0d, 0x3b, 0x62, 0x92, 0xc6, 0x7c, 0xe5, 0x68, 0x34, 0xd7, 0xcc, 0xd3, 0x5c, 0x93, 0xa3,
	0x7a, 0xf3, 0x95, 0x73, 0x4e, 0x72, 0xcd, 0x53, 0x78, 0xc0, 0x66, 0x10, 0xa2, 0x66, 0x55, 0x0f,
	0x8a, 0x08, 0x68, 0xdf, 0x83, 0xfd, 0x40, 0xb6, 0x48, 0x46, 0xb5, 0x95, 0xd3, 0x2c, 0x92, 0xe5,
	0x10, 0xe6, 0xed, 0x09, 0xe4, 0xb5, 0x23, 0x7f, 0x1b, 0x76, 0xf9, 0x08, 0x11, 0x9e, 0x12, 0xe1,
	0x61, 0xf6, 0x0b, 0x73, 0xb4, 0x7e, 0x19, 0x2e, 0x3a, 0x50, 0x63, 0xfc, 0xee, 0x17, 0x1d, 0x7e,
	0x00, 0x05, 0x17, 0xe9, 0x9e, 0x6d, 0xb1, 0x14, 0xf8, 0xb5, 0x6d, 0xbc, 0x64, 0x42, 0x2a, 0x21,
	0x55, 0x19, 0xcb, 0x97, 0x5f, 0x79, 0xf8, 0x49, 0x06, 0xf6, 0x45, 0x18, 0xef, 0x1b, 0xde, 0x52,
	0xf7, 0xa7, 0xcf, 0xa8, 0x29, 0x7f, 0x83, 0x1b, 0x7a, 0xf8, 0xd2, 0x17, 0xad, 0x2e, 0xa0, 0xb5,
	0xb3, 0x51, 0x5d, 0x40, 0x6b, 0x27, 0x2c, 0x01, 0x93, 0x44, 0xab, 0x0b, 0x68, 0xed, 0x6c, 0xa9,
	0x4f, 0x14, 0xee, 0xab, 0x4f, 0x14, 0xef, 0xab, 0x4f, 0x94, 0x36, 0xeb, 0x13, 0x7f, 0x97, 0x85,
	0x66, 0x28, 0x11, 0xf9, 0xc2, 0x56, 0xf8, 0x4d, 0xeb, 0x14, 0xd1, 0x8a, 0x43, 0xee, 0x05, 0x15,
	0x87, 0x7c, 0xa4, 0xe2, 0xa0, 0x80, 0x08, 0x3a, 0x2c, 0xc8, 0x16, 0x5e, 0xaa, 0xd0, 0x51, 0xe3,
	0x5c, 0x34, 0xf8, 0xb7, 0x81, 0x05, 0x25, 0x26, 0xa4, 0xf8, 0x52, 0x42, 0x2a, 0x94, 0x87, 0x8a,
	0x38, 0x84, 0x12, 0x56, 0x91, 0x18, 0x86, 0x1a, 0x16, 0xab, 0x4c, 0x6a, 0x1f, 0xe1, 0xb2, 0x48,
	0xf9, 0x85, 0x65, 0x11, 0xf8, 0xc2, 0x65, 0x91, 0x5f, 0xa7, 0xe1, 0x58, 0x38, 0x84, 0x20, 0x0b,
	0x8c, 0x2e, 0xe0, 0x17, 0x29, 0x94, 0x5c, 0x84, 0x92, 0x0d, 0x63, 0x1e, 0xf1, 0xd6, 0x2f, 0x28,
	0x9a, 0x48, 0x81, 0xd7, 0x64, 0x17, 0xc1, 0x33, 0x91, 0x87, 0x08, 0x29, 0xb9, 0xfb, 0xa4, 0xd4,
	0xb9, 0x37, 0xa5, 0x0c, 0xad, 0xff, 0xcc, 0x40, 0x8d, 0xb8, 0x55, 0xe4, 0xb2, 0x5c, 0xe4, 0xff,
	0x5c, 0xb5, 0x7c, 0xa3, 0x04, 0x5e, 0x48, 0x2e, 0x81, 0x27, 0x15, 0xd6, 0x8b, 0xc9, 0x85, 0xf5,
	0x2f, 0xaf, 0x5a, 0x7e, 0x96, 0xc3, 0xd7, 0xaf, 0xd6, 0xfb, 0x50, 0x7d, 0x82, 0xee, 0x9e, 0xea,
	0xe6, 0x0a, 0x8d, 0x74, 0xc3, 0x7d, 0xe9, 0xb2, 0xc2, 0xaf, 0x72, 0x00, 0x23, 0xd7, 0xbe, 0x41,
	0xc2, 0x5d, 0x84, 0x43, 0x1f, 0xb1, 0x73, 0x96, 0xb8, 0x3c, 0x1e, 0xf0, 0x48, 0x88, 0x12, 0x71,
	0x8e, 0x98, 0x35, 0xab, 0x96, 0x45, 0x74, 0xc3, 0x39, 0x8c, 0x90, 0x30, 0x37, 0x6d, 0xdd, 0x27,
	0x36, 0x4e, 0x07, 0xa7, 0xf7, 0x02, 0x03, 0xf1, 0x40, 0x4c, 0x0a, 0x25, 0xca, 0x13, 0x22, 0x76,
	0x3a, 0x29, 0xc9, 0xfb, 0x70, 0x10, 0xe4, 0x31, 0x86, 0x37, 0x75, 0x91, 0xc8, 0xca, 0xf1, 0x45,
	0xaa, 0xac, 0xee, 0x89, 0x4c, 0x85, 0x61, 0xe9, 0xa9, 0x7e, 0x07, 0xf6, 0x78, 0xb2, 0x12, 0xe5,
	0x2a, 0x12, 0xae, 0x1d, 0x96, 0x8e, 0x44, 0x78, 0x0e, 0x49, 0x4c, 0xbc, 0x21, 0x95, 0x6a, 0xe6,
	0x09, 0xc8, 0x77, 0x6f, 0x86, 0xe7, 0xeb, 0xf9, 0xfa, 0x02, 0x85, 0x7d, 0x41, 0x99, 0x40, 0xc8,
	0xa2, 0x9f, 0x43, 0xe3, 0x39, 0xba, 0xd3, 0x88, 0x35, 0x35, 0x47, 0x37, 0x5c, 0xaf, 0x09, 0xc7,
	0xd9, 0x84, 0x7b, 0x5a, 0x78, 0x79, 0xd4, 0xda, 0xf3, 0xd0, 0x97, 0x87, 0x7d, 0xa5, 0xc1, 0xae,
	0xf2, 0x15, 0x76, 0x92, 0xe9, 0x45, 0xfe, 0x35, 0x10, 0x76, 0xd3, 0x7c, 0xb4, 0xa6, 0xd7, 0x9b,
	0xb2, 0x2a, 0x16, 0x69, 0x82, 0xd6, 0xbe, 0xfc, 0x15, 0x60, 0x76, 0xa3, 0x24, 0x35, 0x42, 0xc2,
	0x16, 0x89, 0x13, 0xd0, 0xd9, 0x99, 0xfa, 0x0d, 0x32, 0x9b, 0x75, 0x4a, 0x40, 0x40, 0x57, 0x18,
	0x22, 0x9f, 0x80, 0x14, 0x5e, 0x76, 0x6d, 0xa9, 0xaf, 0x9b, 0x0d, 0xb2, 0xb2, 0xf5, 0xd0, 0xd2,
	0xf7, 0xf5, 0xb5, 0xfc, 0x16, 0xc8, 0xd1, 0xe5, 0x25, 0xb4, 0x12, 0x59, 0x3d, 0x29, 0xb2, 0xc4,
	0x7d, 0x7d, 0xdd, 0xfa, 0x11, 0xec, 0xd0, 0xfb, 0xc9, 0x46, 0x50, 0xba, 0xe1, 0x29, 0x70, 0xe8,
	0x6d, 0x40, 0xc0, 0xe8, 0xdb, 0xc0, 0xd4, 0x36, 0x4d, 0x34, 0xf5, 0x6d, 0x37, 0xa8, 0x70, 0x54,
	0x04, 0xac, 0x37, 0x6b, 0xfd, 0x75, 0x1a, 0x6a, 0x5d, 0xa4, 0xcf, 0x5c, 0xdb, 0x5e, 0x52, 0xb9,
	0x7b, 0x50, 0x20, 0x9e, 0x45, 0x67, 0x12, 0xf3, 0xf8, 0xab, 0x2d, 0xc0, 0x37, 0x7c, 0xeb, 0xe3,
	0xaf, 0xb3, 0xc4, 0xe3, 0x9a, 0x4d, 0x3e, 0xae, 0x1f, 0x41, 0xed, 0x19, 0x1b, 0x89, 0x9e, 0x55,
	0xea, 0x06, 0xe3, 0x4b, 0xcc, 0xb5, 0x21, 0x07, 0xb5, 0xfa, 0x2c, 0xf4, 0xd5, 0xfa, 0x0f, 0x5a,
	0x8a, 0xa6, 0x7a, 0x7e, 0xd9, 0xa5, 0xe8, 0x47, 0x50, 0x5e, 0xda, 0xb7, 0x88, 0x26, 0xb5, 0x39,
	0x82, 0x08, 0x00, 0xa1, 0xc4, 0x14, 0xc3, 0x34, 0x3e, 0x37, 0x12, 0x95, 0xd3, 0x3c, 0x31, 0xed,
	0xdb, 0xb7, 0xa8, 0xc7, 0x30, 0xf8, 0x04, 0x89, 0x45, 0x5e, 0xea, 0xeb, 0x80, 0xa5, 0x40, 0x58,
	0x44, 0xe6, 0xdd, 0xd7, 0xd7, 0x9c, 0xa7, 0xf5, 0x94, 0x94, 0xb7, 0xe9, 0xfc, 0xbe, 0xc4, 0xf2,
	0x76, 0xeb, 0x6f, 0x73, 0xb4, 0x00, 0x7c, 0x7f, 0x34, 0x8c, 0x14, 0x87, 0x33, 0xb1, 0xe2, 0xf0,
	0x01, 0x14, 0x49, 0x95, 0xc1, 0x98, 0xf1, 0x2c, 0x06, 0x7f, 0xf6, 0x66, 0xb2, 0x1a, 0x9a, 0x6b,
	0xa4, 0x7c, 0x9c, 0x7b, 0xa9, 0xf2, 0xb1, 0xb0, 0x45, 0x08, 0x28, 0x0f, 0x60, 0x87, 0x7b, 0xa0,
	0xb0, 0xc4, 0xfc, 0x4b, 0x49, 0x64, 0xf7, 0x94, 0xb0, 0xbc, 0x20, 0xce, 0x17, 0x22, 0x71, 0xfe,
	0x2a, 0x7c, 0x09, 0x0a, 0x6a, 0xd3, 0xc5, 0x97, 0xa8, 0x4d, 0x3f, 0x08, 0x9d, 0x6b, 0x0a, 0x92,
	0xbb, 0xc1, 0x15, 0x29, 0x90, 0x55, 0x7a, 0x09, 0x59, 0x0d, 0xe1, 0xfd, 0x99, 0xa4, 0x23, 0x28,
	0x3b, 0x08, 0xb9, 0x9a, 0x69, 0x58, 0xcf, 0x99, 0xc7, 0x2c, 0x61, 0x00, 0x4e, 0x13, 0xb0, 0xaf,
	0x11, 0x48, 0x7e, 0x93, 0x04, 0x5a, 0xdd, 0xe0, 0x34, 0xec, 0xd6, 0xf9, 0x3d, 0x38, 0x14, 0xd3,
	0xdb, 0x60, 0xa1, 0x7e, 0x52, 0x5c, 0xd4, 0x46, 0x11, 0xd6, 0xd6, 0x1b, 0x50, 0x9e, 0x20, 0x8f,
	0xd5, 0x0a, 0x0e, 0xa1, 0xe4, 0xe3, 0x6b, 0x2b, 0x8e, 0x57, 0x78, 0xd3, 0xe4, 0xd4, 0x22, 0xfe,
	0xee, 0x59, 0x7e, 0xeb, 0xd7, 0x79, 0x78, 0x20, 0x52, 0x30, 0x9e, 0xa6, 0x60, 0x27, 0xe7, 0xaf,
	0xb5, 0x95, 0x65, 0x4c, 0x75, 0xcf, 0xd7, 0x1c, 0x7d, 0xfa, 0x1c, 0xf9, 0x1e, 0x63, 0x95, 0xfc,
	0xf5, 0x35, 0x45, 0x8c, 0x28, 0x1c, 0x9f, 0x2f, 0x7f, 0xad, 0xdd, 0xb8, 0xb6, 0x3e, 0x8b, 0xd0,
	0x67, 0x08, 0xbd, 0xec, 0xaf, 0xcf, 0x38, 0x2a, 0xca, 0xb1, 0x5c, 0x99, 0x7e, 0x74, 0x84, 0x2c,
	0xe7, 0xe8, 0x73, 0x14, 0xe7, 0xc0, 0x53, 0x58, 0x6b, 0x37, 0x77, 0x3e, 0xa2, 0x29, 0x18, 0x9e,
	0xc2, 0xfa, 0x0c, 0x7f, 0x62, 0x65, 0xdd, 0x4d, 0x65, 0xf3, 0x54, 0x59, 0x37, 0x41, 0x59, 0x37,
	0x49, 0xd9, 0x02, 0x1d, 0xda, 0x4d, 0x54, 0xd6, 0x4d, 0x52, 0xb6, 0xc8, 0x39, 0x92, 0x94, 0x75,
	0xb9, 0xb2, 0x25, 0xaa, 0xac, 0xcb, 0x94, 0x3d, 0x01, 0xc9, 0x5f, 0x6b, 0xc8, 0x75, 0x6d, 0x57,
	0x08, 0x2a, 0x13, 0x92, 0xba, 0xbf, 0x56, 0x30, 0x98, 0x0b, 0xa1, 0x6b, 0x80, 0x23, 0xb8, 0xee,
	0xce, 0x04, 0x2d, 0xf0, 0x35, 0xe8, 0x50, 0x04, 0xa7, 0x3e, 0x01, 0xc9, 0x8d, 0xcb, 0xad, 0x50,
	0xb9, 0xee, 0x86, 0x5c, 0x77, 0x53, 0x6e, 0x95, 0x9b, 0x2b, 0x26, 0xf7, 0xeb, 0x20, 0xe9, 0xa6,
	0xb1, 0xb0, 0x48, 0xee, 0x47, 0xc4, 0x7b, 0xcd, 0x1a, 0xa1, 0x6d, 0x08, 0x38, 0x11, 0xef, 0xe1,
	0x3c, 0x61, 0x3e, 0xf5, 0x38, 0x51, 0x9d, 0x10, 0x95, 0xe7, 0x53, 0x8f, 0xa1, 0x5f, 0x83, 0x9a,
	0x77, 0xb7, 0xbc, 0xb1, 0x4d, 0x4e, 0xd1, 0x20, 0x14, 0x55, 0x0a, 0x64, 0x44, 0xbb, 0x90, 0x77,
	0x57, 0x96, 0xef, 0x35, 0x25, 0x82, 0xa4, 0x1f, 0xf8, 0xf8, 0x2f, 0x0c, 0x1d, 0x83, 0x1f, 0x10,
	0x30, 0xfb, 0x92, 0xdf, 0x80, 0x1a, 0x6d, 0x7d, 0xe0, 0xd1, 0x4b, 0x3e, 0x4e, 0x9f, 0xe4, 0xbe,
	0x9f, 0x7e, 0xac, 0x56, 0x09, 0x9c, 0x45, 0xaf, 0xd6, 0x5f, 0xa5, 0x01, 0x68, 0xed, 0xa8, 0x67,
	0xcd, 0x6d, 0xbc, 0x3c, 0x53, 0x67, 0xa5, 0xad, 0x3c, 0x56, 0x61, 0xc8, 0xa8, 0xc5, 0xa9, 0xb3,
	0xba, 0xf6, 0x90, 0x8b, 0xe7, 0x80, 0x51, 0xb4, 0xfa, 0x44, 0x36, 0x70, 0x46, 0x2d, 0x4f, 0x9d,
	0x15, 0xe5, 0xe6, 0x9c, 0xc6, 0xcc, 0xa4, 0x7e, 0x9a, 0x72, 0xf6, 0x66, 0x26, 0xc2, 0x29, 0xc6,
	0x12, 0x2d, 0x6d, 0xf7, 0x0e, 0xcb, 0x9d, 0xb1, 0x3d, 0x0a, 0x14, 0x74, 0xed, 0x21, 0x12, 0xd0,
	0x19, 0x81, 0x6f, 0xfb, 0x2c, 0xfa, 0xe4, 0x54, 0xc6, 0x34, 0xc1, 0xa0, 0xd6, 0x1f, 0xa7, 0xa1,
	0x32, 0x72, 0xed, 0x29, 0xf2, 0x3c, 0xa2, 0xe8, 0x57, 0xa1, 0xea, 0xd0, 0x4f, 0x2d, 0x7c, 0x77,
	0x65, 0x30, 0x7e, 0x4d, 0x13, 0x73, 0xc9, 0xbc, 0x68, 0x2e, 0xd9, 0xf8, 0x5c, 0xee, 0x53, 0xb8,
	0xd5, 0x81, 0xd2, 0x85, 0x61, 0x22, 0xa2, 0xc9, 0x11, 0x94, 0xe7, 0x86, 0x89, 0xc2, 0x6a, 0x94,
	0x30, 0x60, 0xc0, 0xe2, 0x0e, 0x41, 0x7a, 0xc6, 0xe7, 0x88, 0x1d, 0x7a, 0x82, 0x1c, 0x1b, 0x9f,
	0x23, 0xf2, 0xde, 0x33, 0xbe, 0xf3, 0x54, 0x44, 0x3b, 0x4e, 0x84, 0x8b, 0xf9, 0x3e, 0x54, 0xf8,
	0xf3, 0x8d, 0x35, 0xb7, 0xc9, 0x35, 0x68, 0xb3, 0xcc, 0x1c, 0x2c, 0x9a, 0x0a, 0x5e, 0xb0, 0x80,
	0x1f, 0x06, 0x76, 0x21, 0xcc, 0x19, 0x92, 0x6f, 0xc6, 0x1b, 0x97, 0x42, 0x96, 0x14, 0x36, 0x23,
	0xec, 0xef, 0x31, 0x7d, 0x09, 0x6f, 0x96, 0xf0, 0xc6, 0x0b, 0xf5, 0x7c, 0xe2, 0x74, 0x22, 0xf8,
	0x57, 0xeb, 0x67, 0x69, 0xc8, 0x4e, 0xf4, 0x05, 0xce, 0x3f, 0x42, 0xb5, 0x8e, 0x1c, 0x2b, 0x52,
	0x54, 0x0c, 0xcb, 0x7f, 0xff, 0x3d, 0x9a, 0x05, 0x93, 0xc9, 0x64, 0xbb, 0x29, 0x15, 0x08, 0x90,
	0xa4, 0xb9, 0x98, 0x84, 0xa6, 0x8b, 0xfc, 0x0e, 0x92, 0x3e, 0xc9, 0x60, 0x12, 0x02, 0xa4, 0x24,
	0xaf, 0x41, 0xd5, 0xf3, 0x5d, 0xc3, 0x5a, 0x30, 0x1a, 0x7e, 0x63, 0xab, 0x50, 0x28, 0x21, 0x3a,
	0x2b, 0xb2, 0x5b, 0x4c, 0xeb, 0x4f, 0xd3, 0x90, 0xbf, 0x30, 0x90, 0x39, 0xfb, 0x9d, 0xd1, 0xe8,
	0x7b, 0x50, 0x23, 0x37, 0xa9, 0x91, 0x6b, 0x3b, 0xc8, 0xf5, 0xef, 0x12, 0x15, 0x13, 0xb7, 0xb0,
	0x42, 0xf8, 0x16, 0xf6, 0xf3, 0x02, 0x3c, 0xda, 0x08, 0x43, 0xd7, 0xbe, 0x61, 0x1a, 0x9f, 0x93,
	0x8b, 0x1e, 0xbe, 0x55, 0xe1, 0x88, 0x14, 0x40, 0x58, 0x34, 0xaa, 0xf9, 0xeb, 0x18, 0x99, 0x1b,
	0x25, 0xa3, 0xfb, 0xb1, 0xe6, 0x46, 0xc8, 0x5e, 0xa7, 0xd2, 0x78, 0xc8, 0x70, 0x78, 0xe4, 0xa9,
	0x06, 0xb1, 0xcd, 0xe1, 0xbe, 0x3a, 0x14, 0x2a, 0x1c, 0x1e, 0x7b, 0xea, 0xe1, 0x98, 0x26, 0x28,
	0x43, 0x21, 0xc2, 0xe1, 0x01, 0xa8, 0x1e, 0x8e, 0x65, 0x8e, 0x87, 0x53, 0x71, 0x2c, 0xd3, 0xe1,
	0x01, 0x27, 0xef, 0xaf, 0xcf, 0x1c, 0x4f, 0x3e, 0x86, 0x6a, 0x10, 0x16, 0x1c, 0x1e, 0x5b, 0x80,
	0x87, 0x04, 0xc7, 0x63, 0x2a, 0x0b, 0xb7, 0xed, 0xf0, 0xc8, 0x52, 0x0d, 0x42, 0x01, 0xa5, 0x72,
	0xa3, 0x13, 0xa3, 0xc1, 0xa5, 0xea, 0xc6, 0x26, 0xe6, 0xc6, 0x27, 0x06, 0x3c, 0x58, 0xc4, 0x27,
	0xe6, 0xc6, 0x27, 0x26, 0xc2, 0x4a, 0x7c, 0x62, 0x2e, 0x9d, 0x58, 0x95, 0xb9, 0x6e, 0x3e, 0x31,
	0x37, 0x3c, 0x31, 0x1a, 0x3b, 0xc0, 0x8d, 0x4c, 0xcc, 0x8d, 0x4e, 0xac, 0xce, 0x55, 0x0e, 0x4d,
	0xec, 0x43, 0x38, 0x8a, 0xc7, 0x21, 0xcd, 0x41, 0x2e, 0xf3, 0xfc, 0x2c, 0x96, 0x34, 0x63, 0x21,
	0x69, 0x84, 0x5c, 0x1a, 0x02, 0xe4, 0xef, 0xc0, 0x5e, 0x10, 0x9b, 0xc2, 0x8c, 0x34, 0xce, 0xc8,
	0x22, 0x4c, 0x05, 0x2c, 0x1f, 0x40, 0x33, 0x12, 0xaf, 0xc2, 0x5c, 0x34, 0x0c, 0xed, 0x85, 0x43,
	0x57, 0xc0, 0x88, 0x6d, 0x86, 0xc3, 0x56, 0x98, 0x41, 0x66, 0x36, 0xc3, 0xf0, 0x80, 0xf2, 0x14,
	0x1e, 0xd0, 0x48, 0x16, 0x26, 0xdd, 0xa1, 0xd1, 0x95, 0x22, 0x04, 0x6d, 0xeb, 0x5f, 0x33, 0xf0,
	0x90, 0xbb, 0x43, 0x76, 0x4e, 0xc2, 0x3b, 0xfa, 0x24, 0xa8, 0xa7, 0x20, 0x8d, 0xed, 0xb0, 0x34,
	0xc9, 0xf3, 0xeb, 0x02, 0x3e, 0x21, 0x2b, 0x12, 0xa1, 0x64, 0x4b, 0x96, 0x89, 0x51, 0xaa, 0x84,
	0xf2, 0x5d, 0xd8, 0x27, 0x97, 0x9f, 0xf9, 0x54, 0x8b, 0x9d, 0x3d, 0x7a, 0x83, 0xd8, 0x59, 0xea,
	0xeb, 0xde, 0x7c, 0x3a, 0x89, 0x1c, 0xad, 0x10, 0x53, 0xec, 0x24, 0xe6, 0xc2, 0x4c, 0x6a, 0x84,
	0xe9, 0xbb, 0xd0, 0x8c, 0x68, 0x1f, 0x66, 0xa3, 0xb5, 0xd3, 0xfd, 0xd0, 0x2c, 0xb6, 0x72, 0xc6,
	0x06, 0x2c, 0xc4, 0x38, 0x23, 0x63, 0xb6, 0x7e, 0x51, 0x80, 0x2a, 0x71, 0x57, 0x7d, 0xe4, 0x79,
	0xfa, 0x02, 0xc9, 0xdf, 0x25, 0x25, 0x10, 0xe2, 0xb9, 0xc8, 0xb3, 0x53, 0x65, 0x23, 0xeb, 0x8f,
	0x78, 0x37, 0x55, 0x50, 0xc7, 0x9d, 0x6d, 0xe6, 0x7e, 0x67, 0x9b, 0x7d, 0x09, 0x67, 0x9b, 0x4b,
	0x70, 0xb6, 0xf2, 0x67, 0xb0, 0x8f, 0x6e, 0x1d, 0x5a, 0x30, 0x7b, 0x57, 0x0b, 0x3f, 0xd4, 0xd2,
	0x97, 0xea, 0x56, 0xfc, 0xdd, 0x77, 0xb3, 0x55, 0xa5, 0x9b, 0x52, 0x77, 0x50, 0x04, 0x4c, 0x2f,
	0x2d, 0x61, 0xd1, 0x8f, 0x23, 0xa2, 0xe1, 0x85, 0xa2, 0x1f, 0x27, 0x8b, 0x7e, 0x1c, 0x12, 0xed,
	0xc1, 0xab, 0xe2, 0x4d, 0x88, 0x3e, 0x3d, 0x21, 0xd7, 0x8b, 0xac, 0x15, 0x7d, 0xf6, 0xfe, 0x46,
	0x6c, 0x88, 0x17, 0x85, 0x84, 0x6e, 0x4a, 0x7d, 0x64, 0xbc, 0x28, 0x64, 0x2c, 0xe1, 0x91, 0xc8,
	0x30, 0xf8, 0xd8, 0xe1, 0x21, 0xe9, 0x43, 0xf9, 0xd7, 0xb7, 0xa4, 0x1c, 0x9b, 0x67, 0xac, 0x9b,
	0x52, 0x1f, 0x7a, 0xdb, 0x4f, 0xe0, 0x08, 0x24, 0x9d, 0x34, 0xd9, 0x68, 0x73, 0xde, 0x65, 0xc3,
	0x1e, 0xcf, 0xe3, 0x2f, 0x44, 0x49, 0xbd, 0x38, 0xdd, 0x14, 0xb9, 0x45, 0x86, 0xe1, 0x91, 0x9a,
	0x5c, 0xfe, 0x45, 0x35, 0xb9, 0x42, 0xbc, 0x26, 0x17, 0xaf, 0x2f, 0x15, 0x37, 0xeb, 0x4b, 0xa1,
	0x8a, 0x5b, 0x29, 0x52, 0x71, 0xbb, 0xaf, 0x56, 0x16, 0xc4, 0xfb, 0x25, 0xec, 0x5d, 0x22, 0x0b,
	0xb9, 0xc6, 0x74, 0x84, 0xdc, 0xf9, 0xd2, 0xb6, 0xf8, 0x49, 0x7a, 0x03, 0x72, 0xbe, 0xbe, 0xf0,
	0xd8, 0x29, 0x92, 0xe3, 0xfd, 0x1a, 0xfa, 0x42, 0x25, 0x78, 0xf9, 0x2d, 0x28, 0xcc, 0x71, 0x06,
	0xe3, 0xb1, 0x0c, 0x6e, 0x77, 0x23, 0x0b, 0x43, 0xe6, 0x4c, 0x65, 0x34, 0x2d, 0x1d, 0xca, 0xe4,
	0x00, 0x76, 0x74, 0x5f, 0xff, 0x2d, 0x0d, 0xf1, 0xdf, 0x19, 0x28, 0xe2, 0xb9, 0xf4, 0x6d, 0x4b,
	0xfe, 0x18, 0xe4, 0xcd, 0x3d, 0xcb, 0xf2, 0xd4, 0xe3, 0xfb, 0xf6, 0x69, 0x37, 0x15, 0xea, 0xf7,
	0x13, 0x39, 0xef, 0xef, 0xe1, 0x90, 0x42, 0x76, 0xa4, 0xcb, 0xd2, 0xe1, 0x40, 0x70, 0x26, 0xf1,
	0x8c, 0x25, 0x64, 0xce, 0xdd, 0x94, 0xba, 0x4f, 0xa5, 0x6c, 0xe4, 0xd4, 0x1f, 0x41, 0x71, 0x41,
	0x17, 0x84, 0x35, 0xfc, 0xbc, 0x1e, 0x13, 0x97, 0xb8, 0x5c, 0xdd, 0x94, 0xca, 0xd9, 0xe4, 0x33,
	0xa8, 0xd1, 0xc5, 0x5f, 0x52, 0x1c, 0x6b, 0xfb, 0x39, 0x4a, 0x72, 0x84, 0x01, 0x7b, 0xd5, 0x09,
	0xfb, 0xd1, 0x57, 0x00, 0x7c, 0x63, 0x89, 0x34, 0x72, 0x05, 0xa3, 0x9e, 0x4e, 0x2d, 0x63, 0x48,
	0x07, 0x03, 0x44, 0x87, 0xc8, 0x5f, 0xd4, 0x20, 0x4f, 0xcb, 0x13, 0xdf, 0x85, 0x92, 0x87, 0x6e,
	0x91, 0x6b, 0xf8, 0x77, 0xac, 0x71, 0x21, 0xee, 0x78, 0x09, 0xdd, 0x98, 0xd1, 0xa8, 0x82, 0x9a,
	0x5c, 0x39, 0x0d, 0xd7, 0xf3, 0x35, 0x0f, 0x21, 0x9e, 0xea, 0x95, 0x09, 0x64, 0x8c, 0x90, 0xc5,
	0x1a, 0xb3, 0xb2, 0xa2, 0x31, 0x6b, 0x1f, 0x0a, 0xae, 0x6e, 0xf0, 0xdb, 0x4e, 0x49, 0x65, 0x5f,
	0xf2, 0x8f, 0x60, 0x7f, 0x4a, 0xaa, 0xb4, 0xa4, 0x5d, 0x9b, 0xbe, 0x48, 0xe8, 0x78, 0x48, 0x36,
	0xfd, 0xf8, 0x01, 0x4e, 0x6a, 0x39, 0xe9, 0xa6, 0xd4, 0xdd, 0x69, 0x02, 0x5c, 0xee, 0x42, 0x23,
	0x78, 0xb2, 0xa6, 0x52, 0x0b, 0x2f, 0xee, 0xe6, 0xe2, 0xf2, 0x82, 0xa7, 0x6e, 0x2a, 0xe9, 0x06,
	0x0e, 0x83, 0x96, 0x2e, 0x6d, 0xc9, 0x2a, 0xca, 0x4c, 0x66, 0x31, 0xb1, 0xed, 0x27, 0xf9, 0x69,
	0x18, 0x6f, 0xa1, 0x69, 0xf2, 0xa3, 0xf1, 0x33, 0x38, 0x0a, 0xb7, 0x7d, 0xc5, 0x47, 0xa1, 0x6d,
	0x54, 0x6f, 0x6e, 0xef, 0x02, 0x8b, 0x8f, 0xd3, 0x0c, 0x75, 0x83, 0x45, 0x47, 0xfa, 0x49, 0x1a,
	0x5e, 0x0f, 0x0e, 0x58, 0xa8, 0xb2, 0x15, 0x1f, 0x93, 0x06, 0xb6, 0x6f, 0x6d, 0x3b, 0x72, 0x5b,
	0xde, 0x0d, 0xbb, 0x29, 0xf5, 0xd8, 0xb8, 0xef, 0x6d, 0x51, 0x81, 0x3a, 0xaf, 0x9e, 0xb2, 0xc1,
	0x68, 0xa8, 0x8b, 0xef, 0xbf, 0x48, 0x2b, 0x53, 0x37, 0xa5, 0xd6, 0x9e, 0x45, 0x7a, 0x9b, 0x44,
	0xcb, 0x14, 0x95, 0x51, 0xd9, 0xde, 0x32, 0xc5, 0x05, 0xd0, 0x96, 0x29, 0xa1, 0x84, 0xc9, 0x7a,
	0x95, 0x98, 0x80, 0x6a, 0xa2, 0x12, 0x91, 0x86, 0x26, 0xac, 0x84, 0x19, 0xe9, 0x70, 0x7a, 0x02,
	0x52, 0xa8, 0x55, 0x87, 0x0a, 0xaa, 0x25, 0xf6, 0xdb, 0xc5, 0x5a, 0x89, 0x70, 0xe8, 0x99, 0xc5,
	0xba, 0x8b, 0x66, 0x70, 0x18, 0x04, 0x10, 0x97, 0x37, 0xe9, 0x30, 0xa9, 0x75, 0x22, 0x75, 0xe3,
	0xc1, 0x37, 0xb9, 0xa7, 0xa7, 0x9b, 0x52, 0x0f, 0x6e, 0xb6, 0xb4, 0xfb, 0x28, 0x50, 0x17, 0xc9,
	0x00, 0x15, 0xdd, 0x48, 0x9c, 0x79, 0xe4, 0xf9, 0x14, 0xcf, 0x7c, 0x1a, 0x79, 0x4f, 0x65, 0x8d,
	0x7e, 0x54, 0x82, 0xb4, 0xad, 0xd1, 0x8f, 0x33, 0x97, 0x96, 0xfc, 0x15, 0x82, 0x35, 0xfa, 0x51,
	0xbe, 0x07, 0xdb, 0x1a, 0xfd, 0x04, 0x9f, 0xce, 0xab, 0xfb, 0x78, 0xd7, 0xf0, 0xc7, 0x10, 0xca,
	0x2c, 0x27, 0xef, 0x9a, 0xf0, 0xdb, 0x0c, 0xd9, 0x35, 0x91, 0xc7, 0x1a, 0xd6, 0x2f, 0x48, 0x25,
	0xec, 0x6c, 0xeb, 0x17, 0x14, 0xc3, 0x8b, 0x27, 0x00, 0xde, 0x2f, 0x48, 0x19, 0x77, 0xb7, 0xf6,
	0x0b, 0x72, 0x4e, 0xd2, 0x2f, 0x28, 0x36, 0x2a, 0x75, 0xef, 0x94, 0x77, 0x2f, 0x71, 0xa3, 0x06,
	0xaf, 0xa1, 0x78, 0xa3, 0x3a, 0xc1, 0xdb, 0xe8, 0xa7, 0xb0, 0xc7, 0xdc, 0x64, 0xec, 0x84, 0xee,
	0x27, 0xc6, 0xae, 0x84, 0x87, 0x2f, 0x9c, 0x1f, 0x4e, 0x13, 0xde, 0xc3, 0x9e, 0x44, 0xfa, 0x18,
	0xa9, 0xd0, 0x83, 0xc4, 0xbd, 0x1b, 0x6b, 0xb0, 0x8b, 0x36, 0x30, 0x52, 0x61, 0xdf, 0x07, 0x20,
	0xd5, 0x6e, 0x2a, 0xe6, 0xbf, 0x8a, 0x89, 0x06, 0x12, 0xc5, 0x71, 0x6c, 0x20, 0x9f, 0x7f, 0x88,
	0xe0, 0xf4, 0xef, 0x19, 0x80, 0xb6, 0xed, 0xf1, 0x90, 0xf6, 0x08, 0x48, 0x00, 0xf3, 0x7c, 0x7d,
	0xe9, 0xb0, 0xc2, 0x43, 0x00, 0xc0, 0x19, 0x93, 0xed, 0x1a, 0x0b, 0xc3, 0xd2, 0x42, 0x0f, 0x56,
	0x40, 0x41, 0x03, 0xd6, 0xce, 0xc8, 0x08, 0x42, 0x8d, 0x30, 0x38, 0xad, 0xaa, 0x53, 0xb0, 0xe8,
	0x44, 0x09, 0x24, 0x91, 0x47, 0x7e, 0xfa, 0x5e, 0xcb, 0x24, 0x91, 0xc7, 0xfc, 0x37, 0xa1, 0x11,
	0x9c, 0x4b, 0x9a, 0xa0, 0x95, 0xa8, 0x24, 0x01, 0xa6, 0x0f, 0x9a, 0x6f, 0x41, 0x9e, 0xce, 0x9f,
	0x76, 0x0e, 0xef, 0x26, 0x05, 0xd4, 0x6e, 0x4a, 0xa5, 0x44, 0x98, 0x9a, 0x36, 0x8f, 0xe6, 0x12,
	0xa9, 0x79, 0x86, 0x4a, 0x89, 0xe4, 0x77, 0xa1, 0xe4, 0x20, 0x77, 0xae, 0x2d, 0xc9, 0xed, 0x0c,
	0x33, 0xc4, 0xfb, 0x10, 0x58, 0x0e, 0x85, 0x33, 0x0b, 0x87, 0xfe, 0x14, 0x96, 0x7d, 0x02, 0x3b,
	0x6d, 0xdb, 0x63, 0x5d, 0x4d, 0x68, 0xc6, 0x2d, 0x7c, 0x00, 0x45, 0x0f, 0xfd, 0x58, 0xb3, 0x56,
	0x4b, 0x92, 0x62, 0xe5, 0xd4, 0x82, 0x87, 0x7e, 0x3c, 0x58, 0x2d, 0xe5, 0x23, 0x28, 0xeb, 0xb6,
	0xa7, 0x91, 0xf6, 0x2b, 0xe2, 0x1e, 0xaa, 0x6a, 0x49, 0xb7, 0x3d, 0xd2, 0x98, 0x75, 0xfa, 0x07,
	0x59, 0xa8, 0x84, 0xfa, 0xa8, 0xe5, 0x87, 0xb0, 0xdf, 0x51, 0x9e, 0xf6, 0xce, 0x15, 0x6d, 0x3c,
	0x69, 0x4f, 0x14, 0xad, 0x37, 0xd6, 0xda, 0xe7, 0x93, 0xde, 0x53, 0x45, 0x4a, 0xcb, 0x87, 0xb0,
	0x17, 0xc7, 0xa9, 0x4a, 0xbb, 0xf3, 0x99, 0x94, 0x91, 0x8f, 0xe0, 0x20, 0x8e, 0x1a, 0x0c, 0xcf,
	0x87, 0xfd, 0xfe, 0x58, 0xca, 0x26, 0xf1, 0xf5, 0xdb, 0xbd, 0xc1, 0x44, 0xca, 0xc9, 0xaf, 0xc0,
	0xe1, 0xa6, 0xc8, 0xb3, 0xe1, 0x70, 0xd2, 0x1b, 0x5c, 0x4a, 0x79, 0xf9, 0x11, 0x34, 0x23, 0xe8,
	0xe1, 0x70, 0xac, 0x8d, 0x27, 0xc3, 0xf3, 0x27, 0x4a, 0x47, 0x2a, 0xc8, 0xc7, 0xf0, 0x68, 0x03,
	0xfb, 0xf1, 0x75, 0x5b, 0x6d, 0x0f, 0x26, 0xbd, 0x81, 0xd2, 0x91, 0x8a, 0x1b, 0xb3, 0xc1, 0x14,
	0x54, 0xe5, 0x52, 0xa2, 0x6c, 0xae, 0x73, 0x79, 0x63, 0x42, 0x18, 0xdb, 0x51, 0x30, 0x56, 0x82,
	0x44, 0xb1, 0x74, 0x46, 0x15, 0xf9, 0x55, 0x78, 0x98, 0x30, 0x24, 0x9f, 0x52, 0x55, 0xde, 0x07,
	0x39, 0x82, 0x57, 0x54, 0x75, 0xa8, 0x4a, 0xb5, 0xd3, 0x3f, 0xc9, 0x41, 0x91, 0x35, 0x9f, 0xc8,
	0x3b, 0xd0, 0xb8, 0x50, 0xda, 0x93, 0x6b, 0x55, 0xd1, 0xae, 0x07, 0x4f, 0x06, 0xc3, 0x4f, 0x06,
	0x52, 0x4a, 0x6e, 0x40, 0x85, 0x03, 0xaf, 0x86, 0xdf, 0x96, 0xd2, 0xb2, 0x0c, 0x75, 0x0e, 0xb8,
	0x68, 0x9f, 0xa9, 0xbd, 0x73, 0x29, 0x23, 0x1f, 0xc0, 0x8e, 0x20, 0x52, 0xda, 0x17, 0xda, 0x58,
	0x51, 0x9f, 0x2a, 0xaa, 0x94, 0x0d, 0x13, 0x5f, 0xbd, 0xab, 0x74, 0x2e, 0x15, 0x29, 0x17, 0x81,
	0xbd, 0x43, 0x60, 0x79, 0xac, 0x1e, 0x87, 0x8d, 0x47, 0xbd, 0x01, 0x15, 0x23, 0x15, 0xe4, 0x26,
	0xec, 0x46, 0x07, 0xa3, 0x68, 0xa9, 0x88, 0x2d, 0xc5, 0x31, 0xca, 0xa7, 0x13, 0x45, 0x1d, 0xb4,
	0xaf, 0x34, 0x75, 0x78, 0x3d, 0x51, 0x54, 0xa9, 0x84, 0xad, 0xc1, 0x91, 0x93, 0xe1, 0x06, 0xbe,
	0x8c, 0x2d, 0x19, 0xd1, 0xf7, 0xea, 0x5d, 0xae, 0x32, 0x6c, 0xe2, 0xde, 0xe1, 0xb8, 0x8a, 0x2c,
	0x41, 0x35, 0x8c, 0x93, 0xaa, 0xf2, 0x03, 0xa8, 0x45, 0x14, 0x97, 0x6a, 0xf2, 0x1e, 0x3c, 0x08,
	0xe6, 0xcc, 0x79, 0xeb, 0x11, 0xb0, 0x10, 0xd9, 0x08, 0x5b, 0x83, 0xc1, 0xa4, 0xf0, 0x30, 0x23,
	0x45, 0x51, 0xa5, 0x07, 0x1b, 0x4a, 0x61, 0xb0, 0x76, 0xd5, 0x1b, 0x3c, 0x91, 0xe4, 0x88, 0x60,
	0x82, 0x6b, 0xf7, 0x54, 0x69, 0x47, 0xfe, 0x0a, 0x1c, 0x6d, 0x80, 0x43, 0x23, 0xef, 0x86, 0x47,
	0xbe, 0x1e, 0x5c, 0x8f, 0x95, 0x8e, 0xb4, 0x77, 0xaa, 0x43, 0x2d, 0xd2, 0x81, 0x89, 0x07, 0x1e,
	0x4f, 0x54, 0xa5, 0xdd, 0xef, 0x0d, 0x2e, 0xb5, 0xc9, 0x67, 0x23, 0xac, 0x91, 0x7a, 0xd1, 0x1f,
	0xe2, 0xad, 0x71, 0x08, 0x7b, 0x31, 0x9c, 0xf2, 0x54, 0x19, 0x4c, 0xc6, 0xf4, 0xcc, 0xc6, 0x50,
	0xed, 0x2b, 0x45, 0x9d, 0x8c, 0xa5, 0xcc, 0xe9, 0x87, 0xf0, 0x60, 0xa3, 0x4b, 0x53, 0x3e, 0x81,
	0xd7, 0x03, 0xfa, 0x91, 0x3a, 0x9c, 0x0c, 0xcf, 0x87, 0x57, 0xf4, 0xc7, 0xd9, 0xf5, 0x85, 0x36,
	0x7c, 0xaa, 0xa8, 0xda, 0xe4, 0x7c, 0x24, 0xa5, 0x4e, 0x15, 0x68, 0xc4, 0xfe, 0x1d, 0x8a, 0x77,
	0x5f, 0xc0, 0x8c, 0xb7, 0xf7, 0xf5, 0x58, 0xbb, 0x1e, 0xc5, 0x15, 0x64, 0x88, 0x0e, 0xde, 0xd6,
	0xe9, 0xd3, 0x3e, 0x1c, 0x6c, 0xe9, 0xd4, 0x8c, 0x72, 0x5d, 0x0f, 0xc6, 0xca, 0xc7, 0xd7, 0xca,
	0xe0, 0x5c, 0xe9, 0x48, 0xa9, 0xd8, 0x48, 0x02, 0x91, 0x3e, 0xfd, 0x00, 0x0e, 0xb6, 0xf4, 0xcd,
	0xc9, 0x25, 0xc8, 0xf5, 0x46, 0x4f, 0xdf, 0x93, 0x52, 0xec, 0xd7, 0xfb, 0x52, 0x1a, 0xff, 0x52,
	0x9e, 0x8e, 0x06, 0x52, 0xe6, 0xf4, 0x0a, 0x20, 0xf4, 0x6e, 0x5c, 0x81, 0x22, 0x5e, 0x54, 0xaa,
	0x7d, 0x0d, 0xca, 0xe4, 0x83, 0x6a, 0x8c, 0x37, 0x05, 0xc5, 0xb1, 0xa3, 0x99, 0x11, 0x90, 0x7e,
	0x6f, 0x3c, 0xc6, 0xa7, 0x3c, 0x7b, 0xfa, 0x98, 0xb4, 0x6a, 0x50, 0x97, 0x5a, 0x81, 0x62, 0xbf,
	0x7d, 0xae, 0xb5, 0x3b, 0x58, 0xf1, 0x3a, 0x00, 0xfe, 0xe8, 0x28, 0x57, 0xca, 0x04, 0xfb, 0xd4,
	0x2a, 0x94, 0xf0, 0x77, 0x7f, 0xf8, 0x54, 0x91, 0x32, 0xa7, 0x6f, 0x92, 0x0e, 0x08, 0xc1, 0xd6,
	0x56, 0x47, 0x01, 0x1b, 0xfe, 0xe0, 0x6c, 0xa7, 0x26, 0x34, 0x62, 0x8f, 0xfe, 0x58, 0x89, 0xfe,
	0x55, 0xfb, 0x32, 0xe4, 0x31, 0x38, 0x84, 0xab, 0x95, 0xc6, 0x87, 0x84, 0x40, 0x3a, 0xbd, 0x71,
	0xfb, 0xec, 0x4a, 0xe9, 0x48, 0x19, 0x01, 0xea, 0x0d, 0x98, 0x9f, 0xcf, 0x62, 0x4f, 0x43, 0x40,
	0x0c, 0x90, 0x3b, 0xfd, 0x65, 0x1a, 0x6a, 0x91, 0xf7, 0x7a, 0xbc, 0xd5, 0x19, 0xd7, 0xe4, 0x22,
	0x34, 0x62, 0x04, 0x1c, 0x0c, 0xbb, 0x0f, 0x72, 0x00, 0x0e, 0x8d, 0xdd, 0x84, 0xdd, 0x00, 0x7e,
	0x3e, 0x1c, 0x5c, 0xf4, 0x2e, 0xaf, 0x55, 0xa5, 0x23, 0x65, 0xa3, 0x1c, 0x42, 0xb5, 0x1c, 0x76,
	0xda, 0x01, 0x9c, 0x42, 0xb5, 0x51, 0x5b, 0x9d, 0xf4, 0xda, 0x57, 0x52, 0x1e, 0x6f, 0x98, 0x0d,
	0xec, 0xc5, 0xf5, 0xd5, 0x95, 0x54, 0x38, 0xfd, 0x26, 0xeb, 0x77, 0xa7, 0xea, 0xd7, 0xa0, 0x4c,
	0x5c, 0x10, 0xb3, 0xae, 0x04, 0x55, 0xfa, 0x29, 0xec, 0x3b, 0x81, 0x5a, 0xe4, 0xc6, 0x8c, 0x39,
	0xc8, 0xc1, 0xd1, 0xae, 0x86, 0x9f, 0x50, 0x0e, 0xfa, 0xd9, 0x57, 0x3a, 0xbd, 0xeb, 0xbe, 0x94,
	0x26, 0x2b, 0x44, 0x20, 0xdd, 0xde, 0x65, 0x57, 0xca, 0xe0, 0x43, 0x4d, 0xbf, 0xcf, 0xd5, 0xde,
	0xa4, 0x77, 0xde, 0xbe, 0x92, 0xb2, 0xa7, 0x3f, 0x4b, 0x83, 0x14, 0xef, 0x6d, 0xc7, 0x2e, 0x92,
	0x0e, 0xae, 0x0c, 0x26, 0xea, 0x67, 0xe2, 0xd8, 0x08, 0x9b, 0x1e, 0xc2, 0x5e, 0x12, 0x7e, 0x24,
	0xa5, 0xb7, 0xb0, 0x72, 0x7b, 0x64, 0xb6, 0xe0, 0x83, 0x5d, 0xaa, 0x43, 0x6d, 0x40, 0xff, 0xab,
	0xc5, 0x74, 0x39, 0x82, 0x83, 0x81, 0xf2, 0xe9, 0x44, 0xeb, 0x0e, 0x47, 0x9b, 0x8a, 0xec, 0x83,
	0xbc, 0x81, 0xc4, 0x5a, 0x24, 0x30, 0xf1, 0x21, 0x32, 0xa7, 0x53, 0x28, 0x93, 0x19, 0x13, 0x1f,
	0xb6, 0x0f, 0x32, 0xd5, 0x87, 0x38, 0xa2, 0xc8, 0xb6, 0x09, 0xc1, 0x3b, 0x3d, 0x55, 0x39, 0x9f,
	0xd0, 0x00, 0x17, 0x02, 0x9f, 0x5d, 0x8e, 0xa4, 0x0c, 0x0e, 0x8d, 0x21, 0x18, 0x1e, 0x4e, 0xca,
	0x9e, 0x7a, 0x20, 0x6d, 0xfc, 0xfd, 0x82, 0x24, 0x07, 0xa3, 0xab, 0xe1, 0x67, 0x7d, 0x65, 0x30,
	0xe1, 0x7a, 0xf5, 0x06, 0x23, 0x75, 0x78, 0xa9, 0x2a, 0xe3, 0xb1, 0x94, 0xc2, 0x7e, 0x79, 0x93,
	0x62, 0x7c, 0x7d, 0x7e, 0xae, 0x28, 0x1d, 0xec, 0x4b, 0x68, 0x86, 0x10, 0x27, 0xb8, 0x68, 0xf7,
	0xc8, 0xe6, 0x3d, 0xfd, 0xfb, 0x34, 0xec, 0x26, 0x75, 0xaa, 0xcb, 0x6f, 0xc1, 0x49, 0xe0, 0x9b,
	0xe8, 0x1e, 0x50, 0x95, 0xf6, 0x78, 0x38, 0x60, 0xbc, 0x78, 0xa7, 0x0f, 0x94, 0xf3, 0x49, 0x8f,
	0xf8, 0xee, 0x16, 0xbc, 0xba, 0x85, 0x7a, 0xd2, 0xeb, 0x2b, 0xc3, 0x6b, 0x6c, 0x88, 0x37, 0xa0,
	0xb5, 0x85, 0xa6, 0x33, 0xa0, 0x1a, 0x5d, 0xab, 0x8a, 0x94, 0x89, 0x3a, 0xef, 0x08, 0xdd, 0x27,
	0x6a, 0x0f, 0xdb, 0x8c, 0x49, 0xcc, 0x9e, 0x2e, 0xa1, 0x11, 0x6b, 0x6b, 0xc6, 0xd6, 0x3e, 0xbb,
	0x1c, 0x69, 0x63, 0x65, 0x3c, 0xee, 0x0d, 0x07, 0xd4, 0xf3, 0xed, 0x92, 0xbf, 0xad, 0x0b, 0x18,
	0x73, 0x80, 0x07, 0xb0, 0x13, 0x86, 0x8a, 0xc5, 0x8e, 0x23, 0xf8, 0x02, 0x67, 0x4f, 0xff, 0x3c,
	0x0d, 0x8d, 0x58, 0x17, 0x2a, 0x3e, 0xfc, 0xed, 0xcb, 0x4b, 0x55, 0xb9, 0x6c, 0x63, 0x4b, 0xd0,
	0xf5, 0xec, 0xb7, 0x3f, 0x95, 0xd2, 0xc9, 0x98, 0xde, 0x80, 0x3a, 0x8c, 0x0d, 0xcc, 0xf8, 0xba,
	0x2f, 0x65, 0x13, 0x31, 0xed, 0xa7, 0x97, 0x52, 0x2e, 0x99, 0x67, 0xd2, 0x91, 0xf2, 0xa7, 0x3f,
	0x84, 0x6a, 0xb8, 0xdd, 0x0e, 0x6f, 0xc3, 0xae, 0xd2, 0xee, 0xa8, 0xc3, 0x61, 0x3f, 0xac, 0xce,
	0x26, 0x18, 0xeb, 0xf2, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0x19, 0x02, 0xf6, 0x30, 0x44,
	0x00, 0x00,
}
